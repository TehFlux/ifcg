# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BezierSpline.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/BezierCurve.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifobject/objectutils.hpp"'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/EvalCoord.hpp"'
        '"ifmapping/PointCoord.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BezierSpline
	shortDesc = Cubic Bezier spline
	title = Cubic Bezier spline
	longDesc = A cubic bezier spline.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::Mapping::PointMapping
            include = ifmapping/PointMapping.hpp
            hasClassInfo = true
		}
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
        'create'
        'upcast'
        'xmlio'
    }
    create.allocationError = MappingError("Could not allocate object.")
    xml.elementName = bezspline
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = segments
    desc = Segment vector
    element = {
        type = Ionflux::Mapping::BezierCurve*
        name = Segment
        managed = true
        valueType = object
        createExpr = BezierCurve::create()
    }
    xml.child = {
        name = segments
        elementName = bezcurvevec
    }
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
BezierCurveVector v0;
for (BezierCurveVector::const_iterator i = other.segments.begin(); 
    i != other.segments.end(); i++)
{
    BezierCurve* c0 = *i;
    if (c0 != 0)
        v0.push_back(c0->copy());
    else
        v0.push_back(0);
}
/* <---- DEBUG ----- //
std::ostringstream message;
message << "Segments: " << other.getNumSegments();
log(IFLogMessage(message.str(), VL_DEBUG, this, "operator="));
// <---- DEBUG ----- */
clearSegments();
addSegments(v0);
>>>
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getSegmentIndex
    const = true
	shortDesc = Get segment index for parameter
	longDesc = Get the segment index for a parameter value
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Parameter
	}
	impl = <<<
unsigned int numSegments0 = getNumSegments();
if (numSegments0 == 0)
    throw MappingError(getErrorString(
        "Spline does not have any segments.", 
        "getSegmentIndex"));
int si = static_cast<int>(floor(t * numSegments0));
if (si < 0)
    si = 0;
else
if (static_cast<unsigned int>(si) >= numSegments0)
    si = numSegments0 - 1;
>>>
    return = {
        value = static_cast<unsigned int>(si)
        desc = Segment index
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = getPoints
	shortDesc = Get points on the spline
	longDesc = Get a number of points within the specified coordinate interval. The points will be stored in the target point set.
	param[] = {
		type = Ionflux::Mapping::PointSet&
		name = target
		desc = Target set
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = x0
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = x1
		desc = Upper bound
        default = 1.
	}
	param[] = {
		type = unsigned int
		name = numPoints
		desc = Number of points
        default = 10
	}
	param[] = {
		type = Ionflux::Mapping::CoordinateID
		name = coord
		desc = Coordinate
		default = Ionflux::Mapping::C_X
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
Ionflux::Mapping::MappingValue dx = (x1 - x0) / (numPoints - 1);
for (unsigned int i = 0; i < numPoints; i++)
{
    Ionflux::Mapping::MappingValue xc = x0 + i * dx;
    Ionflux::Mapping::Point* p0 = 
        evalCoord(xc, coord, precision).copy();
    target.addPoint(p0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = initFromSVG
	shortDesc = Initialize from SVG data
	longDesc = Initialize the spline from SVG path data.
	param[] = {
		type = const std::string&
		name = rawData
		desc = SVG path data
	}
	impl = <<<
clearSegments();
PointSet points;
extractSVGControlPoints(rawData, points);
unsigned int numPoints = points.getNumPoints();
if (numPoints % 4 != 0)
{
    std::ostringstream message;
    message << "Invalid number of points (" << numPoints << ").";
    throw MappingError(getErrorString(message.str(), "initFromSVG"));
}
unsigned int numSegments = numPoints / 4;
for (unsigned int i = 0; i < numSegments; i++)
{
    Point* p0 = points.getPoint(4 * i);
    Point* p1 = points.getPoint(4 * i + 1);
    Point* p2 = points.getPoint(4 * i + 2);
    Point* p3 = points.getPoint(4 * i + 3);
    BezierCurve* c0 = BezierCurve::create(*p0, *p1, *p2, *p3);
    addSegment(c0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Evaluate the bezier curve
	longDesc = Evaluate the bezier curve with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = <<<
unsigned int numSegments0 = getNumSegments();
unsigned int si = getSegmentIndex(value);
Ionflux::Mapping::BezierCurve* s = getSegment(si);
double d = 1. / numSegments0;
>>>
    return = {
        value = (*s)((value - d * si) / d)
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::BezierSpline
	name = interpolate
    const = true
	shortDesc = Interpolate bezier splines
	longDesc = Calculate a linear interpolation of two bezier splines.
	param[] = {
		type = const Ionflux::Mapping::BezierSpline&
		name = other
		desc = Other spline
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Interpolation parameter
        default = 0.5
	}
    impl = <<<
BezierSpline result;
if (segments.size() != other.segments.size())
    throw MappingError(getErrorString(
        "Cannot interpolate splines with "
        "different number of segments.", "interpolate"));
/* <---- DEBUG ----- //
std::ostringstream message;
// <---- DEBUG ----- */
for (unsigned int i = 0; i < segments.size(); i++)
{
    BezierCurve* c0 = 
        segments[i]->interpolate(*(other.segments[i]), t).copy();
    /* <---- DEBUG ----- //
    message.str("");
    message << c0->getString();
    log(IFLogMessage(message.str(), VL_DEBUG, this, "interpolate"));
    // <---- DEBUG ----- */
    result.addSegment(c0);
}
>>>
    return = {
        value = result
        desc = Interpolated bezier spline
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Mapping*
	name = createFunc
	shortDesc = Create functional mapping
	longDesc = Create a mapping that generates values from the spline.
	param[] = {
	    type = Ionflux::Mapping::MappingValue
	    name = paramScale
	    desc = Parameter scale
	    default = 1.
	}
	param[] = {
	    type = Ionflux::Mapping::MappingValue
	    name = paramOffset
	    desc = Parameter offset
	    default = 0.
	}
	param[] = {
	    type = const Ionflux::Mapping::Point&
	    name = outputScale
	    desc = Output scale
	    default = Ionflux::Mapping::Point::ONES
	}
	param[] = {
	    type = const Ionflux::Mapping::Point&
	    name = outputOffset
	    desc = Output offset
	    default = Ionflux::Mapping::Point::ORIGIN
	}
	param[] = {
	    type = Ionflux::Mapping::CoordinateID
	    name = inCoord
	    desc = Input coordinate
	    default = Ionflux::Mapping::C_X
	}
	param[] = {
	    type = Ionflux::Mapping::CoordinateID
	    name = outCoord
	    desc = Output coordinate
	    default = Ionflux::Mapping::C_Y
	}
	impl = <<<
EvalCoord* ec = EvalCoord::create();
ec->setFunc(this);
ec->setCoord(inCoord);
ec->setParamScale(paramScale);
ec->setParamOffset(paramOffset);
ec->setScale(outputScale);
ec->setOffset(outputOffset);
PointCoord* pc = PointCoord::create();
pc->setFunc(ec);
pc->setCoord(outCoord);
>>>
    return = {
        value = pc
        desc = Mapping
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getSVGPathData
	const = true
	shortDesc = Get SVG path data
	longDesc = Get SVG path data for the bezier spline. The specified image plane normal coordinate will be assumed to be orthogonal to the image plane and omitted from the path data.
	param[] = {
	    type = const Ionflux::Mapping::CoordinateID
	    name = imagePlaneNormal
	    desc = Image plane normal axis
	    default = Ionflux::Mapping::C_Z
	}
	impl = <<<
std::ostringstream result;
unsigned int numSegments = getNumSegments();
Point* pPrev = 0;
for (unsigned int k = 0; k < numSegments; k++)
{
    BezierCurve* c0 = getSegment(k);
    if (c0 != 0)
    {
        Point* p0 = Ionflux::ObjectBase::nullPointerCheck(
            c0->getPoint(0), this, "getSVGPathData", "Point (0)");
        if (k == 0)
        {
            // first segment
            result << "M ";
            result << p0->getSVGPathData(imagePlaneNormal) << " C";
        } else
        {
            /* Check whether the last point of the previous segment 
               is equal to the first point of this segment. */
            if (!p0->eq(*pPrev))
            {
                std::ostringstream status;
                status << "Spline is not continuous (p0 = (" 
                    << p0->getValueString()<< "), pPrev = (" 
                    << pPrev->getValueString() << "))";
                throw MappingError(getErrorString(status.str(), 
                    "getSVGPathData"));
            }
        }
        result << " " << c0->getSVGPathData(imagePlaneNormal, 1);
        pPrev = Ionflux::ObjectBase::nullPointerCheck(
            c0->getPoint(3), this, "getSVGPathData", "Point (3)");
    }
}
>>>
    return = {
        value = result.str()
        desc = SVG path data
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
bool e0 = true;
for (BezierCurveVector::const_iterator i = segments.begin(); 
    i != segments.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "[" << (*i)->getValueString() << "]";
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

