# =================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# PointSample.conf              Class configuration.
# =================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/Point.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = PointSample
	shortDesc = Point sample
	title = Point sample
	longDesc = A sample of a single parameter value of a point mapping. The sample can include additional data such as the arc length.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
        'memdebug'
    }
    create = {
        allocationError = MappingError("Could not allocate object.")
        extendedCreate = true
    }
    xml = {
        elementName = ps
    }
    memDebug.autoEnable = true
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = param
	desc = parameter value
	valueType = float
	xml.attribute.name = t
}
property.protected[] = {
	type = Ionflux::Mapping::Point*
	setFromType = Ionflux::Mapping::Point*
	name = coords
	desc = coordinates
	managed = true
	valueType = Object
	xml.child.name = coords
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = arcLength
	desc = arc length
	valueType = float
	xml.attribute.name = l
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = param
        value = 0.
    }
    initializer[] = {
        name = coords
        value = 0
    }
    initializer[] = {
        name = arcLength
        value = 0.
    }
}
constructor.public[] = {
    initializer[] = {
        name = param
        value = initParam
    }
    initializer[] = {
        name = coords
        value = 0
    }
    initializer[] = {
        name = arcLength
        value = initArcLength
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initParam
        desc = parameter
    }
    param[] = {
        type = Ionflux::Mapping::Point*
        name = initCoords
        desc = coordinates
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initArcLength
        desc = arc length
        default = 0.
    }
    impl = <<<
if (initCoords != 0)
    setCoords(initCoords);
>>>
}

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
param = other.param;
arcLength = other.arcLength;
if (other.coords != 0)
    setCoords(other.coords->copy());
else
    setCoords(0);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getValue
	shortDesc = Get value
	longDesc = Get a value of the sample according to the specified sampling mode.
	param[] = {
	    type = Ionflux::Mapping::SamplingMode
	    name = samplingMode
	    desc = sampling mode
	    default = Ionflux::Mapping::SAMPLING_MODE_PARAM
	}
	impl = <<<
MappingValue result = 0.;
if (samplingMode == SAMPLING_MODE_PARAM)
    result = getParam();
else
if (samplingMode == SAMPLING_MODE_ARC_LENGTH)
    result = getArcLength();
else
if ((samplingMode == SAMPLING_MODE_POINT_COORD_X) 
    || (samplingMode == SAMPLING_MODE_POINT_COORD_Y) 
    || (samplingMode == SAMPLING_MODE_POINT_COORD_Z))
{
    Point* p0 = getCoords();
    if (p0 != 0)
    {
        if (samplingMode == SAMPLING_MODE_POINT_COORD_X)
            result = p0->getCoord(0);
        else 
        if (samplingMode == SAMPLING_MODE_POINT_COORD_Y)
            result = p0->getCoord(1);
        else 
        if (samplingMode == SAMPLING_MODE_POINT_COORD_Z)
            result = p0->getCoord(2);
    }
} else
{
    std::ostringstream status;
    status << "Unknown sampling mode (samplingMode = " 
        << samplingMode << ")";
    throw MappingError(getErrorString(status.str(), 
        "getValue"));
}
>>>
	return = {
	    value = result
	    desc = Sample value
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << param << ", ";
if (coords != 0)
    status << "(" << coords->getValueString() << ")";
else
    status << "<none>";
status << ", l = " << arcLength;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

