# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# EvalCoord.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = EvalCoord
	shortDesc = Evaluate coordinate point mapping
	title = Evaluate coordinate point mapping
	longDesc = Evaluate a point mapping at a specified coordinate. This can be used to convert parametric point mappings (like \c BezierCurve or \c BezierSpline) into function mappings.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/PointMapping.hpp
            name = Ionflux::Mapping::PointMapping
        }
	}
    features = {
        'classinfo'
        'copy'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::PointMapping*
    setFromType = Ionflux::Mapping::PointMapping*
    managed = true
    name = func
    desc = Mapping
}
property.protected[] = {
    type = Ionflux::Mapping::CoordinateID
    setFromType = Ionflux::Mapping::CoordinateID
    name = coord
    desc = Coordinate
}
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = Ionflux::Mapping::Point
    name = offset
    desc = Offset
}
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = Ionflux::Mapping::Point
    name = scale
    desc = Scale
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = paramOffset
    desc = Parameter offset
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = paramScale
    desc = Parameter scale
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = precision
    desc = Precision
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = coord
        value = Ionflux::Mapping::C_X
    }
    initializer[] = {
        name = offset
        value = Ionflux::Mapping::Point::ORIGIN
    }
    initializer[] = {
        name = scale
        value = Ionflux::Mapping::Point::ONES
    }
    initializer[] = {
        name = paramOffset
        value = 0.
    }
    initializer[] = {
        name = paramScale
        value = 1.
    }
    initializer[] = {
        name = precision
        value = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = coord
        value = initCoord
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = scale
        value = initScale
    }
    initializer[] = {
        name = paramOffset
        value = initParamOffset
    }
    initializer[] = {
        name = paramScale
        value = initParamScale
    }
    initializer[] = {
        name = precision
        value = initPrecision
    }
    param[] = {
        type = Ionflux::Mapping::PointMapping*
        name = initFunc
        desc = Mapping
    }
    param[] = {
        type = Ionflux::Mapping::CoordinateID
        name = initCoord
        desc = Coordinate
        default = Ionflux::Mapping::C_X
    }
    param[] = {
        type = Ionflux::Mapping::Point
        name = initOffset
        desc = Offset
        default = Ionflux::Mapping::Point::ORIGIN
    }
    param[] = {
        type = Ionflux::Mapping::Point
        name = initScale
        desc = Scale
        default = Ionflux::Mapping::Point::ONES
    }
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = initParamOffset
		desc = Parameter offset
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = initParamScale
		desc = Parameter scale
        default = 1.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = initPrecision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = setFunc(initFunc);
}

# Protected member functions.

# Public member functions.
function.copy.impl = setFunc(other.func);\
coord = other.coord;\
offset = other.offset;\
precision = other.precision;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (func != 0)\
    status << (*func);\
else\
    status << "<none>";\
status << "; " << coordToString(coord) << ", " << offset << ", " \
    << scale << ", " << paramScale << ", " << paramOffset << ", " \
    << precision << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = Point result = func->evalCoord(\
        value * paramScale + paramOffset, coord, precision);
    return = {
        value = result * scale + offset
        desc = Mapped value
    }
}

# Pure virtual member functions.

# operations

