# =================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# Segment.conf              Class configuration.
# =================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifobject/objectutils.hpp"'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/PointSample.hpp"'
    }
}

# forward declarations
forward = {
    'class PointSample'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Segment
	shortDesc = Segment
	title = Segment
	longDesc = A segment is a discretization of an underlying point mapping. Each segment consists of two point samples and provides methods to get interpolated values on the segment. A segment can have child segments at a finer resolution, creating a hierarchy of segments from which values can be sampled.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#	inheritanceType = virtual public
		#}
        other[] = {
			name = Ionflux::Mapping::PointMapping
            include = ifmapping/PointMapping.hpp
            hasClassInfo = true
            xml = {
                enabled = true
                include = ifmapping/PointMapping
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
        'memdebug'
    }
    create = {
        allocationError = MappingError("Could not allocate object.")
        extendedCreate = true
    }
    xml = {
        elementName = ps
    }
    memDebug.autoEnable = true
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Mapping::PointMapping*
	setFromType = Ionflux::Mapping::PointMapping*
	name = func
	desc = point mapping
	managed = true
	valueType = object
	## NOTE: Not included in the XML representation to avoid 
	##       duplication of data within the segment hierarchy.
	#xml.child.name = func
}
property.protected[] = {
	type = Ionflux::Mapping::PointSample*
	setFromType = Ionflux::Mapping::PointSample*
	name = p0
	desc = point sample (0)
	managed = true
	valueType = object
	xml.child.name = p0
}
property.protected[] = {
	type = Ionflux::Mapping::PointSample*
	setFromType = Ionflux::Mapping::PointSample*
	name = p1
	desc = point sample (1)
	managed = true
	valueType = object
	xml.child.name = p1
}
property.protected[] = {
    style = vector
    name = segments
    desc = Child segments
    element = {
        type = Ionflux::Mapping::Segment*
        name = Segment
        managed = true
        valueType = object
        createExpr = Segment::create()
    }
    xml.child = {
        name = segments
        elementName = segvec
    }
    extendedAddFuncs = true
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Mapping::MappingValue
    name = DEFAULT_ERROR_THRESHOLD
    desc = Default error thteshold
    value = 1e-4
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = p0
        value = 0
    }
    initializer[] = {
        name = p1
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = p0
        value = 0
    }
    initializer[] = {
        name = p1
        value = 0
    }
    param[] = {
        type = Ionflux::Mapping::PointMapping*
        name = initFunc
        desc = point mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = t0
        desc = parameter (0)
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = t1
        desc = parameter (1)
        default = 1.
    }
    impl = <<<
if (initFunc != 0)
{
    setFunc(initFunc);
    setP0(initFunc->getSample(t0, false));
    setP1(initFunc->getSample(t1, false));
}
>>>
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = p0
        value = 0
    }
    initializer[] = {
        name = p1
        value = 0
    }
    param[] = {
        type = Ionflux::Mapping::PointMapping*
        name = initFunc
        desc = point mapping
    }
    param[] = {
        type = Ionflux::Mapping::PointSample*
        name = initP0
        desc = point sample (0)
    }
    param[] = {
        type = Ionflux::Mapping::PointSample*
        name = initP1
        desc = point sample (1)
        default = 0
    }
    impl = <<<
if (initFunc != 0)
    setFunc(initFunc);
if (initP0 != 0)
    setP0(initP0);
if (initP1 != 0)
    setP1(initP1);
>>>
}

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
if (other.p0 != 0)
    setP0(other.p0->copy());
else
    setP0(0);
if (other.p1 != 0)
    setP1(other.p1->copy());
else
    setP1(0);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getLength
	const = true
	shortDesc = Get length
	longDesc = Get an estimate for the length of the segment, based on the endpoint coordinates. If the optional \c recursive argument is set to \c true, child segments will be queried recursively to estimate the length.
	param[] = {
	    type = bool
	    name = recursive
	    desc = estimate length recursively
	    default = false
	}
	param[] = {
	    type = unsigned int
	    name = maxDepth
	    desc = maximum depth for recursive length estimation
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = depth
	    desc = current depth for recursive length estimation
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(p0, this, "getLength", 
    "Point sample (0)");
Ionflux::ObjectBase::nullPointerCheck(p1, this, "getLength", 
    "Point sample (1)");
MappingValue result = 0.;
unsigned int numSegments0 = getNumSegments();
if (!recursive 
    || (numSegments0 < 2))
{
    Point* pp0 = p0->getCoords();
    Point* pp1 = p1->getCoords();
    result = pp0->distance(*pp1);
} else
{
    for (unsigned int i = 0; i < numSegments0; i++)
    {
        Segment* s0 = getSegment(i);
        if (s0 != 0)
        {
            if ((maxDepth == 0) 
                || ((depth + 1) < maxDepth))
            {
                result += s0->getLength(recursive, 
                    maxDepth, depth + 1);
            } else
                result += s0->getLength(false);
        }
    }
}
>>>
    return = {
        value = result
        desc = Length of the segment
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getLengthError
	const = true
	shortDesc = Get length error
	longDesc = Get an estimate for the length error of the segment relative to the length of the specified depth level of child segments.
	param[] = {
	    type = bool
	    name = relativeError
	    desc = calculate relative error
	    default = true
	}
	param[] = {
	    type = unsigned int
	    name = maxDepth
	    desc = maximum depth
	    default = 1
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::Mapping::DEFAULT_TOLERANCE
	}
	impl = <<<
MappingValue l0 = getLength(false);
if (eq(l0, 0., t))
    throw MappingError(getErrorString(
        "Segment has zero length.", "getLengthError"));
if (maxDepth < 1)
    throw MappingError(getErrorString(
        "Maximum depth must be at least 1.", "getLengthError"));
MappingValue l1 = getLength(true, maxDepth);
if (eq(l0, l1, t))
    return 0.;
MappingValue result = 0.;
if (relativeError)
    result = ::fabs(l1 / l0 - 1.);
else
    result = ::fabs(l1 - l0);
>>>
    return = {
        value = result
        desc = Length error for the segment
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = split
	shortDesc = Split
	longDesc = Split the segment by creating a specified number of connected child segments. If \c recursive is set to \c true, segments will be split recursively until either the length error between the last and the first-to-last depth level is below the threshold for all leaf segments, or until the maximum recursion depth is reached, whichever comes first.
	param[] = {
	    type = unsigned int
	    name = numSplits
	    desc = number of child segments to be created
	    default = 2
	}
	param[] = {
	    type = bool
	    name = recursive
	    desc = split recursively
	    default = false
	}
	param[] = {
	    type = bool
	    name = relativeError
	    desc = use relative error
	    default = true
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = errorThreshold
		desc = error threshold
        default = Ionflux::Mapping::Segment::DEFAULT_ERROR_THRESHOLD
	}
    param[] = {
        type = unsigned int
        name = maxDepth
        desc = maximum recursion depth
        default = 0
    }
    param[] = {
        type = unsigned int
        name = depth
        desc = current recursion depth
        default = 0
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::Mapping::DEFAULT_TOLERANCE
	}
	impl = <<<
if (numSplits < 2)
{
    std::ostringstream status;
    status << "Number of splits must be at least two "
        "(numSplits = " << numSplits << ").";
    throw MappingError(getErrorString(status.str(), "split"));
}
if ((maxDepth != 0) 
    && (depth >= maxDepth))
    return;
Ionflux::ObjectBase::nullPointerCheck(func, this, "split", 
    "Point mapping");
Ionflux::ObjectBase::nullPointerCheck(p0, this, "split", 
    "Point sample (0)");
Ionflux::ObjectBase::nullPointerCheck(p1, this, "split", 
    "Point sample (1)");
MappingValue t0 = p0->getParam();
MappingValue t1 = p1->getParam();
if (eq(t1, t0, t))
{
    std::ostringstream status;
    status << "Start and end parameters are equal (t0 = " 
        << t0 << ", t1 = " << t1 << ").";
    throw MappingError(getErrorString(status.str(), "split"));
}
MappingValue dt = (t1 - t0) / numSplits;
MappingValue l0 = p0->getArcLength();
/* Resample the mapping at the split points and create 
   new segments. */
for (unsigned int i = 0; i < numSplits; i++)
{
    PointSample* nps0 = func->getSample(
        static_cast<MappingValue>(i) * dt, false);
    PointSample* nps1 = func->getSample(
        static_cast<MappingValue>(i + 1) * dt, false);
    Point* np0 = nps0->getCoords();
    Point* np1 = nps1->getCoords();
    nps0->setArcLength(l0);
    MappingValue dl0 = np0->distance(*np1);
    nps1->setArcLength(l0 + dl0);
    l0 += dl0;
    Segment* s0 = Segment::create(func, nps0, nps1);
    addSegment(s0);
}
if (recursive)
{
    // Split segments recursively if error is above threshold.
    MappingValue e0 = getLengthError(relativeError, 1, t);
    if (e0 > errorThreshold)
    {
        for (SegmentVector::iterator i = segments.begin(); 
            i != segments.end(); i++)
        {
            Segment* s0 = *i;
            if (s0 != 0)
            {
                s0->split(numSplits, recursive, relativeError, 
                    errorThreshold, maxDepth, depth + 1, t);
            }
        }
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Segment*
	name = findSegment
	shortDesc = Find segment
	longDesc = Find a child segment for the specified parameter value and sampling mode.
	param[] = {
	    type = Ionflux::Mapping::MappingValue
	    name = value
	    desc = Parameter value
	}
	param[] = {
	    type = Ionflux::Mapping::SamplingMode
	    name = samplingMode
	    desc = sampling mode
	    default = Ionflux::Mapping::SAMPLING_MODE_PARAM
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::Mapping::DEFAULT_TOLERANCE
	}
	impl = <<<
unsigned int numSegments0 = getNumSegments();
if (numSegments0 == 0)
    return 0;
if (ltOrEq(value, 0., t))
    return getSegment(0);
if (gtOrEq(value, 1., t))
    return getSegment(numSegments0 - 1);
Segment* result = 0;
unsigned int k = 0;
Segment* s0 = 0;
bool found = false;
// Find the relevant child segment.
while ((k < numSegments0) 
    && !found)
{
    s0 = getSegment(k);
    if (s0 != 0)
    {
        PointSample* ps0 = s0->getP0();
        PointSample* ps1 = s0->getP1();
        MappingValue v0 = ps0->getValue(samplingMode);
        MappingValue v1 = ps1->getValue(samplingMode);
        if (gtOrEq(value, v0, t)
            && ltOrEq(value, v1, t))
            found = true;
        else
            k++;
    }
}
if (s0 != 0)
    result = s0;
else
{
    std::ostringstream status;
    status << "Could not find suitable non-null child "
        "segment (value = " << value << ", samplingMode = " 
        << getSamplingModeString(samplingMode) << " (" 
        << samplingMode << ")).";
    throw MappingError(getErrorString(status.str(), 
        "findSegment"));
}
>>>
	return = {
	    value = result
	    desc = Segment
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::PointSample*
	name = getSample0
	shortDesc = Get sample
	longDesc = Get a sample from the segment for the specified parameter value and sampling mode. No sampling of the underlying point mapping is involved when this function is called.
	param[] = {
	    type = Ionflux::Mapping::MappingValue
	    name = value
	    desc = Parameter value
	}
	param[] = {
	    type = Ionflux::Mapping::SamplingMode
	    name = samplingMode
	    desc = sampling mode
	    default = Ionflux::Mapping::SAMPLING_MODE_PARAM
	}
	param[] = {
	    type = bool
	    name = recursive
	    desc = sample segments recursively
	    default = false
	}
    param[] = {
        type = unsigned int
        name = maxDepth
        desc = maximum recursion depth
        default = 0
    }
    param[] = {
        type = unsigned int
        name = depth
        desc = current recursion depth
        default = 0
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::Mapping::DEFAULT_TOLERANCE
	}
	impl = <<<
unsigned int numSegments0 = getNumSegments();
PointSample* result = 0;
if (recursive
    && ((maxDepth == 0)
        || (depth < maxDepth))
    && (numSegments0 >= 2))
{
    // Sample child segments recursively.
    Segment* s0 = findSegment(value, samplingMode, t);
    result = s0->getSample0(value, samplingMode, recursive, 
        maxDepth, depth + 1, t);
    return result;
}
// Sample this segment.
Ionflux::ObjectBase::nullPointerCheck(p0, this, "getSample", 
    "Point sample (0)");
Ionflux::ObjectBase::nullPointerCheck(p1, this, "getSample", 
    "Point sample (1)");
Point* pp0 = p0->getCoords();
Point* pp1 = p1->getCoords();
MappingValue t0 = p0->getParam();
MappingValue t1 = p1->getParam();
MappingValue l0 = p0->getArcLength();
MappingValue l1 = p1->getArcLength();
MappingValue sv0 = p0->getValue(samplingMode);
MappingValue sv1 = p1->getValue(samplingMode);
MappingValue it0 = (value - sv0) / (sv1 - sv0);
Point* np0 = Point::create();
*np0 = pp0->interpolate(*pp1, it0);
result = PointSample::create(t0 + it0 * (t1 - t0), np0, 
    l0 + it0 * (l1 - l0));
>>>
	return = {
	    value = result
	    desc = Point sample
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
if (p0 != 0)
    status << "[" << p0->getValueString() << "]";
else
    status << "<none>";
status << ", ";
if (p1 != 0)
    status << "[" << p1->getValueString() << "]";
else
    status << "<none>";
status << "; [";
bool e0 = true;
for (SegmentVector::const_iterator i = segments.begin(); 
    i != segments.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "[" << (*i)->getValueString() << "]";
}
if (segments.size() == 0)
    status << "<none>";
status << "]";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Public member functions overridden from PointMapping
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getParamCoord
	shortDesc = Get parameter for coordinate value
	longDesc = Get the parameter value corresponding to the specified  coordinate value. Since the coordinate value is interpolated for a segment mapping, the \c precision argument is ignored.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Coordinate value
	}
	param[] = {
		type = Ionflux::Mapping::CoordinateID
		name = coord
		desc = Coordinate
		default = Ionflux::Mapping::C_X
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
SamplingMode m0 = SAMPLING_MODE_POINT_COORD_X;
if (coord == C_Y)
    m0 = SAMPLING_MODE_POINT_COORD_Y;
else
if (coord == C_Z)
    m0 = SAMPLING_MODE_POINT_COORD_Z;
PointSample* ps0 = getSample0(value, m0, true);
addLocalRef(ps0);
MappingValue result = ps0->getParam();
removeLocalRef(ps0);
>>>
    return = {
        value = result
        desc = Parameter value for the specified coordinate value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getParamArcLength
	shortDesc = Get parameter for arc length
	longDesc = Get the parameter value corresponding to the specified arc length. Since the arc length is interpolated for a segment mapping, the \c relativeError, \c maxNumIterations and \c precision arguments are ignored.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Arc length value
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
if (value == 0.)
    return 0.;
PointSample* ps0 = getSample0(value, 
    SAMPLING_MODE_ARC_LENGTH, true);
addLocalRef(ps0);
MappingValue result = ps0->getArcLength();
removeLocalRef(ps0);
>>>
    return = {
        value = result
        desc = Parameter value for the specified arc length
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::PointSample*
	name = getSample
	shortDesc = Get sample
	longDesc = Get a sample of the point mapping at the specified parameter value. If the optional \c calculateArcLength argument is set to \c true, the arc length will be calculated for the sample. Otherwise, the arc length will be set to zero. The caller is responsible for managing the returned object. Since the arc length is interpolated for a segment mapping, the \c relativeError and \c maxNumIterations arguments are ignored.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
	param[] = {
		type = bool
		name = calculateArcLength
		desc = calculate arc length
		default = false
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
    impl = <<<
PointSample* result = getSample0(value, SAMPLING_MODE_PARAM, true);
if (!calculateArcLength)
    result->setArcLength(0);
>>>
    return = {
        value = result
        desc = New point sample object
    }
}

# Public member functions implemented for PointMapping
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = <<<
PointSample* ps0 = getSample0(value, SAMPLING_MODE_PARAM, true);
addLocalRef(ps0);
Point* pps0 = ps0->getCoords();
Point result(*pps0);
removeLocalRef(ps0);
>>>
    return = {
        value = result
        desc = Point
    }
}

# Pure virtual member functions.

# operations

