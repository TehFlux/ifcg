# =================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# ArcLength.conf              Class configuration.
# =================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/PointMapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ArcLength
	shortDesc = Arc length mapping
	title = Arc length mapping
	longDesc = Calculates the arc length of a point mapping using a specified reference parameter and relative error.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/Mapping.hpp
            name = Ionflux::Mapping::Mapping
        }
	}
    features = {
        'classinfo'
        'copy'
        'create'
        'upcast'
    }
    create = {
        allocationError = MappingError("Could not allocate object.")
        extendedCreate = true
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::PointMapping*
    setFromType = Ionflux::Mapping::PointMapping*
    managed = true
    name = func
    desc = Mapping
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = offset
    desc = Offset
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = scale
    desc = Scale
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = refParam
    desc = Reference parameter
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = relativeError
    desc = Relative error
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = maxNumIterations
    desc = Maximum number of iterations
}

# Public static constants.
constant.public[] = {
    type = Ionflux::Mapping::MappingValue
    name = DEFAULT_RELATIVE_ERROR
    desc = Default relative error
    value = 1e-4
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_MAX_NUM_ITERATIONS
    desc = Maximum number of iterations
    value = 14
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = offset
        value = 0.
    }
    initializer[] = {
        name = scale
        value = 1.
    }
    initializer[] = {
        name = refParam
        value = 0.
    }
    initializer[] = {
        name = relativeError
        value = DEFAULT_RELATIVE_ERROR
    }
    initializer[] = {
        name = maxNumIterations
        value = DEFAULT_MAX_NUM_ITERATIONS
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = scale
        value = initScale
    }
    initializer[] = {
        name = refParam
        value = initRefParam
    }
    initializer[] = {
        name = relativeError
        value = initRelativeError
    }
    initializer[] = {
        name = maxNumIterations
        value = initMaxNumIterations
    }
    param[] = {
        type = Ionflux::Mapping::PointMapping*
        name = initFunc
        desc = Mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initRefParam
        desc = Reference parameter
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initRelativeError
        desc = Relative error
        default = DEFAULT_RELATIVE_ERROR
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initMaxNumIterations
        desc = Maximum number of iterations
        default = DEFAULT_MAX_NUM_ITERATIONS
    }
    impl = setFunc(initFunc);
}

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setFunc(other.func);
refParam = other.refParam;
relativeError = other.relativeError;
>>>
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
ostringstream status;
if (func != 0)
    status << (*func);
else
    status << "<none>";
status << "; refParam = " << refParam 
    << ", relativeError = " << relativeError 
    << ", maxNumIterations = " << maxNumIterations
    << ", scale = " << scale << ", offset = " << offset;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = call
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = <<<
double result = 0.;
unsigned int numSteps = 3;
double re0 = 2. * relativeError;
unsigned int k = 0;
while ((re0 > relativeError) 
    && (k < maxNumIterations))
{
    double result0 = 0.;
    double dt = (value - refParam) 
        / static_cast<double>(numSteps);
    for (unsigned int i = 0; i < numSteps; i++)
    {
        Point p0((*func)(refParam + dt * i));
        Point p1((*func)(refParam + dt * (i + 1)));
        result0 += p0.distance(p1);
    }
    if (result0 != 0.)
        re0 = ::fabs(1. - result / result0);
    else
        re0 = 0.;
    result = result0;
    numSteps *= 2;
    k++;
}
/* <---- DEBUG ----- //
std::cerr << "[ArcLength::call] DEBUG: "
    "k = " << k << ", maxNumIterations = " << maxNumIterations 
    << ", relativeError = " << relativeError << ", re0 = " << re0
    << std::endl;
// ----- DEBUG ----> */
>>>
    return = {
        value = result * scale + offset
        desc = Mapped value
    }
}

# Pure virtual member functions.

# operations

