# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ChainableMapping.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
# 
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ChainableMapping
	shortDesc = Chainable mapping
	title = Chainable mapping
	longDesc = Abstract base class for mappings that are chainable. If the source mapping is set, a chainable mapping calls the source mapping with the current parameter and uses the resulting value as its own parameter. If the source mapping is not specified, the mapping will use the parameter itself as its parameter. In other words, if M is the chainable mapping, the result of M(t) is either M(t) or M(F(t) if F is set. An optional scale factor and offset may be specified. These are used to transform the parameter before applying the mapping if the source mapping is not used. The \c resultScale and \c resultOffset factors are used to transform the resulting value. 
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/Mapping.hpp
            name = Ionflux::Mapping::Mapping
        }
	}
    features = {
        'classinfo'
        'copy'
        'upcast'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = func
    desc = Source mapping
    managed = true
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = scale
    desc = Scale factor
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = offset
    desc = Offset
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = resultScale
    desc = Result scale factor
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = resultOffset
    desc = Result offset
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = scale
        value = 1.
    }
    initializer[] = {
        name = offset
        value = 0.
    }
    initializer[] = {
        name = resultScale
        value = 1.
    }
    initializer[] = {
        name = resultOffset
        value = 0.
    }
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = scale
        value = initScale
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = resultScale
        value = initResultScale
    }
    initializer[] = {
        name = resultOffset
        value = initResultOffset
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initResultScale
        desc = Result scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initResultOffset
        desc = Result offset
        default = 0.
    }
    impl = setFunc(initFunc);
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = setFunc(other.func);\
scale = other.scale;\
offset = other.offset;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (func != 0)\
    status << (*func);\
else\
    status << "<none>";\
status << "; " << scale << ", " << offset << "; " \
    << resultScale << ", " << resultOffset << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = callWithParam
    const = true
    pureVirtual = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = call
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping using the conventions for chainable mappings. This means callWithParam() is called with the parameter if no source function has been set. Otherwise, callWithParam() is called with the result of calling the source mapping with the parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = MappingValue t0 = 0.;\
if (func == 0)\
    t0 = scale * value + offset;\
else\
    t0 = (*func)(value);
    return = {
        value = resultScale * callWithParam(t0) + resultOffset;
        desc = Mapped value
    }
}

# Pure virtual member functions.

# operations

