# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Piecewise.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/PointSet.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/Piece.hpp"'
        '"ifmapping/Constant.hpp"'
        '"ifmapping/Linear.hpp"'
    }
}

# forward declarations
forward = {
    'class Piece'
}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
# 
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Piecewise
	shortDesc = Piecewise mapping
	title = Piecewise mapping
	longDesc = A mapping consisting of several pieces. Each piece consists of a Mapping and the value at which the piece starts.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/ChainableMapping.hpp
            name = Ionflux::Mapping::ChainableMapping
            hasClassInfo = true
        }
	}
    features = {
        'classinfo'
        'create'
        'copy'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = pieces
    desc = Pieces
    element = {
        type = Ionflux::Mapping::Piece*
        name = Piece
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}
constructor.public[] = {
    initializer[] = {
        name = ChainableMapping
        value = initFunc, initScale, initOffset
    }
    param[] = {
        type = const Ionflux::Mapping::PieceVector&
        name = initPieces
        desc = Pieces
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    impl = addPieces(initPieces);
}
constructor.public[] = {
    initializer[] = {
        name = ChainableMapping
        value = initFunc, initScale, initOffset
    }
    param[] = {
        type = const Ionflux::Mapping::PointSet&
        name = points
        desc = Points
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    impl = PieceVector target;\
Piece::createPieces(points, target);\
addPieces(target);
}

# Protected member functions.

# Public member functions.
function.copy.impl = ChainableMapping::operator=(other);\
PieceVector v0;\
for (PieceVector::const_iterator i = other.pieces.begin(); \
    i != other.pieces.end(); i++)\
\{\
    Piece* p0 = *i;\
    if (p0 != 0)\
        v0.push_back(new Piece(*p0));\
    else\
        v0.push_back(0);\
\}\
clearPieces();\
addPieces(v0);
function.public[] = {
	spec = virtual
	type = void
	name = addPieces
	shortDesc = Add pieces
	longDesc = Add pieces from a vector of pieces.
	param[] = {
		type = const Ionflux::Mapping::PieceVector&
		name = newPieces
		desc = Pieces
	}
    impl = for (PieceVector::const_iterator i = newPieces.begin(); \
    i != newPieces.end(); i++)\
    addPiece(*i);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Piece
	name = getPieceForT
    const = true
	shortDesc = Get a piece of the mapping
	longDesc = Get the piece of function definition that applies for t. Also rescale t so it can be used to get a corrent interpolated value from the piece. Returns a piece containing a mapping and the rescaled parameter. If no suitable piece exists for t, the mapping field of the resulting piece will be set to 0.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Parameter
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = tolerance
		desc = Tolerance
		default = Ionflux::Mapping::DEFAULT_TOLERANCE
	}
    impl = Piece* p0 = 0;\
if (pieces.size() == 0)\
    return Piece();\
p0 = pieces[0];\
if (p0 == 0)\
    throw MappingError("Piece is null.");\
Ionflux::Mapping::MappingValue t0 = p0->getParam();\
if ((pieces.size() == 1)\
    || ltOrEq(t, t0, tolerance))\
    /* Use the first (or only) piece with the unmodified \
       parameter. */\
    return Piece(p0->getMapping(), t);\
p0 = pieces[pieces.size() - 1];\
if (p0 == 0)\
    throw MappingError("Piece is null.");\
if (gtOrEq(t, p0->getParam(), tolerance))\
    // Use the last piece with a truncated parameter.\
    return Piece(p0->getMapping(), t - p0->getParam());\
/* Find the first piece that has a parameter greater than the \
   current parameter. */\
unsigned int i = 0;\
p0 = pieces[1];\
if (p0 == 0)\
    throw MappingError("Piece is null.");\
Ionflux::Mapping::MappingValue t1 = p0->getParam();\
while (gtOrEq(t, t1, tolerance))\
\{\
    i++;\
    /* The (i+1)-th piece exists because there has to be a piece \
       (with parameter ti) for which t < ti. */\
    p0 = pieces[i + 1];\
    if (p0 == 0)\
        throw MappingError("Piece is null.");\
    t0 = t1;\
    t1 = p0->getParam();\
    if (t1 <= t0)\
    \{\
        std::ostringstream message;\
        message << "Piece out of sequence: " << (*p0);\
        throw MappingError(message.str());\
    \}\
\}\
Piece* p1 = pieces[i];\
// Rescale the parameter.\
Ionflux::Mapping::MappingValue s = (t - p1->getParam()) \
    / (p0->getParam() - p1->getParam());
return = {
        value = Piece(p1->getMapping(), s)
        desc = Piece
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = callWithParam
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = Piece p = getPieceForT(value);\
if (p.getMapping() == 0)\
    return 0.;
    return = {
        value = (*p.getMapping())(p.getParam())
        desc = Mapped value
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Mapping::Piecewise*
	name = sawtooth
	shortDesc = Create sawtooth function.
	longDesc = Create a sawtooth function over the interval [0...1]. This is a piecewise function consisting of a linear segment which is repeated within the interval [0...1] a number of times equal to the frequency.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = freq
		desc = Frequency
		default = 1.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = ampMin
		desc = Minimum amplitude
		default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = ampMax
		desc = Maximum amplitude
		default = 1.
	}
    impl = if (freq <= 0.)\
    throw MappingError("Frequency must be positive.");\
Linear* l0 = Linear::create();\
Piecewise* result = Piecewise::create();\
l0->setLower(ampMin);\
l0->setUpper(ampMax);\
MappingValue d = 1. / freq;\
MappingValue t = 0.;\
Piece* p0 = 0;\
while (t < 1.)\
\{\
    p0 = Piece::create();\
    p0->setMapping(l0);\
    p0->setParam(t);\
    result->addPiece(p0);\
    t += d;\
\}\
Constant* c0 = Constant::create();\
c0->setConstValue(ampMax);\
p0 = Piece::create();\
p0->setMapping(c0);\
p0->setParam(1.);\
result->addPiece(p0);
    return = {
        value = result
        desc = Sawtooth function
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Mapping::Piecewise*
	name = step
	shortDesc = Create step function.
	longDesc = Create a step function over the interval [0...1]. This is a piecewise function consisting of constant segments of equal length within the interval [0...1]. The function value for each segment is chosen so that the first step equals the minimum value, the last step equals the maximum value, and all steps have the same difference in value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = numSteps
		desc = Number of steps
		default = 1.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = minValue
		desc = Minimum value
		default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = maxValue
		desc = Maximum value
		default = 1.
	}
    impl = if (numSteps <= 0.)\
    throw MappingError("Number of steps must be positive.");\
Piecewise* result = Piecewise::create();\
MappingValue dt = 1. / numSteps;\
MappingValue dv = (maxValue - minValue) / numSteps;\
MappingValue t = 0.;\
MappingValue v = minValue;\
Piece* p0 = 0;\
while (t <= 1.)\
\{\
    p0 = Piece::create();\
    Constant* l0 = Constant::create();\
    l0->setConstValue(v);\
    p0->setMapping(l0);\
    p0->setParam(t);\
    result->addPiece(p0);\
    t += dt;\
    v += dv;\
\}
    return = {
        value = result
        desc = Step function
    }
}

# Pure virtual member functions.

# operations

