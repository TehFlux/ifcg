# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Piece.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/PointSet.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/Mapping.hpp"'
        '"ifmapping/Linear.hpp"'
        '"ifmapping/Constant.hpp"'
    }
}

# forward declarations
forward = {
    'class Mapping'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Piece
	shortDesc = Piece
	title = Piece for piecewise mapping
	longDesc = A Piece for a piecewise mapping. This consists of a mapping and a parameter. The parameter can denote the start value for the piece, the rescaled parameter for the piece, or a factor, depending on where the piece is used.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
        	name = IFObject
		}
        ## other base classes
        #other[] = {
        #    include = ifmapping/ChainableMapping.hpp
        #    name = Ionflux::Mapping::ChainableMapping
        #    hasClassInfo = true
        #}
	}
    features = {
        #'classinfo'
        'copy'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = mapping
    desc = Mapping
    managed = true
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = param
    desc = Parameter
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = mapping
        value = 0
    }
    initializer[] = {
        name = param
        value = 0.
    }
}
constructor.public[] = {
    initializer[] = {
        name = mapping
        value = 0
    }
    initializer[] = {
        name = param
        value = initParam
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initMapping
        desc = Mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initParam
        desc = Parameter
        default = 0.
    }
    impl = setMapping(initMapping);
}

# Protected member functions.

# Public member functions.

# Pure virtual member functions.
function.copy.impl = setMapping(other.mapping);\
param = other.param;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (mapping != 0)\
    status << (*mapping);\
else\
    status << "<none>";\
status << ", " << param << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::Mapping::Piece*
	name = create
	shortDesc = Create piece
	longDesc = Create piece
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initMapping
        desc = Mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initParam
        desc = Parameter
    }
	impl = Piece* p0 = create();\
p0->setMapping(initMapping);\
p0->setParam(initParam);
    return = {
        value = p0
        desc = New piece
    }
}
function.public[] = {
	spec = static
	type = void
	name = createPieces
	shortDesc = Create pieces from points
	longDesc = Create pieces from a collection of points. The pieces are linear mappings that interpolate the points. The points will be offset by \c offset and scaled by \c scale before the pieces are created. If \c addConstant is \c true, a constant piece propagating the last Y-value will be added to the target vector.
    param[] = {
        type = const Ionflux::Mapping::PointSet&
        name = points
        desc = Points
    }
    param[] = {
        type = Ionflux::Mapping::PieceVector&
        name = target
        desc = Where to store the pieces
    }
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = offset
        desc = Offset
        default = Ionflux::Mapping::Point::ORIGIN
    }
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = scale
        desc = Scale
        default = Ionflux::Mapping::Point::ONES
    }
    param[] = {
        type = bool
        name = addConstant
        desc = Add a constant piece at the end
        default = true
    }
	impl = unsigned int numPoints = points.getNumPoints();\
if (numPoints < 2)\
    throw MappingError("Not enough points to create pieces " \
        "(needs at least 2 points).");\
double tx = offset.getX();\
double ty = offset.getY();\
double sx = scale.getX();\
double sy = scale.getY();\
for (unsigned int i = 1; i < numPoints; i++)\
\{\
    Point* p0 = points.getPoint(i - 1);\
    Point* p1 = points.getPoint(i);\
    Linear* m0 = Linear::create(p0->getY() * sy + ty, p1->getY() * sy + ty);\
    Piece* p = Piece::create(m0, p0->getX() * sx + tx);\
    target.push_back(p);\
    if (addConstant \
        && (i == (numPoints - 1)))\
    \{\
        Constant* m1 = Constant::create(p1->getY() * sy + ty);\
        p = Piece::create(m1, p1->getX() * sx + tx);\
        target.push_back(p);\
    \}\
\}
}

# operations

