# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# PointMapping.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/Point.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/PointCoord.hpp"'
        '"ifmapping/BrentLinearRootFinder.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = PointMapping
	shortDesc = Point mapping
	title = Point mapping
	longDesc = A mapping that maps a parameter value to a point in two-dimensional space.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
	}
    features = {
    #    'copy'
        'upcast'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.


# Public static constants.
constant.public[] = {
    type = Ionflux::Mapping::MappingValue
    name = DEFAULT_PRECISION
    desc = Default precision
    value = 1e-5
}

# Protected static constants.

# Public constructors.
#constructor.copy.impl = *this = other;
constructor.default = {
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = evalCoord
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping at the specified coordinate value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Coordinate value
	}
	param[] = {
		type = Ionflux::Mapping::CoordinateID
		name = coord
		desc = Coordinate
		default = Ionflux::Mapping::C_X
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = Ionflux::Mapping::PointCoord* fc = \
    new Ionflux::Mapping::PointCoord(this, coord, -value);\
Ionflux::Mapping::BrentLinearRootFinder rf;\
rf.setFunc(fc);\
Ionflux::Mapping::MappingValue t = rf(0. - precision, \
    1. + precision, precision);
    return = {
        value = call(t)
        desc = Y value for the specified X value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = operator()
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
    return = {
        value = call(value);
        desc = Mapped value
    }
}


# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
    pureVirtual = true
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
}

# operations

