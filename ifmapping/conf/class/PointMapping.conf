# =================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# PointMapping.conf              Class configuration.
# =================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/Point.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/PointCoord.hpp"'
        '"ifmapping/PointSample.hpp"'
        '"ifmapping/ArcLength.hpp"'
        '"ifmapping/BrentLinearRootFinder.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
    'class PointSample'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = PointMapping
	shortDesc = Point mapping
	title = Point mapping
	longDesc = A mapping that maps a parameter value to a point in two-dimensional space.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'memdebug'
        'xmlio'
    }
    create = {
        allocationError = MappingError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = pmap
    memDebug.autoEnable = true
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.


# Public static constants.
constant.public[] = {
    type = Ionflux::Mapping::MappingValue
    name = DEFAULT_PRECISION
    desc = Default precision
    value = 1e-5
}
constant.public[] = {
    type = Ionflux::Mapping::MappingValue
    name = DEFAULT_RELATIVE_ERROR
    desc = Default relative error
    value = 1e-4
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_MAX_NUM_ITERATIONS
    desc = Maximum number of iterations
    value = 14
}

# Protected static constants.

# Public constructors.
#constructor.copy.impl = *this = other;
constructor.default = {
}

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getParamCoord
	shortDesc = Get parameter for coordinate value
	longDesc = Get the parameter value corresponding to the specified  coordinate value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Coordinate value
	}
	param[] = {
		type = Ionflux::Mapping::CoordinateID
		name = coord
		desc = Coordinate
		default = Ionflux::Mapping::C_X
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
addRef();
PointCoord* fc = PointCoord::create(this, coord, -value);
BrentLinearRootFinder* rf = BrentLinearRootFinder::create();
addLocalRef(rf);
rf->setFunc(fc);
MappingValue t = (*rf)(0. - precision, 1. + precision, precision);
removeLocalRef(rf);
removeRef();
>>>
    return = {
        value = t
        desc = Parameter value for the specified coordinate value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = evalCoord
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping at the specified coordinate value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Coordinate value
	}
	param[] = {
		type = Ionflux::Mapping::CoordinateID
		name = coord
		desc = Coordinate
		default = Ionflux::Mapping::C_X
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
Ionflux::Mapping::MappingValue t = getParamCoord(
    value, coord, precision);
>>>
    return = {
        value = call(t)
        desc = Mapping point for the specified coordinate value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getParamArcLength
	shortDesc = Get parameter for arc length
	longDesc = Get the parameter value corresponding to the specified arc length.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Arc length value
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
if (value == 0.)
    return 0.;
addRef();
ArcLength* fc = ArcLength::create(
        this, -value, 1., 0., relativeError, maxNumIterations);
BrentLinearRootFinder* rf = BrentLinearRootFinder::create();
addLocalRef(rf);
rf->setFunc(fc);
Ionflux::Mapping::MappingValue t = (*rf)(0. - precision, 
    1. + precision, precision);
removeLocalRef(rf);
removeRef();
>>>
    return = {
        value = t
        desc = Parameter value for the specified arc length
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = evalArcLength
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping at the specified arc length.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Arc length value
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = precision
		desc = Precision
        default = Ionflux::Mapping::PointMapping::DEFAULT_PRECISION
	}
    impl = <<<
Ionflux::Mapping::MappingValue t = getParamArcLength(
    value, relativeError, maxNumIterations, precision);
>>>
    return = {
        value = call(t)
        desc = Mapping point for the specified arc length
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::PointSample*
	name = getSample
	shortDesc = Get sample
	longDesc = Get a sample of the point mapping at the specified parameter value. If the optional \c calculateArcLength argument is set to \c true, the arc length will be calculated for the sample. Otherwise, the arc length will be set to zero. The caller is responsible for managing the returned object.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
	param[] = {
		type = bool
		name = calculateArcLength
		desc = calculate arc length
		default = false
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
    impl = <<<
MappingValue l0 = 0.;
if (calculateArcLength)
{
    addRef();
    ArcLength* fc = ArcLength::create(this, 0., 1., 0., 
        relativeError, maxNumIterations);
    addLocalRef(fc);
    l0 = (*fc)(value);
    removeLocalRef(fc);
    removeRef();
}
Point* p0 = Point::create();
*p0 = call(value);
PointSample* s0 = PointSample::create(value, p0, l0);
>>>
    return = {
        value = s0
        desc = New point sample object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getArcLength
	shortDesc = Get arc length
	longDesc = Get the arc length at the specified parameter value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Parameter value
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = relativeError
		desc = Relative error
        default = Ionflux::Mapping::PointMapping::DEFAULT_RELATIVE_ERROR
	}
    param[] = {
        type = unsigned int
        name = maxNumIterations
        desc = Maximum number of iterations
        default = Ionflux::Mapping::PointMapping::DEFAULT_MAX_NUM_ITERATIONS
    }
    impl = <<<
if (value == 0.)
    return 0.;
addRef();
ArcLength* fc = ArcLength::create(
    this, 0., 1., 0., relativeError, maxNumIterations);
addLocalRef(fc);
MappingValue result = (*fc)(value);
removeLocalRef(fc);
removeRef();
>>>
    return = {
        value = result
        desc = Parameter value for the specified arc length
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = operator()
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
    return = {
        value = call(value);
        desc = Mapped value
    }
}


# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
    return = {
        value = Point()
        desc = Point
    }
}

# operations

