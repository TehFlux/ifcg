# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BezierCurve.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BezierCurve
	shortDesc = Cubic Bezier curve
	title = Cubic Bezier curve
	longDesc = A cubic bezier curve.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::Mapping::PointMapping
            include = ifmapping/PointMapping.hpp
		}
        other[] = {
			name = Ionflux::Mapping::PointSet
            include = ifmapping/PointSet.hpp
		}
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = const Ionflux::Mapping::Point&
    name = p0
    desc = Control point (0)
    proxy = true
    impl.get = return *(points[0]);
    impl.set = *(points[0]) = newP0;
}
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = const Ionflux::Mapping::Point&
    name = p1
    desc = Control point (1)
    proxy = true
    impl.get = return *(points[1]);
    impl.set = *(points[1]) = newP1;
}
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = const Ionflux::Mapping::Point&
    name = p2
    desc = Control point (2)
    proxy = true
    impl.get = return *(points[2]);
    impl.set = *(points[2]) = newP2;
}
property.protected[] = {
    type = Ionflux::Mapping::Point
    setFromType = const Ionflux::Mapping::Point&
    name = p3
    desc = Control point (3)
    proxy = true
    impl.get = return *(points[3]);
    impl.set = *(points[3]) = newP3;
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = for (unsigned int i = 0; i < 4; i++)\
    addPoint(new Point());
}
constructor.public[] = {
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = initP0
        desc = Control point (0)
    }
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = initP1
        desc = Control point (1)
    }
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = initP2
        desc = Control point (2)
    }
    param[] = {
        type = const Ionflux::Mapping::Point&
        name = initP3
        desc = Control point (3)
    }
    impl = addPoint(new Point(initP0));\
addPoint(new Point(initP1));\
addPoint(new Point(initP2));\
addPoint(new Point(initP3));
}
constructor.public[] = {
    param[] = {
        type = const Ionflux::Mapping::PointVector&
        name = initPoints
        desc = Control point vector
    }
    impl = addPoints(initPoints);\
// Make sure the four control points are allocated.\
for (unsigned int i = 0; i < 4; i++)\
    if (points[i] == 0)\
    \{\
        Point* p0 = new Point();\
        addLocalRef(p0);\
        points[i] = p0;\
    \}
}
constructor.public[] = {
    param[] = {
        type = const Ionflux::Mapping::PointSet&
        name = initPoints
        desc = Control point set
    }
    impl = addPoints(initPoints);\
// Make sure the four control points are allocated.\
for (unsigned int i = 0; i < 4; i++)\
    if (points[i] == 0)\
    \{\
        Point* p0 = new Point();\
        addLocalRef(p0);\
        points[i] = p0;\
    \}
}

# Protected member functions.

# Public member functions.
function.copy.impl = PointSet::operator=(other);\
while (points.size() < 4)\
    addPoint(new Point());\
// Make sure the four control points are allocated.\
for (unsigned int i = 0; i < 4; i++)\
    if (points[i] == 0)\
    \{\
        Point* p0 = new Point();\
        addLocalRef(p0);\
        points[i] = p0;\
    \}
function.public[] = {
	spec = virtual
	type = void
	name = setControlPoints
	shortDesc = Set control points
	longDesc = Set control points from a vector of points.
	param[] = {
		type = const Ionflux::Mapping::PointVector&
		name = newPoints
		desc = Points
	}
    impl = unsigned int numPoints = points.size();\
for (unsigned int i = 0; i < newPoints.size(); i++)\
\{\
    Point* p0 = newPoints[i];\
    if ((i < numPoints) \
        && (p0 != 0))\
        *(points[i]) = *p0;\
    else\
    \{\
        if (p0 != 0)\
            addPoint(new Point(*p0));\
        else\
            addPoint(0);\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = setControlPoints
	shortDesc = Set control points
	longDesc = Set control points from a set of points.
	param[] = {
		type = const Ionflux::Mapping::PointSet&
		name = newPoints
		desc = Points
	}
    impl = unsigned int numPoints = points.size();\
for (unsigned int i = 0; i < newPoints.getNumPoints(); i++)\
\{\
    Point* p0 = newPoints.getPoint(i);\
    if ((i < numPoints) \
        && (p0 != 0))\
        *(points[i]) = *p0;\
    else\
    \{\
        if (p0 != 0)\
            addPoint(new Point(*p0));\
        else\
            addPoint(0);\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << *(points[0]) << ", " \
    << *(points[1]) << ", " << *(points[2])  << ", " \
    << *(points[3]) << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Evaluate the bezier curve
	longDesc = Evaluate the bezier curve with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
    return = {
        value = bezier(value, points)
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::BezierCurve
	name = interpolate
    const = true
	shortDesc = Interpolate bezier curves
	longDesc = Calculate a linear interpolation of two bezier curves.
	param[] = {
		type = const Ionflux::Mapping::BezierCurve&
		name = other
		desc = Other curve
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Interpolation parameter
        default = 0.5
	}
    impl = /* <---- DEBUG ----- //\
std::ostringstream message;\
// <---- DEBUG ----- */\
BezierCurve result;\
for (unsigned int i = 0; i < points.size(); i++)\
\{\
    Point* p0 = points[i];\
    if (p0 == 0)\
        throw MappingError("Point (0) is null.");\
    Point* p1 = other.points[i];\
    if (p1 == 0)\
        throw MappingError("Point (1) is null.");\
    Point p2 = p0->interpolate(*p1, t);\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "(" << p0.x << ", " << p0.y << ")";\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "interpolate"));\
    // <---- DEBUG ----- */\
    *(result.points[i]) = p2;\
\}
    return = {
        value = result
        desc = Interpolated bezier curve
    }
}

# Pure virtual member functions.

# operations

