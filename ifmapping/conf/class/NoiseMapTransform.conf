# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# NoiseMapTransform.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.
namespace[].name = Ionflux
namespace[].name = Mapping
namespace[].name = Noise

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifmapping/types.hpp"'
	    '"ifmapping/Mapping.hpp"'
	    '"noise/noiseutils.h"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<sstream>'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NoiseMapTransform
	shortDesc = Noise map transform
	title = Noise map transform
	longDesc = Transform the values in a libnoise noise map by applying the mapping to each value. The optional scale factor and offset are applied to the original noise map value before the mapping is applied. The \c resultScale and \c resultOffset factors are applied after the mapping is apllied, before the value is put back into the noise map.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
        	name = IFObject
		}
        ## other base classes
        #other[] = {
        #    include = noise/module/modulebase.h
        #    name = noise::module::Module
        #}
	}
    features = {
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = func
    desc = Source mapping
    managed = true
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = scale
    desc = Scale factor
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = offset
    desc = Offset
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = resultScale
    desc = Result scale factor
}
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = resultOffset
    desc = Result offset
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = scale
        value = 0.5
    }
    initializer[] = {
        name = offset
        value = 0.5
    }
    initializer[] = {
        name = resultScale
        value = 2.
    }
    initializer[] = {
        name = resultOffset
        value = -1.
    }
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = scale
        value = initScale
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = resultScale
        value = initResultScale
    }
    initializer[] = {
        name = resultOffset
        value = initResultOffset
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 0.5
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.5
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initResultScale
        desc = Result scale factor
        default = 2.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initResultOffset
        desc = Result offset
        default = -1.
    }
    impl = setFunc(initFunc);
}

# Protected member functions.

# Public member functions.

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform noise map
	longDesc = Transform the specified libnoide noise map.
	param[] = {
	    type = noise::utils::NoiseMap&
	    name = map
	    desc = Noise map
	}
    impl = int width = map.GetWidth();\
int height = map.GetHeight();\
int stride = map.GetStride();\
float* data = map.GetSlabPtr();\
for (int y = 0; y < height; y++)\
    for (int x = 0; x < width; x++)\
    \{\
        float* cur = data + y * stride + x;\
        double t0 = scale * (*cur) + offset;\
        if (func != 0)\
            *cur = resultScale * (*func)(t0) + resultOffset;\
        else\
            *cur = resultScale * t0 + resultOffset;\
    \}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (func != 0)\
    status << (*func);\
else\
    status << "<none>";\
status << "; " << scale << ", " << offset << "; " \
    << resultScale << ", " << resultOffset << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# operations

