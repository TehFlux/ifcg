# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# PointSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/Point.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = PointSet
	shortDesc = Point set
	title = Point set
	longDesc = A collection of points.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
			inheritanceType = virtual public
		}
        #other[] = {
		#	name = Ionflux::Mapping::PointMapping
        #    include = ifmapping/PointMapping.hpp
		#}
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = points
    desc = Point vector
    element = {
        type = Ionflux::Mapping::Point*
        name = Point
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
#constructor.default = {
#    impl = 
#}
constructor.public[] = {
    param[] = {
        type = const Ionflux::Mapping::PointVector&
        name = initPoints
        desc = Control point vector
    }
    impl = addPoints(initPoints);
}

# Protected member functions.

# Public member functions.
function.copy.impl = PointVector v0;\
for (unsigned int i = 0; i < other.points.size(); i++)\
\{\
    Point* p0 = other.points[i];\
    if (p0 != 0)\
        v0.push_back(new Point(*p0));\
    else\
        v0.push_back(0);\
\}\
clearPoints();\
addPoints(v0);
function.public[] = {
	spec = virtual
	type = void
	name = addPoints
	shortDesc = Add points
	longDesc = Add points from a vector of points.
	param[] = {
		type = const Ionflux::Mapping::PointVector&
		name = newPoints
		desc = Points
	}
    impl = for (PointVector::const_iterator i = newPoints.begin(); \
    i != newPoints.end(); i++)\
    addPoint(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = addPoints
	shortDesc = Add points
	longDesc = Add points from a point set.
	param[] = {
		type = const Ionflux::Mapping::PointSet&
		name = other
		desc = Point set
	}
    impl = for (unsigned int i = 0; i < other.points.size(); i++)\
    addPoint(other.points[i]);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName();
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

