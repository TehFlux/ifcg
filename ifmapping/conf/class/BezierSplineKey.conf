# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BezierSplineKey.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.
namespace[].name = Ionflux
namespace[].name = Mapping

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/BezierSpline.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BezierSplineKey
	shortDesc = Bezier spline key
	title = Bezier spline key
	longDesc = A cubic bezier spline that can be used as a key in an animated spline. The key consists of a spline and a parameter value for the key frame.
	group.name = altjira
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::Mapping::BezierSpline
            include = ifmapping/BezierSpline.hpp
		}
	}
    features = {
        'classinfo'
        'copy'
        'upcast'
        'create'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::MappingValue
    setFromType = Ionflux::Mapping::MappingValue
    name = t
    desc = Parameter
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = t
        value = 0.
    }
}
constructor.public[] = {
    initializer[] = {
        name = t
        value = initT
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initT
        desc = Parameter
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = t
        value = initT
    }
    param[] = {
        type = const Ionflux::Mapping::BezierSpline&
        name = initSpline
        desc = Bezier spline
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initT
        desc = Parameter
    }
    impl = *this = initSpline;
}

# Protected member functions.

# Public member functions.
function.copy.impl = BezierSpline::operator=(other);\
t = other.t;
function.public[] = {
    spec = virtual
	type = Ionflux::Mapping::BezierSplineKey&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a Bezier spline.
	param[] = {
		type = const Ionflux::Mapping::BezierSpline&
		name = other
		desc = Bezier spline
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = BezierSpline::operator=(other);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream message;\
message << getClassName() << "[";\
bool e0 = true;\
for (BezierCurveVector::const_iterator i = segments.begin(); \
    i != segments.end(); i++)\
\{\
    if (!e0)\
        message << ", ";\
    else\
        e0 = false;\
    message << (*i)->getString();\
\}\
message << "; " << t << "]";
    return = {
        value = message.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

