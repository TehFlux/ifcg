# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Point.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	    '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/MappingError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Point
	shortDesc = Point
	title = Point
	longDesc = A point with three coordinates.
	group.name = geoutils
    base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            #inheritanceType = virtual public
		}
        ## other base classes
        #other[] = {
		#	name = Ionflux::GeoUtils::TransformableObject
        #    include = geoutils/TransformableObject.hpp
		#}
    }
    features = {
        'copy'
        'upcast'
        #'classinfo'
        'create'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    initializer[] = {
        name = z
        value = 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = initX
    }
    initializer[] = {
        name = y
        value = initY
    }
    initializer[] = {
        name = z
        value = initZ
    }
    param[] = {
        name = initX
        type = Ionflux::Mapping::MappingValue
        desc = Element (X)
    }
    param[] = {
        name = initY
        type = Ionflux::Mapping::MappingValue
        desc = Element (Y)
    }
    param[] = {
        name = initZ
        type = Ionflux::Mapping::MappingValue
        desc = Element (Z)
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    initializer[] = {
        name = z
        value = 0.
    }
    param[] = {
        name = initCoords
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Coordinate vector
    }
    impl = setCoords(initCoords);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = x
	desc = X coordinate
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = y
	desc = Y coordinate
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = z
	desc = Z coordinate
#    copy = true
#    proxy = true
}

# Public static constants.
constant.public[] = {
    desc = Origin
    type = Ionflux::Mapping::Point
    name = ORIGIN
    value = Ionflux::Mapping::Point(0., 0., 0.)
}
constant.public[] = {
    desc = Default standard deviation
    type = Ionflux::Mapping::Point
    name = DEFAULT_STD_DEV
    value = Ionflux::Mapping::Point(1., 1., 1.)
}
constant.public[] = {
    desc = All ones
    type = Ionflux::Mapping::Point
    name = ONES
    value = Ionflux::Mapping::Point(1., 1., 1.)
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = x = other.x;\
y = other.y;\
z = other.z;
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates from a vector of doubles. If the vector contains fewer than the required number of coordinates, the remaining coordinates will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector&
		name = newCoords
		desc = Coordinate vector
	}
    impl = if (newCoords.size() == 0)\
    return;\
if (newCoords.size() >= 3)\
    z = newCoords[2];\
if (newCoords.size() >= 2)\
    y = newCoords[1];\
x = newCoords[0];
}
function.public[] = {
	spec = virtual
	type = void
	name = getCoords
    const = true
	shortDesc = Get coordinates
	longDesc = Store the coordinates of the vertex in a vector of doubles.
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = target.clear();\
target.push_back(x);\
target.push_back(y);\
target.push_back(z);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = getCoord
    const = true
	shortDesc = Get coordinate
	longDesc = Get the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = 
    return = {
        value = (*this)[index];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoord
	shortDesc = Set coordinate
	longDesc = Set the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = if ((index < 0) || (index > 3))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw MappingError(message.str());\
\}\
if (index == 0)\
    x = value;\
else \
if (index == 1)\
    y = value;
else \
if (index == 2)\
    z = value;
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = interpolate
    const = true
	shortDesc = Interpolate points
	longDesc = Linearly interpolate the point coordinates and the coordinates of the other point using the specified parameter.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = other
		desc = Point
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Parameter
	}
    impl = Point result;\
result.x = (other.x - x) * t + x;\
result.y = (other.y - y) * t + y;\
result.z = (other.z - z) * t + z;
    return = {
        value = result
        desc = Interpolated vertex
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = operator+
	const = true
	shortDesc = Addition operator
	longDesc = Add a point offset.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = other
		desc = Point
	}
	impl = Point result(other.x + x, other.y + y, other.z + z);
	return = {
	    value = result
	    desc = Result of the addition
	}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = operator*
	const = true
	shortDesc = Multiplication operator
	longDesc = Scale a point by factors taken from another point.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = other
		desc = Point
	}
	impl = Point result(other.x * x, other.y * y, other.z * z);
	return = {
	    value = result
	    desc = Result of the multiplication
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = other
		desc = Point
	}
    impl = if (!((x == other.x) && (y == other.y) && (z == other.z)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = other
		desc = Point
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Subscript operator.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = if ((index < 0) || (index > 3))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw MappingError(message.str());\
\}\
Ionflux::Mapping::MappingValue result;\
if (index == 0)\
    result = x;\
if (index == 1)\
    result = y;\
if (index == 2)\
    result = z;
	return = {
        value = result
        desc = Element at specified index
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Mapping::Point
	name = getRandom
	shortDesc = Get random point
	longDesc = Generate a random point.
    impl = 
    return = {
        value = Point(getRandomDouble(), getRandomDouble(), getRandomDouble())
        desc = Random point
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Mapping::Point
	name = getRandomNorm
	shortDesc = Get random normal point
	longDesc = Generate a random point using a normal distribution for each coordinate. The mean value and standard deviation to be used for each coordinate can be specified as two points.
	param[] = {
	    type = const Ionflux::Mapping::Point&
	    name = mean
	    desc = Mean value
	    default = Ionflux::Mapping::Point::ORIGIN
	}
	param[] = {
	    type = const Ionflux::Mapping::Point&
	    name = stdDev
	    desc = Standard deviation
	    default = Ionflux::Mapping::Point::DEFAULT_STD_DEV
	}
    impl = 
    return = {
        value = Point(Ionflux::Mapping::getRandomNorm(mean.x, stdDev.x), Ionflux::Mapping::getRandomNorm(mean.y, stdDev.y), Ionflux::Mapping::getRandomNorm(mean.z, stdDev.z))
        desc = Random point
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << x << ", " << y << ", " << z << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

