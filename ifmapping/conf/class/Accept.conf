# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Accept.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Accept
	shortDesc = Accept method mapping
	title = Accept method mapping
	longDesc = A mapping that obtains a value from its source mapping using the accept method to make sure the value is within the target range. This means the source mapping is called up to \c maxIters times to provide a value within the range. If the method does not yield a value within the range, an exception is thrown.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/ChainableMapping.hpp
            name = Ionflux::Mapping::ChainableMapping
            hasClassInfo = true
        }
	}
    features = {
        'classinfo'
        'copy'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = maxIters
        value = MAX_ITERATIONS
    }
}
constructor.public[] = {
    initializer[] = {
        name = ChainableMapping
        value = initFunc, initScale, initOffset
    }
    initializer[] = {
        name = maxIters
        value = initMaxIters
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
    }
    param[] = {
        type = unsigned int
        name = initMaxIters
        desc = Maximum iterations
        default = MAX_ITERATIONS
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    impl = 
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = maxIters
    desc = Maximum iterations
}
property.protected[] = {
    type = Ionflux::Mapping::Range
    setFromType = const Ionflux::Mapping::Range&
    name = acceptRange
    desc = Acceptable range
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.

# Pure virtual member functions.
function.copy.impl = ChainableMapping::operator=(other);\
maxIters = other.maxIters;\
acceptRange = other.acceptRange;
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
    const = true
	name = callWithParam
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = if (func == 0)\
    throw MappingError("Source function not defined.");\
Ionflux::Mapping::MappingValue f0 = (*func)(value);\
unsigned int i = 0;\
while (!isInRange(acceptRange, f0) \
    && (i <= maxIters))\
\{\
    f0 = (*func)(value);\
    i++;\
\}\
if (i > maxIters)\
    throw MappingError("Maximum number of iterations exceeded.");
    return = {
        value = f0
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = call
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping using the conventions for chainable mappings. This means callWithParam() is called with the parameter if no source function has been set. Otherwise, callWithParam() is called with the result of calling the source mapping with the parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = 
    return = {
        value = callWithParam(value);
        desc = Mapped value
    }
}

# operations

