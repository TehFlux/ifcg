# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# RootFinder.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = RootFinder
	shortDesc = Root finder
	title = Root finder
	longDesc = Finds the root of a function in a specified interval.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'logmessage'
        'copy'
        'upcast'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    managed = true
    name = func
    #copy = true
    desc = Source function
}


# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = setFunc(other.func);
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = compareSigns
    const = true
	shortDesc = Compare signs of function values
	longDesc = Compare the signs of the function values at the specified arguments.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = First argument
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Second argument
	}
    impl = if (Ionflux::Mapping::sign((*func)(a)) \
    == Ionflux::Mapping::sign((*func)(b)))\
    return 0.;
    return = {
        value = 1.
        desc = 0 if the signs are the same, 1 otherwise
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = findStartIntervals
    const = true
	shortDesc = Find start intervals
	longDesc = Find start intervals for the root-finding algorithm. This is accomplished by subdividing the default interval evenly according to the number of samples, evaluating the function on the sample points, and then finding two sample points with opposite signs. Suitable intervals are added to the target vector.
	param[] = {
		type = Ionflux::Mapping::RangeVector&
		name = target
		desc = Target vector
	}
	param[] = {
		type = unsigned int
		name = samples
		desc = Number of samples
        default = 101
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
        default = 1.
	}
    impl = if (samples < 2)\
    // Need at least two samples.\
    samples = 2;\
Ionflux::Mapping::MappingValue d = (b - a) / (samples - 1);\
Ionflux::Mapping::Sample cs0;\
Ionflux::Mapping::Sample cs1;\
for (unsigned int i = 0; i < (samples - 1); i++)\
\{\
    cs0 = func->sample(a + i * d);\
    cs1 = func->sample(a + (i + 1) * d);\
    if (cs0.s != cs1.s)\
    \{\
        Ionflux::Mapping::Range r0;\
        r0.lower = cs0.x;\
        r0.upper = cs1.x;\
        target.push_back(r0);\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Range
	name = findStartInterval
    const = true
	shortDesc = Find start interval
	longDesc = Find a start interval for the root-finding algorithm. This is accomplished by subdividing the default interval evenly according to the number of samples, evaluating the function on the sample points, and then finding two sample points with opposite signs.
	param[] = {
		type = unsigned int
		name = samples
		desc = Number of samples
        default = 101
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
        default = 1.
	}
    impl = if (samples % 2 == 0)\
    // Need an odd number of samples.\
    samples++;\
Ionflux::Mapping::MappingValue d = (b - a) / samples;\
Ionflux::Mapping::Sample negSample;\
Ionflux::Mapping::Sample posSample;\
Ionflux::Mapping::Sample cs0;\
Ionflux::Mapping::Sample cs1;\
negSample.valid = false;\
posSample.valid = false;\
for (unsigned int i = 0; i < samples / 2; i++)\
\{\
    cs0 = func->sample(a + i * d);\
    cs1 = func->sample(b - i * d);\
    // Try to update the negative sample.\
    if (cs0.s < 0.)\
        Ionflux::Mapping::updateSample(cs0, \
            negSample, posSample);\
    if (cs1.s < 0.)\
        Ionflux::Mapping::updateSample(cs1, \
            negSample, posSample);\
    // Try to update the positive sample.\
    if (cs0.s > 0.)\
        Ionflux::Mapping::updateSample(cs0, \
            posSample, negSample);\
    if (cs1.s > 0.)\
        Ionflux::Mapping::updateSample(cs1, \
            posSample, negSample);\
\}\
Ionflux::Mapping::Range result;\
if (!posSample.valid || !negSample.valid)\
\{\
    ostringstream message;\
    message << "Could not find a suitable start interval " \
        << "(a = " << a << ", b = " << b << ", f(a) = " \
        << (*func)(a) << ", f(b) = " << (*func)(b) \
        << ", samples = " << samples << ").";\
    throw Ionflux::Mapping::MappingError(message.str());\
\}\
Ionflux::Mapping::MappingValue x0 = negSample.x;\
Ionflux::Mapping::MappingValue x1 = posSample.x;\
if (x0 < x1)\
\{\
    result.lower = x0;\
    result.upper = x1;\
\} else\
\{\
    result.lower = x1;\
    result.upper = x0;\
\}
    return = {
        value = result
        desc = Start interval
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = operator()
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = delta
		desc = Delta to be used as the abort condition
        default = 0.0001
	}
    impl = 
    return = {
        value = findRoot(a, b, delta);
        desc = Root
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = findRoot
    const = true
    pureVirtual = true
	shortDesc = Find root
	longDesc = Find a root in the specified interval.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = delta
		desc = Delta to be used as the abort condition
        default = 0.0001
	}
}

# operations

