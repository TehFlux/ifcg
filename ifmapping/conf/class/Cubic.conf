# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Cubic.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Cubic
	shortDesc = Cubic mapping
	title = Cubic mapping
	longDesc = A mapping from a parameter to a cubic S-curve interpolation of two values. The lower interpolation value corresponds to a parameter value of 0, the upper interpolation value corresponds to a parameter value of 1.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/Linear.hpp
            name = Ionflux::Mapping::Linear
        }
	}
    features = {
        'classinfo'
        'create'
        'upcast'
        'copy'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}
constructor.public[] = {
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initLower
        desc = Lower interpolation value
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initUpper
        desc = Upper interpolation value
    }
    impl = lower = initLower;\
upper = initUpper;
}

# Protected member functions.

# Public member functions.

# Pure virtual member functions.
function.copy.impl = Linear::operator=(other);
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = callWithParam
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = Ionflux::Mapping::MappingValue t2 = value * value;\
Ionflux::Mapping::MappingValue tx = \
    3. * t2 - 2. * (t2 * value);
    return = {
        value = Linear::callWithParam(tx)
        desc = Mapped value
    }
}

# operations

