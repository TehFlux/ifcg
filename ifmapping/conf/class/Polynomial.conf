# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Polynomial.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
# 
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Polynomial
	shortDesc = Polynomial mapping
	title = Polynomial mapping
	longDesc = A mapping that maps the parameter to a polynomial function of the parameter. The degree of the polynomial is equal to the number of coefficients specified.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/ChainableMapping.hpp
            name = Ionflux::Mapping::ChainableMapping
            hasClassInfo = true
        }
	}
    features = {
        'classinfo'
        'copy'
        'create'
        'upcast'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = coefficients
    desc = Coefficients
    element = {
        type = Ionflux::Mapping::MappingValue
        name = Coefficient
    }
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
#constructor.default = {
#}
constructor.public[] = {
    initializer[] = {
        name = ChainableMapping
        value = initFunc, initScale, initOffset
    }
    param[] = {
        type = const Ionflux::Mapping::MappingValueVector&
        name = initCoefficients
        desc = Coefficients
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffset
        desc = Offset
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source mapping
        default = 0
    }
    impl = coefficients = initCoefficients;
}

# Protected member functions.

# Public member functions.
function.copy.impl = ChainableMapping::operator=(other);\
coefficients = other.coefficients;
function.public[] = {
	spec = virtual
	type = void
	name = addCoefficients
	shortDesc = Add coefficients
	longDesc = Add coefficients from a vector of coefficients.
	param[] = {
		type = const Ionflux::Mapping::MappingValueVector&
		name = newCoefficients
		desc = Coefficients
	}
    impl = for (MappingValueVector::const_iterator i = \
    newCoefficients.begin(); i != newCoefficients.end(); i++)\
    addCoefficient(*i);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (func != 0)\
    status << func->getString();\
else\
    status << "<none>";\
status << "; " << scale << ", " << offset << "; ";\
bool e0 = true;\
for (MappingValueVector::const_iterator i = coefficients.begin(); \
    i != coefficients.end(); i++)\
\{\
    if (!e0)\
        status << ", ";\
    else\
        e0 = false;\
    status << *i;\
\}\
status << "; ";\

    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = callWithParam
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = Ionflux::Mapping::MappingValue result = 0.;\
for (int i = coefficients.size() - 1; i >= 0; i--)\
    result = value * result + coefficients[i];
    return = {
        value = result
        desc = Mapped value
    }
}

# Pure virtual member functions.

# operations

