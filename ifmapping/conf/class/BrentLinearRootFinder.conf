# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BrentLinearRootFinder.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BrentLinearRootFinder
	shortDesc = Brent linear root finder
	title = Brent linear root finder
	longDesc = Finds the root of a function in a specified interval using Brent's method with linear interpolation.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
			name = Ionflux::Mapping::RootFinder
            include = ifmapping/RootFinder.hpp
		}
	}
    features = {
        'classinfo'
        'logmessage'
        'copy'
        'upcast'
        'create'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
#property.protected[] = {
#    type = const Ionflux::Mapping::Mapping*
#    setFromType = const Ionflux::Mapping::Mapping*
#    managed = true
#    name = func
#    desc = Source function
#}


# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = findRoot
    const = true
	shortDesc = Find root
	longDesc = Find a root in the specified interval.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
        default = 0.
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = delta
		desc = Delta to be used as the abort condition
        default = 0.0001
	}
    impl = 
    return = {
        value = findRoot(a, b, delta, 0.01)
        desc = Root of the function
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = findRoot
    const = true
	shortDesc = Find root
	longDesc = Find a root in the specified interval.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = a
		desc = Lower bound
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = b
		desc = Upper bound
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = delta
		desc = Delta to be used as the abort condition
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = tr0
		desc = Threshold for bisection
	}
	param[] = {
		type = unsigned int
		name = samples
		desc = Number of samples
        default = 101
	}
	param[] = {
		type = unsigned int
		name = maxIters
		desc = Maximum number of iterations
        default = 50
	}
	param[] = {
		type = unsigned int
		name = i
		desc = Iteration count
        default = 0
	}
	param[] = {
		type = bool
		name = forceBisection
		desc = Force bisection
        default = false
	}
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = bPrev
		desc = Previous upper bound
        default = 0.
	}
    impl = /* <---- DEBUG ----- //\
ostringstream message;\
// <---- DEBUG ----- */\
if (i == 0)\
    bPrev = b;\
if (i > maxIters)\
    throw MappingError("Could not find a root with the specified " \
        "error and maximum iterations.");\
if (compareSigns(a, b) == 0)\
\{\
    /* <---- DEBUG ----- //\
    log(IFLogMessage("Start interval edge values must have opposite "\
        "signs. Trying to find a suitable interval.", VL_DEBUG, \
        this, "findRoot"));\
    // <---- DEBUG ----- */\
    Range r0 = findStartInterval(samples, a, b);\
    a = r0.lower;\
    b = r0.upper;\
\}\
Ionflux::Mapping::MappingValue fa = (*func)(a);\
Ionflux::Mapping::MappingValue fb = (*func)(b);\
if (fa == 0.)\
    return a;\
if (fb == 0.)\
    return b;\
Ionflux::Mapping::MappingValue c;\
if (fabs(fa) < fabs(fb))\
\{\
    c = a;\
    a = b;\
    b = c;\
\}\
if (fabs(fb) <= delta)\
    return b;\
Ionflux::Mapping::MappingValue m = 0.5 * (a + b);\
bool bisection = false;\
Ionflux::Mapping::MappingValue s = (a - b) / (fb - fa) * fa + a;\
Ionflux::Mapping::MappingValue t = (s - b) / (m - b);\
Ionflux::Mapping::MappingValue bn;\
if (forceBisection)\
\{\
    bn = m;\
    bisection = true;\
\} else \
\{\
    if ((t > 0.) && (t < 1.))\
        bn = s;\
    else\
    \{\
        bn = m;\
        bisection = true;\
    \}\
\}\
Ionflux::Mapping::MappingValue fbn = (*func)(bn);\
Ionflux::Mapping::MappingValue an;\
if (compareSigns(a, bn) != 0)\
    an = a;\
else\
    an = b;\
Ionflux::Mapping::MappingValue fan = (*func)(an);\
if (bisection)\
\{\
    if ((tr0 >= fabs(bn - b)) \
        || (fabs(s - bn) >= 0.5 * fabs(bn - b)))\
        forceBisection = true;\
\} else\
\{\
    if ((tr0 >= fabs(b - bPrev)) \
        || (fabs(s - bn) >= 0.5 * fabs(b - bPrev)))\
        forceBisection = true;\
\}\
if (compareSigns(an, bn) == 0)\
\{\
    ostringstream message;\
    message << "Edge values for next iteration must have " \
        "different signs. (an = " << an << ", bn = " << bn \
        << ", fan = " << fan << ", fbn = " << fbn \
        << ", a = " << a << ", b = " << b << ", fa = " << fa \
        << ", fb = " << fb << ", m = " << m << ", s = " << s \
        << ", t = " << t << ")";\
    throw MappingError(message.str());\
\}\
/* <---- DEBUG ----- //\
message.str("");\
message << "an = " << an << ", bn = " << bn \
    << ", fan = " << fan << ", fbn = " << fbn \
    << ", a = " << a << ", b = " << b << ", fa = " << fa \
    << ", fb = " << fb << ", m = " << m << ", s = " << s \
    << ", t = " << t;\
// <---- DEBUG ----- */
    return = {
        value = findRoot(an, bn, delta, tr0, samples, maxIters, i + 1, forceBisection, b)
        desc = Root of the function
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

