# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# AnimatedSpline.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Namespaces.
namespace[].name = Ionflux
namespace[].name = Mapping

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
        '"ifmapping/BezierSplineKey.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '<cmath>'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = AnimatedSpline
	shortDesc = Animated Bezier spline
	title = Animated Bezier spline
	longDesc = A collection of key splines which are used for interpolating a spline over a parameter. Each key is a tuple containing the parameter value associated with the key and a spline representing the key shape. The spline for a particular parameter value can be obtained by calling the object with the parameter value. Note that all keys in the AnimatedSpline must have the same number of control points.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = keys
    desc = Spline key vector
    element = {
        type = Ionflux::Mapping::BezierSplineKey*
        name = Key
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = getShape
    const = true
	shortDesc = Get shape
	longDesc = Get the interpolated Bezier spline shape for the specified parameter value.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = t
		desc = Parameter
	}
	param[] = {
		type = Ionflux::Mapping::BezierSpline&
		name = target
		desc = Target spline
	}
	impl = unsigned int numKeys = keys.size();\
if (numKeys == 0)\
    throw MappingError("No keys defined.");\
if (numKeys == 1)\
\{\
    target = *dynamic_cast<BezierSpline*>(keys[0]);\
    return;\
\}\
if (t <= keys[0]->getT())\
\{\
    target = *dynamic_cast<BezierSpline*>(keys[0]);\
    return;\
\}\
if (t >= keys[keys.size() - 1]->getT())\
\{\
    target = *dynamic_cast<BezierSpline*>(keys[keys.size() - 1]);\
    return;\
\}\
/* The parameter is somewhere in the range of the keys.\
   Find the end key. */\
unsigned int i = 0;\
BezierSplineKey* k = keys[i];\
MappingValue tk = k->getT();\
while (t > tk)\
\{\
    i++;\
    /* NOTE: 'i' cannot go beyond keys.size() - 1 because of the \
       check above. */\
    k = keys[i];\
    tk = k->getT();\
\}\
if (t == tk)\
\{\
    // Exact match, no need to interpolate.\
    target = *dynamic_cast<BezierSpline*>(k);\
\}\
// NOTE: 'i' is larger than 0 because of the check above.\
BezierSplineKey* k0 = keys[i - 1];\
// Rescale the interpolation parameter to the interval.\
MappingValue s = (t - k0->getT()) / (k->getT() - k0->getT());\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "t = " << t << ", s = " << s << ", k0 = " << k0->getString() \
    << ", k = " << k->getString();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "getShape"));\
// <---- DEBUG ----- */\
target = k0->interpolate(*k, s);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::BezierSpline
	name = call
    const = true
	shortDesc = Evaluate the animated spline
	longDesc = Evaluate the animated spline with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = BezierSpline target;\
getShape(value, target);
    return = {
        value = target
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream message;\
message << getClassName() << "[";\
bool e0 = true;\
for (BezierSplineKeyVector::const_iterator i = keys.begin(); \
    i != keys.end(); i++)\
\{\
    if (!e0)\
        message << ", ";\
    else\
        e0 = false;\
    message << (*i)->getString();\
\}\
message << "]";
    return = {
        value = message.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

