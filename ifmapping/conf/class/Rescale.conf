# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Rescale.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/MappingError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Rescale
	shortDesc = Rescale mapping
	title = Rescale mapping
	longDesc = Rescales the function values to the range 0...1, using the specified arguments to find extreme points.
	group.name = ifmapping
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
        #	name = Ionflux::Mapping::Mapping
		#}
        # other base classes
        other[] = {
            include = ifmapping/Mapping.hpp
            name = Ionflux::Mapping::Mapping
        }
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
        'create'
    }
    create.allocationError = MappingError("Could not allocate object.")
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    managed = true
    name = func
    desc = Source mapping
    # TODO: Maybe extend the template system to save some work here.
    impl.set = if (func == newFunc)\
    return;\
if (newFunc != 0)\
    addLocalRef(newFunc);\
if (func != 0)\
    removeLocalRef(func);\
func = newFunc;\
if (func != 0)\
    findExtremePoints();
}
property.protected[] = {
    style = vector
    name = args
    desc = Extreme point arguments
    element = {
        type = Ionflux::Mapping::MappingValue
        name = Arg
    }
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy = *this = other;
constructor.default = {
    initializer[] = {
        name = func
        value = 0
    }
    impl = args.push_back(0.);\
args.push_back(1.);
}
constructor.public[] = {
    initializer[] = {
        name = func
        value = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Source function
    }
    param[] = {
        type = const Ionflux::Mapping::MappingValueVector*
        name = initArgs
        desc = Extreme point arguments
        default = 0
    }
    impl = if (initArgs != 0)\
    args = *initArgs;\
else\
\{\
    args.push_back(0.);\
    args.push_back(1.);\
\}\
setFunc(initFunc);
}

# Member variables.
variable.protected[] = {
    type = Ionflux::Mapping::MappingValue
    name = vMin
    desc = Minimum value
}
variable.protected[] = {
    type = Ionflux::Mapping::MappingValue
    name = vMax
    desc = Maximum value
}

# Protected member functions.

# Public member functions.
function.copy.impl = args = other.args;\
setFunc(other.func);
function.public[] = {
	spec = virtual
	type = void
	name = addArgs
	shortDesc = Add arguments
	longDesc = Add arguments for finding extreme values.
	param[] = {
		type = const Ionflux::Mapping::MappingValueVector&
		name = newArgs
		desc = Arguments
	}
    impl = for (MappingValueVector::const_iterator i = newArgs.begin(); \
    i != newArgs.end(); i++)\
    addArg(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = findExtremePoints
	shortDesc = Find extreme points of the source function
	longDesc = Find the extreme points of the source function by checking the arguments supplied to the mapping.
	impl = if (func == 0)\
\{\
    vMin = 0.;\
    vMax = 1.;\
    return;\
\}\
bool vMinDefined = false;\
bool vMaxDefined = false;\
Ionflux::Mapping::MappingValue nvMin = 0.;\
Ionflux::Mapping::MappingValue nvMax = 0.;\
for (unsigned int i = 0; i < args.size(); i++)\
\{\
    Ionflux::Mapping::MappingValue v = (*func)(args[i]);\
    if (!vMinDefined \
        || (v < nvMin))\
    \{\
        nvMin = v;\
        vMinDefined = true;\
    \}\
    if (!vMaxDefined \
        || (v > nvMax))\
    \{\
        nvMax = v;\
        vMaxDefined = true;\
    \}\
\}\
vMin = nvMin;\
vMax = nvMax;\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "args.size = " << args.size() << ", vMin = " << vMin \
    << ", vMax = " << vMax;\
log(IFLogMessage(message.str(), VL_DEBUG, this, "findExtremePoints"));\
// <---- DEBUG ----- */
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (func != 0)\
    status << (*func);\
else\
    status << "<none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::MappingValue
	name = call
    const = true
	shortDesc = Call the mapping
	longDesc = Calls the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    return = {
        value = ((*func)(value) - vMin) / (vMax - vMin)
        desc = Mapped value
    }
}

# Pure virtual member functions.

# operations

