# ==========================================================================
# IFMapping - Ionflux Mapping Library
# Copyright © 2008-2024 Jörn Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix.conf              Class configuration.
# ==========================================================================
# 
# This file is part of IFMapping - Ionflux Mapping Library.
# 
# IFMapping - Ionflux Mapping Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 3 of the License, or (at your option) any later version.
# 
# IFMapping - Ionflux Mapping Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<cmath>'
        '"ifmapping/MappingError.hpp"'
    }
}

## forward declarations
#forward = {
#    'struct ColorPair'
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Matrix
	shortDesc = Matrix
	title = Matrix
	longDesc = A matrix of float numbers.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create = {
        allocationError = MappingError("Could not allocate object.")
        extendedCreate = true
    }
}

# Member variables.
variable.protected[] = {
	type = double*
	name = values
	desc = Values
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numRows
	desc = Number of rows
	readOnly = true
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numCols
	desc = Number of columns
	readOnly = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = values
        value = 0
    }
    initializer[] = {
        name = numRows
        value = 0
    }
    initializer[] = {
        name = numCols
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = values
        value = 0
    }
    initializer[] = {
        name = numRows
        value = initNumRows
    }
    initializer[] = {
        name = numCols
        value = initNumCols
    }
	param[] = {
		type = unsigned int
		name = initNumRows
		desc = Number of rows
	}
	param[] = {
		type = unsigned int
		name = initNumCols
		desc = Number of columns
		default = 0
	}
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector* const
		name = initValues
		desc = Initial values
		default = nullptr
	}
    impl = <<<
init(initNumRows, initNumCols);
if (initValues != nullptr)
	setValues(*initValues);
>>>
}
destructor.impl = <<<
if (values != 0)
    delete values;
values = 0;
>>>

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = allocate
	shortDesc = Allocate value buffer
	longDesc = Allocate the value buffer.
	param[] = {
	    type = unsigned int
	    name = newNumRows
	    desc = Number of rows
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = newNumCols
	    desc = Number of columns
	    default = 0
	}
    impl = <<<
// Default to the current number of rows/cols.
if(newNumRows == 0)
    newNumRows = numRows;
if(newNumCols == 0)
    newNumCols = numCols;
// Default to square matrix.
if(newNumCols == 0)
    newNumCols = newNumRows;
unsigned int newSize = newNumRows * newNumCols;
unsigned int size = numRows * numCols;
numRows = newNumRows;
numCols = newNumCols;
if ((values != 0) 
    && (newSize == size))
    // Buffer can be reused.
    return;
if (values != 0)
    delete values;
values = 0;
size = newSize;
if (size == 0)
    // Empty matrix.
    return;
values = new double[size];
if (values == 0)
    throw MappingError("Could not allocate value buffer.");
>>>
}

# Public member functions.
function.copy.impl = <<<
if (values == other.values)
	return *this;
allocate(other.numRows, other.numCols);
for (unsigned int i = 0; i < numRows; i++)
	for (unsigned int j = 0; j < numCols; j++)
		values[i * numCols + j] = other.values[i * numCols + j];
>>>
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the matrix.
	param[] = {
	    type = unsigned int
	    name = newNumRows
	    desc = Number of rows
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = newNumCols
	    desc = Number of columns
	    default = 0
	}
    impl = <<<
allocate(newNumRows, newNumCols);
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
        values[i * numCols + j] = 0.;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setValue
	shortDesc = Set value
	longDesc = Set the value at the specified position.
	param[] = {
		type = unsigned int
		name = row
		desc = Row
	}
	param[] = {
		type = unsigned int
		name = col
		desc = Column
	}
	param[] = {
		type = double
		name = v
		desc = Value
	}
    impl = <<<
if ((row >= numRows) 
    || (col >= numCols))
{
    std::ostringstream status;
    status << "[Matrix::setValue] "
        "Index out of bounds: (" << row << ", " << col << ") "
        "(size = (" << numRows << ", " << numCols << "))";
    throw MappingError(status.str());
}
values[row * numCols + col] = v;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setValues
	shortDesc = Set values from vector
	longDesc = Set values from a vector.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector
		name = newValues
		desc = Values
	}
    impl = <<<
unsigned int numValues = newValues.size();
unsigned int i = 0;
unsigned int k = 0;
while ((k < numValues) && (i < numRows))
{
	unsigned int j = 0;
	while ((k < numValues) && (j < numCols))
	{
		values[i * numCols + j] = newValues[k];
		k++;
		j++;
	}
	i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getValues
	shortDesc = Get values
	longDesc = <<<
Get values.

The values will be stored in the \c target vector in row-major order.
>>>
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = <<<
for (unsigned int i = 0; i < numRows; i++)
	for (unsigned int j = 0; j < numCols; j++)
		target.push_back(values[i * numCols + j]);
>>>
}function.public[] = {
	spec = virtual
	type = double
	name = getValue
	const = true
	shortDesc = Get value
	longDesc = Get the value at the specified position.
	param[] = {
		type = unsigned int
		name = row
		desc = Row
	}
	param[] = {
		type = unsigned int
		name = col
		desc = Column
	}
    impl = <<<
if ((row >= numRows) 
    || (col >= numCols))
    throw MappingError("Index out of bounds.");
>>>
    return = {
        desc = Value at the specified position.
        value = values[row * numCols + col]
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = getRow
	const = true
	shortDesc = Get row
	longDesc = <<<
Get the specified row of the matrix.

The result will be stored in \c target.
>>>
	param[] = {
		type = unsigned int
		name = row
		desc = Row index
	}
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = <<<
if (row >= numRows) 
    throw MappingError("Row index out of bounds.");
for (unsigned int i = 0; i < numCols; i++)
	target.push_back(values[row * numCols + i]);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getCol
	const = true
	shortDesc = Get column
	longDesc = <<<
Get the specified column of the matrix.

The result will be stored in \c target.
>>>
	param[] = {
		type = unsigned int
		name = col
		desc = Column index
	}
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = <<<
if (col >= numCols) 
    throw MappingError("Column index out of bounds.");
for (unsigned int i = 0; i < numRows; i++)
	target.push_back(values[i * numCols + col]);
>>>
}
function.public[] = {
	spec = virtual
	type = double
	name = v
	const= true
	shortDesc = Get value
	longDesc = Get the value at the specified position.
	param[] = {
		type = unsigned int
		name = row
		desc = Row
	}
	param[] = {
		type = unsigned int
		name = col
		desc = Column
	}
    impl = 
    return = {
        desc = Value at the specified position.
        value = getValue(row, col)
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the values in the matrix.
    impl = <<<
double sum = 0.;
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
        sum += values[i * numCols + j];
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
    {
        double v0 = values[i * numCols + j] / sum;
        values[i * numCols + j] = v0;
    }
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = rescale
	shortDesc = Rescale
	longDesc = Rescale the values in the matrix to the range [0...1].
    impl = <<<
double vMin = 0.;
double vMax = 0.;
bool first = false;
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
    {
        double v = values[i * numCols + j];
        if (first)
        {
            vMin = v;
            vMax = v;
            first = false;
        } else
        {
            if (v < vMin)
                vMin = v;
            if (v > vMax)
                vMax = v;
        }
    }
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
    {
        double v0 = (values[i * numCols + j] - vMin) / (vMax - vMin);
        values[i * numCols + j] = v0;
    }
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setGaussian
	shortDesc = Set matrix to gaussian distribution
	longDesc = Set the matrix to a gaussian distribution with the specified parameters. If the standard deviation is set to 0, a suitable default value will be chosen. The values in the matrix will be normalized.
	param[] = {
	    type = double
	    name = stdDev
	    desc = Standard deviation
	    default = 0.
	}
    impl = <<<
double x0 = 0.5 * numCols;
double y0 = 0.5 * numRows;
if (stdDev == 0.)
    stdDev = fmax(0.3 * x0, 0.3 * y0);
double var = stdDev * stdDev;
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
    {
        double x = (static_cast<double>(j) - x0) + 0.5;
        double y = (static_cast<double>(i) - y0) + 0.5;
        double f = ::exp(-(x * x + y * y) / (2. * var));
        values[i * numCols + j] = f;
    }
normalize();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setInversePower
	shortDesc = Set matrix to inverse power distribution
	longDesc = Set the matrix to an inverse power distribution with the specified parameters. The values in the matrix will be normalized.
	param[] = {
	    type = double
	    name = exponent
	    desc = Exponent
	    default = 2.
	}
	param[] = {
	    type = double
	    name = falloff
	    desc = Falloff at radius
	    default = 0.0001
	}
    impl = <<<
double x0 = 0.5 * numCols;
double y0 = 0.5 * numRows;
double c = (::pow(1. / falloff, 1. / exponent) - 1.) / fmax(x0, y0);
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
    {
        double x = (static_cast<double>(j) - x0) + 0.5;
        double y = (static_cast<double>(i) - y0) + 0.5;
        double f = 1. / ::pow(c * ::sqrt(x * x + y * y) + 1., exponent);
        values[i * numCols + j] = f;
    }
normalize();
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::Mapping::Matrix&
		name = other
		desc = Matrix
	}
	impl = <<<
if ((other.numRows != numRows) 
    || (other.numCols != numCols))
    return false;
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int j = 0; j < numCols; j++)
        if (values[i * numCols + j] != other.values[i * numCols + j])
            return false;
>>>
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::Mapping::Matrix&
		name = other
		desc = Matrix
	}
	return = {
		value = !(*this == other);
		desc = Result of the comparison
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = <<<
std::ostringstream state;
state << getClassName() << "[";
for (unsigned int i = 0; i < numRows; i++)
{
    if (i > 0)
        state << ", ";
    state << "[";
    for (unsigned int j = 0; j < numCols; j++)
    {
        if (j > 0)
            state << ", ";
        state << values[i * numCols + j];
    }
    state << "]";
}
state << "]";
>>>
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

