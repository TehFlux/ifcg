# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ImageLoader.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/IFCache.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ImageLoader
	shortDesc = Image loader
	title = Image loader
	longDesc = This class can be used to load images from the file system, cache them in memory and provide them to users using the ImageSource interface.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
		other[] = {
			name = Ionflux::GeoUtils::ImageSource
            include = geoutils/ImageSource.hpp
            hasClassInfo = true
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'logmessage'
        'classinfo'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    name = idMap
    style = map
    desc = Image ID to file name map
	key = {
		type = std::string
		# The access type will be used in function declarations instead 
		# of the actual key type.
		accessType = const std::string&
	}
    element = {
        type = Ionflux::GeoUtils::ImageID
        name = ImageID
        defaultValue = ""
    }
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = mappedPrefix
	desc = File name prefix for mapped IDs
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = unmappedPrefix
	desc = File name prefix for unmapped IDs
}
property.protected[] = {
	type = Ionflux::ObjectBase::IFCache*
	setFromType = Ionflux::ObjectBase::IFCache*
	name = cache
	desc = Cache
	managed = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = cache
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = mappedPrefix
        value = initMappedPrefix
    }
    initializer[] = {
        name = unmappedPrefix
        value = initUnmappedPrefix
    }
    initializer[] = {
        name = cache
        value = 0
    }
    param[] = {
        type = const std::string&
        name = initMappedPrefix
        desc = File name prefix for mapped IDs
    }
    param[] = {
        type = const std::string&
        name = initUnmappedPrefix
        desc = File name prefix for unmapped IDs
        default = ""
    }
    param[] = {
        type = Ionflux::ObjectBase::IFCache*
        name = initCache
        desc = Cache
        default = 0
    }
    impl = setCache(initCache);
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Image*
	name = getFromCache
	shortDesc = Get image from cache
	longDesc = Get an image from the cache.
	param[] = {
	    type = const Ionflux::GeoUtils::ImageID&
	    name = imageID
	    desc = Image ID
	}
	impl = if (cache == 0)\
    return 0;\
std::ostringstream status;\
IFObject* it0 = cache->getItem(imageID);\
if (it0 == 0)\
\{\
    // <---- DEBUG ----- //\
    status << "Cache miss (id = '" << imageID << "')";\
    log(IFLogMessage(status.str(), VL_DEBUG, this, "getFromCache"));\
    // ----- DEBUG ----> */\
    return 0;\
\}\
// <---- DEBUG ----- //\
status << "Cache hit (id = '" << imageID << "')";\
log(IFLogMessage(status.str(), VL_DEBUG, this, "getFromCache"));\
// ----- DEBUG ----> */\
Image* img0 = Image::upcast(it0);\
if (img0 == 0)\
\{\
    status.str("");\
    status << "[ImageLoader::getFromCache] "\
        "Cached item is not an image (id = '" << imageID << "')!";\
    throw GeoUtilsError(status.str());\
\}
	return = {
	    value = img0
	    desc = Image, or 0 if no image with the ID exists within the cache
	}
}
function.protected[] = {
	spec = virtual
	type = std::string
	name = getFileName
	shortDesc = Get file name
	longDesc = Get the file name corresponding to an image ID.
	param[] = {
	    type = const Ionflux::GeoUtils::ImageID&
	    name = imageID
	    desc = Image ID
	}
	impl = std::ostringstream result;\
std::map<std::string, Ionflux::GeoUtils::ImageID>::const_iterator i = idMap.find(imageID);\
if (i != idMap.end())\
    // Mapped ID.\
    result << mappedPrefix << (*i).second;\
else\
    // Unmapped ID.\
    result << unmappedPrefix << imageID;
	return = {
	    value = result.str()
	    desc = File name corresponsing to the specified image ID
	}
}
function.protected[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Image*
	name = loadFromFile
	shortDesc = Load image
	longDesc = Load an image from the file system.
	param[] = {
	    type = const Ionflux::GeoUtils::ImageID&
	    name = imageID
	    desc = Image ID
	}
	impl = std::ostringstream status;\
std::string fileName = getFileName(imageID);\
if (fileName.size() == 0)\
\{\
    status << "[ImageLoader::loadFromFile] "\
        "Could not determine file name for image (id = '" \
        << imageID << "')!";\
    throw GeoUtilsError(status.str());\
\}\
// <---- DEBUG ----- //\
status.str("");\
status << "Loading image (id = '" << imageID << "', fileName = '" \
    << fileName << "')";\
log(IFLogMessage(status.str(), VL_DEBUG, this, "loadFromFile"));\
// ----- DEBUG ----> */\
Image* img0 = Image::create();\
img0->loadFromFile(fileName);
	return = {
	    value = img0
	    desc = Image
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = setPrefix
	shortDesc = Set prefix
	longDesc = Set the file name prefix for both mapped and unmapped image IDs.
	param[] = {
	    type = const std::string&
	    name = prefix
	    desc = Prefix
	}
	impl = mappedPrefix = prefix;\
unmappedPrefix = prefix;
}

# Public member functions.
function.copy.impl = if (this == &other)\
    return *this;\
ImageSource::operator=(other);\
mappedPrefix = other.mappedPrefix;\
unmappedPrefix = other.unmappedPrefix;\
idMap = other.idMap;\
setCache(other.cache);
function.public[] = {
	spec = virtual
	type = void
	name = addImage
	shortDesc = Add image
	longDesc = Add an image that has already been loaded using some other means to the loader. If \c fileName is specified, an ID mapping is added for the image. If a cache is set for the loader, the image is added to the cache.
	param[] = {
	    type = const Ionflux::GeoUtils::ImageID&
	    name = imageID
	    desc = Image ID
	}
	param[] = {
	    type = Ionflux::GeoUtils::Image*
	    name = image
	    desc = Image
	}
	param[] = {
	    type = const std::string&
	    name = fileName
	    desc = File name
	    default = ""
	}
	impl = if (fileName.size() > 0)\
    addImageID(imageID, fileName);\
if (cache != 0)\
    cache->addItem(imageID, image);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Image*
	name = getImage
	shortDesc = Get image
	longDesc = Get an image by ID.
	param[] = {
	    type = const Ionflux::GeoUtils::ImageID&
	    name = imageID
	    desc = Image ID
	}
	impl = Image* img0 = getFromCache(imageID);\
if (img0 != 0)\
    // Image is in the cache.\
    return img0;\
img0 = loadFromFile(imageID);\
if ((img0 != 0) \
    && (cache != 0))\
    // Add image to cache.\
    cache->addItem(imageID, img0);
	return = {
	    value = img0
	    desc = Image, or 0 if no image with the ID exists
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = initCache
	shortDesc = Initialize cache
	longDesc = Initialize a cache for the loader.
	param[] = {
	    type = Ionflux::ObjectBase::UInt64
	    name = maxSize
	    desc = Maximum cache size
	    default = 0
	}
	impl = IFCache* c0 = IFCache::create();\
c0->setMaxSize(maxSize);\
setCache(c0);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

