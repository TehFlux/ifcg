# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Array.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Array
	shortDesc = Transform node: Array
	title = Transform node: Array
	longDesc = Arrange elements from the input group in rows and columns of the specified dimensions within the XY plane. The array is centered around the origin, translated by the offset vector.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = offset
	desc = Offset
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numRows
	desc = Number of rows
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numColumns
	desc = Number of columns
}
property.protected[] = {
	type = double
	setFromType = double
	name = cellWidth
	desc = cell width
}
property.protected[] = {
	type = double
	setFromType = double
	name = cellHeight
	desc = cell height
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_ROWS
    desc = Default number of rows
    value = 10
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_COLUMNS
    desc = Default number of columns
    value = 10
}
constant.public[] = {
    type = double
    name = DEFAULT_CELL_WIDTH
    desc = Default cell width
    value = 100.
}
constant.public[] = {
    type = double
    name = DEFAULT_CELL_HEIGHT
    desc = Default cell height
    value = 100.
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = offset
        value = GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = numRows
        value = DEFAULT_NUM_ROWS
    }
    initializer[] = {
        name = numColumns
        value = DEFAULT_NUM_COLUMNS
    }
    initializer[] = {
        name = cellWidth
        value = DEFAULT_CELL_WIDTH
    }
    initializer[] = {
        name = cellHeight
        value = DEFAULT_CELL_HEIGHT
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = numRows
        value = initNumRows
    }
    initializer[] = {
        name = numColumns
        value = initNumColumns
    }
    initializer[] = {
        name = cellWidth
        value = initCellWidth
    }
    initializer[] = {
        name = cellHeight
        value = initCellWidth
    }
    param[] = {
        type = unsigned int
        name = initNumRows
        desc = Number of rows
    }
    param[] = {
        type = unsigned int
        name = initNumColumns
        desc = Number of columns
        default = DEFAULT_NUM_COLUMNS
    }
    param[] = {
        type = double
        name = initCellWidth
        desc = Cell width
        default = DEFAULT_CELL_WIDTH
    }
    param[] = {
        type = double
        name = initCellHeight
        desc = Cell height
        default = DEFAULT_CELL_HEIGHT
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffset
        desc = Offset
        default = GeoUtils::Vector3::ZERO
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
offset = other.offset;\
numRows = other.numRows;\
numColumns = other.numColumns;\
cellWidth = other.cellWidth;\
cellHeight = other.cellHeight;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") \
    << "; " << offset << ", " << numRows << " x " << numColumns \
    << ", " << cellWidth << " x " << cellHeight << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
/* Since we are going to manipulate the individual elements, \
   any existing group transformations must be applied first. */\
g0->applyTransform();\
double width = numColumns * cellWidth;\
double height = numRows * cellHeight;\
// Translation to center the array around the origin.\
Vector3 v0(-0.5 * width, -0.5 * height, 0.);\
unsigned int numSourceItems = g0->getNumItems();\
for (unsigned int i = 0; i < numSourceItems; i++)\
\{\
    TransformableObject* o0 = g0->getItem(i);\
    unsigned int row = (i / numColumns) % numRows;\
    unsigned int col = i % numColumns;\
    // Translation for the cell.\
    Vector3 v1((col + 0.5) * cellWidth, \
        (numRows - row - 0.5) * cellHeight, 0);\
    // Translate the object.\
    o0->translate(v0 + v1 + offset);\
\}\
addOutput(g0);
}

# Pure virtual member functions.

# operations

# Global functions.

