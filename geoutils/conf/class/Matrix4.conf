# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix4.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Matrix3.hpp"'
        '"geoutils/Vector4.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Matrix4
	shortDesc = Matrix (4x4)
	title = Matrix (4x4)
	longDesc = A 4x4 matrix.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::GeoUtils::Matrix
            include = geoutils/Matrix.hpp
            xml = {
                enabled = true
                getFunc = getMatrix
                include = geoutils/Matrix
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = m4
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = r0
	desc = Row vector (0)
    proxy = true
    impl = {
        get = return Vector4(elements[0], elements[1], elements[2], elements[3]);
        set = <<<
elements[0] = newR0.getX0();
elements[1] = newR0.getX1();
elements[2] = newR0.getX2();
elements[3] = newR0.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = r1
	desc = Row vector (1)
    proxy = true
    impl = {
        get = return Vector4(elements[4], elements[5], elements[6], elements[7]);
        set = <<<
elements[4] = newR1.getX0();
elements[5] = newR1.getX1();
elements[6] = newR1.getX2();
elements[7] = newR1.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = r2
	desc = Row vector (2)
    proxy = true
    impl = {
        get = return Vector4(elements[8], elements[9], elements[10], elements[11]);
        set = <<<
elements[8] = newR2.getX0();
elements[9] = newR2.getX1();
elements[10] = newR2.getX2();
elements[11] = newR2.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = r3
	desc = Row vector (3)
    proxy = true
    impl = {
        get = return Vector4(elements[12], elements[13], elements[14], elements[15]);
        set = <<<
elements[12] = newR3.getX0();
elements[13] = newR3.getX1();
elements[14] = newR3.getX2();
elements[15] = newR3.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = c0
	desc = Column vector (0)
    proxy = true
    impl = {
        get = return Vector4(elements[0], elements[4], elements[8], elements[12]);
        set = <<<
elements[0] = newC0.getX0();
elements[4] = newC0.getX1();
elements[8] = newC0.getX2();
elements[12] = newC0.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = c1
	desc = Column vector (1)
    proxy = true
    impl = {
        get = return Vector4(elements[1], elements[5], elements[9], elements[13]);
        set = <<<
elements[1] = newC1.getX0();
elements[5] = newC1.getX1();
elements[9] = newC1.getX2();
elements[13] = newC1.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = c2
	desc = Column vector (2)
    proxy = true
    impl = {
        get = return Vector4(elements[2], elements[6], elements[10], elements[14]);
        set = <<<
elements[2] = newC2.getX0();
elements[6] = newC2.getX1();
elements[10] = newC2.getX2();
elements[14] = newC2.getX3();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector4
	setFromType = const Ionflux::GeoUtils::Vector4&
	name = c3
	desc = Column vector (3)
    proxy = true
    impl = {
        get = return Vector4(elements[3], elements[7], elements[11], elements[15]);
        set = <<<
elements[3] = newC3.getX0();
elements[7] = newC3.getX1();
elements[11] = newC3.getX2();
elements[15] = newC3.getX3();
>>>
    }
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 16
}
constant.public[] = {
	type = unsigned int
	name = NUM_ROWS
	desc = Number of rows
	value = 4
}
constant.public[] = {
	type = unsigned int
	name = NUM_COLS
	desc = Number of columns
	value = 4
}
constant.public[] = {
    desc = Zero matrix
    type = Ionflux::GeoUtils::Matrix4
    name = ZERO
    value = Ionflux::GeoUtils::Matrix4(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.)
}
constant.public[] = {
    desc = Unit matrix
    type = Ionflux::GeoUtils::Matrix4
    name = UNIT
    value = Ionflux::GeoUtils::Matrix4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.)
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = zero();
}
constructor.public[] = {
    param[] = {
        name = initX00
        type = double
        desc = Element x00
    }
    param[] = {
        name = initX01
        type = double
        desc = Element x01
    }
    param[] = {
        name = initX02
        type = double
        desc = Element x02
    }
    param[] = {
        name = initX03
        type = double
        desc = Element x03
    }
    param[] = {
        name = initX10
        type = double
        desc = Element x10
    }
    param[] = {
        name = initX11
        type = double
        desc = Element x11
    }
    param[] = {
        name = initX12
        type = double
        desc = Element x12
    }
    param[] = {
        name = initX13
        type = double
        desc = Element x13
    }
    param[] = {
        name = initX20
        type = double
        desc = Element x20
    }
    param[] = {
        name = initX21
        type = double
        desc = Element x21
    }
    param[] = {
        name = initX22
        type = double
        desc = Element x22
    }
    param[] = {
        name = initX23
        type = double
        desc = Element x23
    }
    param[] = {
        name = initX30
        type = double
        desc = Element x30
    }
    param[] = {
        name = initX31
        type = double
        desc = Element x31
    }
    param[] = {
        name = initX32
        type = double
        desc = Element x32
    }
    param[] = {
        name = initX33
        type = double
        desc = Element x33
    }
    impl = <<<
initElements();
elements[0] = initX00;
elements[1] = initX01;
elements[2] = initX02;
elements[3] = initX03;
elements[4] = initX10;
elements[5] = initX11;
elements[6] = initX12;
elements[7] = initX13;
elements[8] = initX20;
elements[9] = initX21;
elements[10] = initX22;
elements[11] = initX23;
elements[12] = initX30;
elements[13] = initX31;
elements[14] = initX32;
elements[15] = initX33;
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Element vector
    }
    impl = <<<
initElements();
Vector::setElements(initElements0);
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::GeoUtils::Matrix3&
        desc = Element matrix
    }
    impl = <<<
initElements();
setM3x3(initElements0);
>>>
}

# Destructor.
destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a 3x3 matrix. The remaining elements will be left alone.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = newElements
		desc = Element vector
	}
    impl = <<<
Ionflux::ObjectBase::DoubleVector e0;
newElements.getElements(e0);
Vector::setElements(e0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setM3x3
	shortDesc = Set elements
	longDesc = Set elements from a 3x3 matrix. The remaining elements will be set to the optional parameters.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = newElements
		desc = Matrix
	}
	param[] = {
		type = double
		name = newX33
		desc = Element x33
        default = 1.
	}
	param[] = {
		type = double
		name = newX03
		desc = Element x03
        default = 0.
	}
	param[] = {
		type = double
		name = newX13
		desc = Element x13
        default = 0.
	}
	param[] = {
		type = double
		name = newX23
		desc = Element x23
        default = 0.
	}
	param[] = {
		type = double
		name = newX30
		desc = Element x30
        default = 0.
	}
	param[] = {
		type = double
		name = newX31
		desc = Element x31
        default = 0.
	}
	param[] = {
		type = double
		name = newX32
		desc = Element x32
        default = 0.
	}
    impl = <<<
setElements(newElements);
elements[3] = newX03;
elements[7] = newX13;
elements[11] = newX23;
elements[12] = newX30;
elements[13] = newX31;
elements[14] = newX32;
elements[15] = newX33;
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = transpose
	const = true
	shortDesc = Transpose
	longDesc = Transpose the matrix.
	return = {
        value = Matrix4(elements[0], elements[4], elements[8], elements[12], \
    elements[1], elements[5], elements[9], elements[13], \
    elements[2], elements[6], elements[10], elements[14], \
    elements[3], elements[7], elements[11], elements[15])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = permuteColumns
	const = true
	shortDesc = Permute columns
	longDesc = Permute the columns using the specified permutation of indices.
	param[] = {
		type = int
		name = px
		desc = Permutation (x)
	}
	param[] = {
		type = int
		name = py
		desc = Permutation (y)
	}
	param[] = {
		type = int
		name = pz
		desc = Permutation (z)
	}
	param[] = {
		type = int
		name = pw
		desc = Permutation (w)
	}
    impl = 
	return = {
        value = Matrix4(elements[px], elements[py], elements[pz], elements[pw],\
    elements[4 + px], elements[4 + py], elements[4 + pz], elements[4 + pw], \
    elements[8 + px], elements[8 + py], elements[8 + pz], elements[8 + pw], \
    elements[12 + px], elements[12 + py], elements[12 + pz], elements[12 + pw])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = permuteColumns
	const = true
	shortDesc = Permute columns
	longDesc = Permute the columns using the specified permutation of indices.
	param[] = {
		type = const Ionflux::ObjectBase::IntVector&
		name = p
		desc = Permutation
	}
    impl = if (p.size() < 4)\
    throw GeoUtilsError("Not enough elements in permutation vector.");
	return = {
        value = permuteColumns(p[0], p[1], p[2], p[4])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = permuteRows
	const = true
	shortDesc = Permute rows
	longDesc = Permute the rows using the specified permutation of indices.
	param[] = {
		type = int
		name = px
		desc = Permutation (x)
	}
	param[] = {
		type = int
		name = py
		desc = Permutation (y)
	}
	param[] = {
		type = int
		name = pz
		desc = Permutation (z)
	}
	param[] = {
		type = int
		name = pw
		desc = Permutation (w)
	}
    impl = 
	return = {
        value = Matrix4(elements[4 * px], elements[4 * px + 1], elements[4 * px + 2], elements[px + 3],\
    elements[4 * py], elements[4 * py + 1], elements[4 * py + 2], elements[4 * py + 3], \
    elements[4 * pz], elements[4 * pz + 1], elements[4 * pz + 2], elements[4 * pz + 3], \
    elements[4 * pw], elements[4 * pw + 1], elements[4 * pw + 2], elements[4 * pw + 3])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = permuteRows
	const = true
	shortDesc = Permute rows
	longDesc = Permute the rows using the specified permutation of indices.
	param[] = {
		type = const Ionflux::ObjectBase::IntVector&
		name = p
		desc = Permutation
	}
    impl = if (p.size() < 4)\
    throw GeoUtilsError("Not enough elements in permutation vector.");
	return = {
        value = permuteRows(p[0], p[1], p[2], p[4])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector4
	name = solve
	const = true
	shortDesc = Solve matrix equation
	longDesc = Solve the matrix equation Mx = v.
	param[] = {
		type = const Ionflux::GeoUtils::Vector4&
		name = v
		desc = Vector
	}
    impl = <<<
double x11 = elements[0];
double x12 = elements[1];
double x13 = elements[2];
double x14 = elements[3];
double x21 = elements[4];
double x22 = elements[5];
double x23 = elements[6];
double x24 = elements[7];
double x31 = elements[8];
double x32 = elements[9];
double x33 = elements[10];
double x34 = elements[11];
double x41 = elements[12];
double x42 = elements[13];
double x43 = elements[14];
double x44 = elements[15];
double a = v.getElement(0);
double b = v.getElement(1);
double c = v.getElement(2);
double d = v.getElement(3);
Vector4 result;
if (x11 != 0.0)
{
    double y11 = (x22 * x11 - x12 * x21) / x11;
    double y12 = (x23 * x11 - x13 * x21) / x11;
    double y13 = (x24 * x11 - x14 * x21) / x11;
    double y21 = (x32 * x11 - x12 * x31) / x11;
    double y22 = (x33 * x11 - x13 * x31) / x11;
    double y23 = (x34 * x11 - x14 * x31) / x11;
    double y31 = (x42 * x11 - x12 * x41) / x11;
    double y32 = (x43 * x11 - x13 * x41) / x11;
    double y33 = (x44 * x11 - x14 * x41) / x11;
    double e = (b * x11 - a * x21) / x11;
    double f = (c * x11 - a * x31) / x11;
    double g = (d * x11 - a * x41) / x11;
    Vector3 r0 = Matrix3(y11, y12, y13, y21, y22, y23, y31, y32, 
        y33).solve(Vector3(e, f, g));
    double x = (a - r0[0] * x12 - r0[1] * x13 - r0[2] * x14) / x11;
    result.setElement(0, x);
    result.setElement(1, r0.getElement(0));
    result.setElement(2, r0.getElement(1));
    result.setElement(3, r0.getElement(2));
} else
if (x12 != 0.0)
    result = permuteColumns(1, 0, 2, 3).solve(v).permute(1, 0, 2, 3);
else
if (x13 != 0.0)
    result = permuteColumns(2, 1, 0, 3).solve(v).permute(2, 1, 0, 3);
else
if (x14 != 0.0)
    result = permuteColumns(3, 1, 2, 0).solve(v).permute(3, 1, 2, 0);
else
{
    std::ostringstream status;
    status << "Cannot solve 4x4 matrix equation (M = ["
        << getValueString() << "], v = (" << v.getValueString() 
        << ")).";
    throw GeoUtilsError(getErrorString(status.str(), "solve"));
}
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = invert
	const = true
	shortDesc = Invert matrix
	longDesc = Invert the matrix.
    impl = <<<
Vector4 x = solve(Vector4::E_X);
Vector4 y = solve(Vector4::E_Y);
Vector4 z = solve(Vector4::E_Z);
Vector4 w = solve(Vector4::E_W);
Matrix4 result;
result.setC0(x);
result.setC1(y);
result.setC2(z);
result.setC3(w);
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4&
	name = multiplyLeft
	shortDesc = Multiply matrices (left)
	longDesc = Multiply the specified matrix to the left of the matrix. The result is stored in the matrix itself.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = other
		desc = Matrix
	}
    impl = *this = other * (*this);
	return = {
        value = *this
	    desc = The matrix itself
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4&
	name = multiplyRight
	shortDesc = Multiply matrices (right)
	longDesc = Multiply the specified matrix to the right of the matrix. The result is stored in the matrix itself.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = other
		desc = Matrix
	}
    impl = *this = (*this) * other;
	return = {
        value = *this
	    desc = The matrix itself
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = operator*
	const = true
	shortDesc = Multiply matrices
	longDesc = Multiply matrices.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = other
		desc = Matrix
	}
    impl = <<<
Matrix4 result;
for (unsigned int i = 0; i < 4; i++)
{
    for (unsigned int j = 0; j < 4; j++)
    {
        double s = 0.0;
        for (unsigned int k = 0; k < 4; k++)
            s += elements[4 * i + k] * other.elements[4 * k + j];
        result.elements[4 * i + j] = s;
    }
}
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector4
	name = operator*
	const = true
	shortDesc = Transform vector
	longDesc = Transform a vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector4&
		name = v
		desc = Vector
	}
    impl = <<<
double result[4];
for (unsigned int i = 0; i < 4; i++)
{
    double s = 0.0;
    for (unsigned int k = 0; k < 4; k++)
        s += elements[4 * i + k] * v.getElement(k);
    result[i] = s;
}
>>>
	return = {
        value = Vector4(result[0], result[1], result[2], result[3])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = operator*
	const = true
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix4 result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4
	name = operator/
	const = true
	shortDesc = Divide matrix by scalar
	longDesc = Divide matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix4 result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = getM3x3
	const = true
	shortDesc = Get 3x3 matrix
	longDesc = Get the upper left 3x3 matrix.
	impl = 
    return = {
        value = Matrix3(elements[0], elements[1], elements[2], elements[4], elements[5], elements[6], elements[8], elements[9], elements[10])
        desc = 3x3 matrix
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumRows
	const = true
	shortDesc = Get number of rows
	longDesc = Get the number of rows in the matrix
	impl = 
    return = {
        value = NUM_ROWS
        desc = Number of rows
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumCols
	const = true
	shortDesc = Get number of columns
	longDesc = Get the number of columns in the matrix
	impl = 
    return = {
        value = NUM_COLS
        desc = Number of columns
    }
}

# Static member functions
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = scale
	shortDesc = Create scale matrix
	longDesc = Create a scale matrix.
	param[] = {
		type = double
		name = sx
		desc = Scale factor (x)
        default = 1.
	}
	param[] = {
		type = double
		name = sy
		desc = Scale factor (y)
        default = 1.
	}
	param[] = {
		type = double
		name = sz
		desc = Scale factor (z)
        default = 1.
	}
	param[] = {
		type = double
		name = sw
		desc = Scale factor (w)
        default = 1.
	}
	impl = 
    return = {
        value = Matrix4(sx, 0., 0., 0., 0., sy, 0., 0., 0., 0., sz, 0., 0., 0., 0., sw)
        desc = Scale matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = scale
	shortDesc = Create scale matrix
	longDesc = Create a scale matrix.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
	param[] = {
		type = double
		name = sw
		desc = Scale factor (w)
        default = 1.
	}
	impl = 
    return = {
        value = Matrix4(s.getX0(), 0., 0., 0., 0., s.getX1(), 0., 0., 0., 0., s.getX2(), 0., 0., 0., 0., sw)
        desc = Scale matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = scale
	shortDesc = Create scale matrix
	longDesc = Create a scale matrix.
	param[] = {
		type = const Ionflux::GeoUtils::Vector4&
		name = s
		desc = Vector of scale factors
	}
	impl = 
    return = {
        value = Matrix4(s.getX0(), 0., 0., 0., 0., s.getX1(), 0., 0., 0., 0., s.getX2(), 0., 0., 0., 0., s.getX3())
        desc = Scale matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = translate
	shortDesc = Create translation matrix
	longDesc = Create a translation matrix.
	param[] = {
		type = double
		name = tx
		desc = Translation distance (x)
        default = 0.
	}
	param[] = {
		type = double
		name = ty
		desc = Translation distance (y)
        default = 0.
	}
	param[] = {
		type = double
		name = tz
		desc = Translation distance (z)
        default = 0.
	}
	impl = 
    return = {
        value = Matrix4(1., 0., 0., tx, 0., 1., 0., ty, 0., 0., 1., tz, 0., 0., 0., 1.)
        desc = Translation matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = translate
	shortDesc = Create translation matrix
	longDesc = Create a translation matrix.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
	impl = 
    return = {
        value = Matrix4(1., 0., 0., t[0], 0., 1., 0., t[1], 0., 0., 1., t[2], 0., 0., 0., 1.)
        desc = Translation matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = rotate
	shortDesc = Create rotation matrix
	longDesc = Create a rotation matrix.
	param[] = {
		type = double
		name = phi
		desc = Angle
        default = 0.
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
	impl = if (axis == AXIS_X)\
    return Matrix4(1., 0., 0., 0., \
        0., ::cos(phi), -::sin(phi), 0., \
        0., ::sin(phi), ::cos(phi), 0., \
        0., 0., 0., 1.);\
else\
if (axis == AXIS_Y)\
    return Matrix4(::cos(phi), 0., ::sin(phi), 0., \
        0., 1., 0., 0., \
        -::sin(phi), 0., ::cos(phi), 0., \
        0., 0., 0., 1.);\
else\
if (axis == AXIS_Z)\
    return Matrix4(::cos(phi), -::sin(phi), 0., 0., \
        ::sin(phi), ::cos(phi), 0., 0., \
        0., 0., 1., 0., \
        0., 0., 0., 1.);\
else\
\{\
    ostringstream status;\
    status << "Invalid axis: " << axis;\
    throw GeoUtilsError(status.str());\
\}
    return = {
        value = ZERO
        desc = Rotation matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = swapAxes
	shortDesc = Create axis swap matrix
	longDesc = Create a matrix that swaps coordinate system axes.
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = x
		desc = Axis (x)
        default = Ionflux::GeoUtils::AXIS_X
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = y
		desc = Axis (y)
        default = Ionflux::GeoUtils::AXIS_Y
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = z
		desc = Axis (z)
        default = Ionflux::GeoUtils::AXIS_Z
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = w
		desc = Axis (w)
        default = Ionflux::GeoUtils::AXIS_W
	}
	impl = 
    return = {
        value = UNIT.permuteColumns(x, y, z, w)
        desc = Axis swap matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = perspective
	shortDesc = Create perspective matrix
	longDesc = Create a perspective matrix.
	param[] = {
		type = double
		name = d
		desc = Perspective factor
        default = 1.
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = depthAxis
		desc = Depth axis
        default = Ionflux::GeoUtils::AXIS_Y
	}
	impl = Matrix4 result = UNIT;\
result.setElement(3, depthAxis, 1. / d);
    return = {
        value = result
        desc = Perspective matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix4
	name = imageTransform
	shortDesc = Create image transform matrix
	longDesc = Create a matrix which transforms a section of the up/horizon-plane (the screen), centered on the depth axis, to the area of an image of the specified size. The top left corner of the image has the coordinates (0, 0). The positive X direction of the image is to the right, the positive Y direction is toward the bottom.
	param[] = {
		type = double
		name = screenWidth
		desc = Screen width
        default = 1.33
	}
	param[] = {
		type = double
		name = screenHeight
		desc = Screen height
        default = 1.
	}
	param[] = {
		type = double
		name = imageWidth
		desc = Image width
        default = 800.
	}
	param[] = {
		type = double
		name = imageHeight
		desc = Image height
        default = 600.
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = upAxis
		desc = Upward pointing axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = depthAxis
		desc = Depth axis
        default = Ionflux::GeoUtils::AXIS_Y
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = horizonAxis
		desc = Horizon axis
        default = Ionflux::GeoUtils::AXIS_X
	}
	impl = double scale[3];\
scale[depthAxis] = 1.;\
scale[horizonAxis] = imageWidth / screenWidth;\
scale[upAxis] = -imageHeight / screenHeight;\
Matrix4 imageScale = Matrix4::scale(scale[0], scale[1], scale[2]);\
double tr[3];\
tr[depthAxis] = 0.;\
tr[horizonAxis] = 0.5 * imageWidth;\
tr[upAxis] = 0.5 * imageHeight;\
Matrix4 imageTranslate = Matrix4::translate(tr[0], tr[1], tr[2]);\
Matrix4 swapAxes;\
swapAxes.setElement(0, horizonAxis, 1.);\
swapAxes.setElement(1, upAxis, 1.);\
swapAxes.setElement(2, depthAxis, 1.);\
swapAxes.setElement(3, 3., 1.);
    return = {
        value = swapAxes * imageTranslate * imageScale
        desc = Image transform matrix
    }
}

# Pure virtual member functions.

# operations

# Global functions.
function.global[] = {
	type = Ionflux::GeoUtils::Matrix4
	name = operator*
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = m
		desc = Matrix
	}
    impl = 
	return = {
        value = m * c
	    desc = Result of the calculation
    }
}

