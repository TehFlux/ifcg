# =================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# MatrixMN.conf              Class configuration.
# =================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/VectorN.hpp"'
        '"geoutils/gslutils.hpp"'
    }
}

# forward declarations
forward = {
    'class VectorN'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = MatrixMN
	shortDesc = Matrix (NxM)
	title = Matrix (NxM)
	longDesc = A NxM numeric matrix.
	group.name = ifphysim
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::GeoUtils::Matrix
            include = geoutils/Matrix.hpp
            hasClassInfo = true
            xml = {
                enabled = true
                include = geoutils/Matrix
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = mmn
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = numRows
    desc = Number of rows
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = numCols
    desc = Number of columns
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = <<<
*this = other;
>>>
constructor.default = {
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = numRows
        value = initNumRows
    }
    initializer[] = {
        name = numCols
        value = initNumCols
    }
    param[] = {
        type = unsigned int
        name = initNumRows
        desc = Number of rows
    }
    param[] = {
        type = unsigned int
        name = initNumCols
        desc = Number of columns
    }
    impl = zero();
}
constructor.public[] = {
    initializer[] = {
        name = numRows
        value = initNumRows
    }
    initializer[] = {
        name = numCols
        value = initNumCols
    }
    param[] = {
        type = unsigned int
        name = initNumCols
        desc = Number of columns
    }
    param[] = {
        type = unsigned int
        name = initNumRows
        desc = Number of columns
    }
    param[] = {
        type = double
        name = x0
        desc = element (0)
    }
    param[] = {
        type = double
        name = x1
        desc = element (1)
        default = 0.
    }
    param[] = {
        type = double
        name = x2
        desc = element (2)
        default = 0.
    }
    param[] = {
        type = double
        name = x3
        desc = element (3)
        default = 0.
    }
    param[] = {
        type = double
        name = x4
        desc = element (4)
        default = 0.
    }
    param[] = {
        type = double
        name = x5
        desc = element (5)
        default = 0.
    }
    param[] = {
        type = double
        name = x6
        desc = element (6)
        default = 0.
    }
    param[] = {
        type = double
        name = x7
        desc = element (7)
        default = 0.
    }
    param[] = {
        type = double
        name = x8
        desc = element (8)
        default = 0.
    }
    param[] = {
        type = double
        name = x9
        desc = element (9)
        default = 0.
    }
    param[] = {
        type = double
        name = x10
        desc = element (10)
        default = 0.
    }
    param[] = {
        type = double
        name = x11
        desc = element (11)
        default = 0.
    }
    param[] = {
        type = double
        name = x12
        desc = element (12)
        default = 0.
    }
    impl = <<<
zero();
setElements(x0, x1, x2, x3, x4, x5, x6, 
    x7, x8, x9, x10, x11, x12);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
numRows = other.getNumRows();
numCols = other.getNumCols();
Ionflux::GeoUtils::Matrix::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::MatrixMN
	name = transpose
	const = true
	shortDesc = Transpose
	longDesc = Transpose the matrix.
	impl = <<<
MatrixMN result(*this);
result.transposeIP();
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = qrDecomp
	const = true
	shortDesc = QR decomposition
	longDesc = Calculate the QR decomposition M = QR of the matrix.
	param[] = {
		type = Ionflux::GeoUtils::MatrixMN&
		name = q
		desc = Q
	}
	param[] = {
		type = Ionflux::GeoUtils::MatrixMN&
		name = r
		desc = R
	}
    impl = Ionflux::GeoUtils::qrDecomp(*this, q, r);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = solve
	const = true
	shortDesc = Solve
	longDesc = Solve the system M x = b, where M is the matrix itself.
	param[] = {
		type = const Ionflux::GeoUtils::VectorN&
		name = b
		desc = b
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
Ionflux::GeoUtils::MatrixMN q(numRows0, numRows0);
Ionflux::GeoUtils::MatrixMN r(numRows0, numCols0);
Ionflux::GeoUtils::VectorN result(numCols0);
qrDecomp(q, r);
Ionflux::GeoUtils::qrSolve(q, r, b, result);
>>>
    return = {
        value = result
        desc = Result of the computation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::MatrixMN
	name = invert
	const = true
	shortDesc = Invert
	longDesc = Invert the matrix (if possible).
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
if (numRows0 != numCols0)
    throw GeoUtilsError(getErrorString(
        "Cannot invert non-square matrix.", "invert"));
Ionflux::GeoUtils::MatrixMN q(numRows0, numRows0);
Ionflux::GeoUtils::MatrixMN r(numRows0, numRows0);
qrDecomp(q, r);
Ionflux::GeoUtils::MatrixMN result(numRows0, numRows0);
for (unsigned int i = 0; i < numRows0; i++)
{
    Ionflux::GeoUtils::VectorN b(numRows0);
    Ionflux::GeoUtils::VectorN x(numRows0);
    b.setElement(i, 1.);
    Ionflux::GeoUtils::qrSolve(q, r, b, x);
    result.setCol(i, x);
}
>>>
    return = {
        value = result
        desc = Result of the computation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = void
	name = qrSolve
	shortDesc = QR solve
	longDesc = Solve the system R x = Q^T b.
	param[] = {
		type = const Ionflux::GeoUtils::MatrixMN&
		name = q
		desc = Q
	}
	param[] = {
		type = const Ionflux::GeoUtils::MatrixMN&
		name = r
		desc = R
	}
	param[] = {
		type = const Ionflux::GeoUtils::VectorN&
		name = b
		desc = b
	}
	param[] = {
		type = Ionflux::GeoUtils::VectorN&
		name = x
		desc = x
	}
    impl = Ionflux::GeoUtils::qrSolve(q, r, b, x);
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the matrix
	impl = 
    return = {
        value = getNumCols() * getNumRows()
        desc = Number of elements
    }
}

# operations

# Global functions.

