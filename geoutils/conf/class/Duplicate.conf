# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Duplicate.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Duplicate
	shortDesc = Transform node: Duplicate
	title = Transform node: Duplicate
	longDesc = Duplicate elements from the input group. The element that is duplicated is selected in each step using the specified mapping function. The mapping function is expected to map the interval [0...1] to the interval [0...1], where the input and output element indices are mapped to those intervals according to how many elements exist for input and output. If no mapping function is specified, source elements are selected in order.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        #'logmessage'
        'upcast'
        'classinfo'
        'create'
        'param'
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = Param
        notExistsError = GeoUtilsError(std::string("Parameter '") \
        + paramID + "' does not exist.")
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = numDuplicates
        value = DEFAULT_NUM_DUPLICATES
    }
    initializer[] = {
        name = func
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = numDuplicates
        value = initNumDuplicates
    }
    initializer[] = {
        name = func
        value = 0
    }
    param[] = {
        type = unsigned int
        name = initNumDuplicates
        desc = Number of duplicates
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Mapping function
        default = 0
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = setFunc(initFunc);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numDuplicates
	desc = Number of duplicates
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = numDuplicatesParam
	desc = Number of duplicates (parameter)
	impl.set = setNumDuplicates(\
    static_cast<unsigned int>(newNumDuplicatesParam));
    impl.get = return static_cast<double>(getNumDuplicates());
    proxy = true
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = func
	desc = Mapping function
    managed = true
#    copy = true
#    proxy = true
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_DUPLICATES
    desc = Default number of duplicates
    value = 10
}
constant.public[] = {
    type = Ionflux::Mapping::Range
    name = CLAMP_RANGE
    desc = Clamp range
    value = \{ 0., 1. \}
}


# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
numDuplicates = other.numDuplicates;\
setFunc(other.func);
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; " \
    << numDuplicates << ", ";\
if (func != 0)\
    status << func->getString();\
else\
    status << "<none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
TransformableGroup* g1 = new TransformableGroup();\
if (g1 == 0)\
    throw GeoUtilsError("Could not allocate object.");\
// Keep group transformations.\
g1->copyTransform(*g0);\
unsigned int numSourceItems = g0->getNumItems();\
/* <---- DEBUG ----- //\
ostringstream message;\
message << "numSourceItems = " << numSourceItems \
    << ", numDuplicates = " << numDuplicates;\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */\
for (unsigned int i = 0; i < numDuplicates; i++)\
\{\
    // Determine which item to duplicate.\
    unsigned int k = 0;\
    if ((func == 0) \
        || (numDuplicates == 1))\
        k = i % numSourceItems;\
    else \
    \{\
        Ionflux::Mapping::MappingValue t = i / (numDuplicates - 1);\
        k = static_cast<unsigned int>(Ionflux::Mapping::clamp(\
            (*func)(t), CLAMP_RANGE) * numSourceItems);\
    \}\
    // Create the duplicate.\
    TransformableObject* o0 = g0->getItem(k);\
    g1->addItem(&(o0->duplicate()));\
\}\
addOutput(g1);
}

# operations

# Global functions.

