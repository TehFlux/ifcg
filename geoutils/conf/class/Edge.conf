# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Edge.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
    'class Edge'
}

# undefine macros

# typedefs
typedef = {
    'std::vector<Ionflux::GeoUtils::Edge*> EdgeVector'
}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Edge
	shortDesc = Polygon edge
	title = Polygon edge
	longDesc = A polygon edge, which is specified by two vertex indices.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = edge
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = v0
        value = 0
    }
    initializer[] = {
        name = v1
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = v0
        value = initV0
    }
    initializer[] = {
        name = v1
        value = initV1
    }
    param[] = {
        name = initV0
        type = int
        desc = First vertex index
    }
    param[] = {
        name = initV1
        type = int
        desc = Second vertex index
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = v0
        value = 0
    }
    initializer[] = {
        name = v1
        value = 0
    }
    param[] = {
        name = initVertices
        type = const Ionflux::ObjectBase::IntVector&
        desc = Vertex index vector
    }
    impl = setVertices(initVertices);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = int
	setFromType = int
	name = v0
	desc = First vertex index
    valueType = integer
    xml.attribute.name = v0
}
property.protected[] = {
	type = int
	setFromType = int
	name = v1
	desc = Second vertex index
    valueType = integer
    xml.attribute.name = v1
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
v0 = other.v0;
v1 = other.v1;
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setVertices
	shortDesc = Set vertices
	longDesc = Set vertices from a vector of integers. If the vector contains fewer than the required number of vertex indices, the remaining vertex indices will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::IntVector&
		name = newVertices
		desc = Vertex index vector
	}
    impl = if (newVertices.size() == 0)\
    return;\
if (newVertices.size() >= 2)\
    v1 = newVertices[1];\
v0 = newVertices[0];
}
function.public[] = {
	spec = virtual
	type = void
	name = getVertices
    const = true
	shortDesc = Get vertices
	longDesc = Store the vertex indices in a vector of integers.
	param[] = {
		type = Ionflux::ObjectBase::IntVector&
		name = target
		desc = Target vector
	}
    impl = target.clear();\
target.push_back(v0);\
target.push_back(v1);
}
function.public[] = {
	spec = virtual
	type = double
	name = getVertex
    const = true
	shortDesc = Get vertex
	longDesc = Get the vertex index with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = 
    return = {
        value = (*this)[index];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::ObjectBase::IntVector
	name = getVector
    const = true
	shortDesc = Get coordinates as vector
	longDesc = Get the coordinates of the vertex as a vector.
    impl = IntVector result;\
result.push_back(v0);\
result.push_back(v1);
    return = {
        desc = Vector
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setVertex
	shortDesc = Set vertex
	longDesc = Set the vertex index with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
	param[] = {
		type = int
		name = value
		desc = Value
	}
    impl = if ((index < 0) || (index > 2))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw GeoUtilsError(message.str());\
\}\
if (index == 0)\
    v0 = value;\
else \
if (index == 1)\
    v1 = value;
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Edge&
		name = other
		desc = Edge
	}
    impl = if (!((v0 == other.v0) && (v1 == other.v1)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Edge&
		name = other
		desc = Edge
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = double
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Subscript operator.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = if ((index < 0) || (index > 2))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw GeoUtilsError(message.str());\
\}\
double result = 0.;\
if (index == 0)\
    result = v0;\
if (index == 1)\
    result = v1;
	return = {
        value = result
        desc = Element at specified index
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = ostringstream status;\
status << v0 << ", " << v1;
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

