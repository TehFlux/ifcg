# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Compose3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = Mapping

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Compose3
	shortDesc = Vector mapping: Compose
	title = Vector mapping: Compose
	longDesc = Mapping that composes a 3-element vector by calling one mapping per component.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::Mapping::Vector3Mapping
            include = geoutils/Vector3Mapping.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = funcX0
        value = 0
    }
    initializer[] = {
        name = funcX1
        value = 0
    }
    initializer[] = {
        name = funcX2
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = funcX0
        value = 0
    }
    initializer[] = {
        name = funcX1
        value = 0
    }
    initializer[] = {
        name = funcX2
        value = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFuncX0
        desc = Mapping function (X0)
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFuncX1
        desc = Mapping function (X1)
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFuncX2
        desc = Mapping function (X2)
        default = 0
    }
    impl = setFuncX0(initFuncX0);\
setFuncX1(initFuncX1);\
setFuncX2(initFuncX2);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = funcX0
	desc = Component mapping (0)
	managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = funcX1
	desc = Component mapping (1)
	managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = funcX2
	desc = Component mapping (2)
	managed = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = setFuncX0(other.funcX0);\
setFuncX1(other.funcX1);\
setFuncX2(other.funcX2);
function.public[] = {
	spec = virtual
	type = void
	name = setFuncs
	shortDesc = Set component mappings
	longDesc = Set the component mappings.
	param[] = {
		type = Ionflux::Mapping::Mapping*
		name = newFuncX0
		desc = Component mapping (0)
		default = 0
	}
	param[] = {
		type = Ionflux::Mapping::Mapping*
		name = newFuncX1
		desc = Component mapping (1)
		default = 0
	}
	param[] = {
		type = Ionflux::Mapping::Mapping*
		name = newFuncX2
		desc = Component mapping (2)
		default = 0
	}
    impl = setFuncX0(newFuncX0);\
setFuncX1(newFuncX1);\
setFuncX2(newFuncX2);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFuncsEqual
	shortDesc = Set component mappings
	longDesc = Set all component mappings to the same mapping.
	param[] = {
		type = Ionflux::Mapping::Mapping*
		name = newFunc
		desc = Component mapping
		default = 0
	}
    impl = setFuncX0(newFunc);\
setFuncX1(newFunc);\
setFuncX2(newFunc);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = call
    const = true
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = double x0 = 0.;\
if (funcX0 != 0)\
    x0 = (*funcX0)(value);\
double x1 = x0;\
if (funcX1 != 0)\
    x1 = (*funcX1)(value);\
double x2 = x1;\
if (funcX2 != 0)\
    x2 = (*funcX2)(value);
    return = {
        value = Vector3(x0, x1, x2)
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (funcX0 != 0)\
    status << funcX0->getString();\
else\
    status << "<none>";\
if (funcX1 != 0)\
    status << ", " << funcX1->getString();\
else\
    status << ", <none>";\
if (funcX2 != 0)\
    status << ", " << funcX2->getString();\
else\
    status << ", <none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

