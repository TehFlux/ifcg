# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# VertexAttribute.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"ifobject/types.hpp"'
        '"altjira/ColorSet.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/gltypes.hpp"'
        '"geoutils/glconstants.hpp"'
        '"geoutils/FaceData.hpp"'
        '"geoutils/Mesh.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<cstring>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3Set.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/VectorSet.hpp"'
        '"geoutils/Vector.hpp"'
        '"geoutils/Face.hpp"'
        '"geoutils/glutils.hpp"'
        '"geoutils/glutils_private.hpp"'
    }
}

# forward declarations
forward = {
    'class Vertex3Set'
    'class VectorSet'
    'class Mesh'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VertexAttribute
	shortDesc = Vertex attribute (OpenGL)
	title = Vertex attribute (OpenGL)
	longDesc = An OpenGL vertex attribute. This can be used to manage vertex attributes.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeTypeID
    name = TYPE_UNDEFINED
    desc = Vertex attribute type: undefined
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeTypeID
    name = TYPE_POSITION
    desc = Vertex attribute type: position
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeTypeID
    name = TYPE_DATA
    desc = Vertex attribute type: data
    value = 2
}
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeTypeID
    name = TYPE_INDEX
    desc = Vertex attribute type: index
    value = 3
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = GLvoid*
    setFromType = GLvoid*
    name = data
    desc = Data buffer
    protectedWrite = true
}
property.protected[] = {
    type = GLsizei
    setFromType = GLsizei
    name = dataSize
    desc = Data buffer size
    protectedWrite = true
}
property.protected[] = {
    type = Ionflux::GeoUtils::DataTypeID
    setFromType = Ionflux::GeoUtils::DataTypeID
    name = dataType
    desc = Data buffer type
    protectedWrite = true
}
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = bufferImpl
    desc = Buffer implementation (OpenGL)
    protectedWrite = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = numElements
    desc = Number of elements
    protectedWrite = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = elementSize
    desc = Element size
    protectedWrite = true
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = normalized
    desc = Normalized flag
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = data
        value = 0
    }
    initializer[] = {
        name = dataSize
        value = 0
    }
    initializer[] = {
        name = dataType
        value = 0
    }
    initializer[] = {
        name = bufferImpl
        value = 0
    }
    initializer[] = {
        name = numElements
        value = 0
    }
    initializer[] = {
        name = elementSize
        value = 0
    }
    initializer[] = {
        name = normalized
        value = false
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
cleanup();
>>>

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions
function.public[] = {
    bindings.disable = true
	spec = virtual
	type = GLenum
	name = getOpenGLTarget
	shortDesc = Get buffer target (OpenGL)
	longDesc = Get the OpenGL buffer target for the current data type.
	impl = <<<
if (dataType == DATA_TYPE_FLOAT)
    return GL_ARRAY_BUFFER;
if (dataType == DATA_TYPE_UINT)
    return GL_ELEMENT_ARRAY_BUFFER;
std::ostringstream status;
status << "Invalid vertex attribute data type ID: " << dataType;
throw GeoUtilsError(getErrorString(status.str(), "getTarget"));
>>>
    return = {
        desc = OpenGL buffer target
        value = 0
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = allocate
	shortDesc = Allocate buffer
	longDesc = Allocate a new data buffer. If the current size of the buffer is appropriate to accomodate the specified number of elements of the specified size, the data buffer will not be re-allocated, but its type will still be set according to the \c newDataType parameter.
	param[] = {
	    type = unsigned int
	    name = newNumElements
	    desc = number of elements
	}
	param[] = {
	    type = unsigned int
	    name = newElementSize
	    desc = element size
	}
	param[] = {
	    type = Ionflux::GeoUtils::DataTypeID
	    name = newDataType
	    desc = data buffer type
	    default = DATA_TYPE_FLOAT
	}
	impl = <<<
if ((newNumElements == 0) 
    || (newElementSize == 0))
{
    std::ostringstream status;
    status << "Number of elements or element size to be allocated is "
        "zero (numElements = " << newNumElements << ", elementSize = " 
        << newElementSize << ")";
    throw GeoUtilsError(getErrorString(status.str(), "allocate"));
}
GLsizei n1 = 0;
if (newDataType == DATA_TYPE_FLOAT)
{
    // float buffer
    n1 = newNumElements * newElementSize * sizeof(GLfloat);
    GLfloat* d0 = static_cast<GLfloat*>(data);
    if ((d0 == 0)
        || (n1 > dataSize))
    {
        // allocate new buffer
        cleanupData();
        d0 = new GLfloat[newNumElements * newElementSize];
        setData(d0);
    }
} else
if (newDataType == DATA_TYPE_UINT)
{
    // unsigned integer buffer
    n1 = newNumElements * newElementSize * sizeof(GLuint);
    GLuint* d0 = static_cast<GLuint*>(data);
    if ((d0 == 0)
        || (n1 > dataSize))
    {
        // allocate new buffer
        cleanupData();
        d0 = new GLuint[newNumElements * newElementSize];
        setData(d0);
    }
} else
{
    std::ostringstream status;
    status << "Unsupported buffer data type: " 
        << getDataTypeString(newDataType) << " (" << newDataType 
        << ")";
    throw GeoUtilsError(getErrorString(status.str(), "allocate"));
}
Ionflux::ObjectBase::nullPointerCheck(data, this, 
    "allocate", "Data buffer");
setDataSize(n1);
setDataType(newDataType);
setNumElements(newNumElements);
setElementSize(newElementSize);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = resize
	shortDesc = Resize buffer
	longDesc = Resize the data buffer. If the current size of the buffer is appropriate to accomodate the specified number of elements of the specified size, the data buffer will not be resized, but its type will still be set according to the \c newDataType parameter. If \c resizeExponent is set to some value \c x greater than or equal to 2, the current buffer size will be multiplied by \c x until it can accomodate the specified number and size of elements. This is useful to reduce the number of resize operations required if data is appended to the buffer multiple times.
	param[] = {
	    type = unsigned int
	    name = newNumElements
	    desc = number of elements
	}
	param[] = {
	    type = unsigned int
	    name = newElementSize
	    desc = element size
	}
	param[] = {
	    type = Ionflux::GeoUtils::DataTypeID
	    name = newDataType
	    desc = data buffer type
	    default = DATA_TYPE_FLOAT
	}
	param[] = {
	    type = double
	    name = resizeExponent
	    desc = resize exponent
	    default = 0.
	}
	impl = <<<
if (data == 0)
{
    allocate(newNumElements, newElementSize, newDataType);
    return;
}
GLsizei n1 = 0;
unsigned int ne0 = newNumElements;
if (resizeExponent >= 2.)
{
    ne0 = numElements;
    if (ne0 == 0)
    {
        throw GeoUtilsError(getErrorString(
            "Current number of elements is zero.", "resize"));
    }
    while (ne0 < newNumElements)
        ne0 = static_cast<unsigned int>(resizeExponent * ne0);
}
if (newDataType == DATA_TYPE_FLOAT)
{
    // float buffer
    n1 = newNumElements * newElementSize * sizeof(GLfloat);
    GLfloat* d0 = static_cast<GLfloat*>(data);
    if (n1 > dataSize)
    {
        // copy data to temporary buffer
        GLfloat* d1 = new GLfloat[newNumElements * newElementSize];
        for (unsigned int i = 0; i < numElements; i++)
        {
            for (unsigned int k = 0; k < elementSize; k++)
                d1[i * elementSize + k] = d0[i * elementSize + k];
        }
        // allocate new buffer
        // <---- DEBUG ----- //
        std::cerr << "[VertexAttribute::resize] DEBUG: "
            "Resizing buffer (ne0 = " << ne0 
            << ", exponent = " << resizeExponent << ", numElements = " 
            << newNumElements << ", elementSize = " << newElementSize 
            << ", type = " << getDataTypeString(newDataType) << ")." 
            << std::endl;
        // ----- DEBUG ----> */
        allocate(ne0, newElementSize, newDataType);
        // copy data back from temporary buffer
        d0 = static_cast<GLfloat*>(data);
        for (unsigned int i = 0; i < numElements; i++)
        {
            for (unsigned int k = 0; k < elementSize; k++)
                d0[i * elementSize + k] = d1[i * elementSize + k];
        }
        delete[] d1;
    }
} else
if (newDataType == DATA_TYPE_UINT)
{
    // unsigned integer buffer
    n1 = newNumElements * newElementSize * sizeof(GLuint);
    GLuint* d0 = static_cast<GLuint*>(data);
    if (n1 > dataSize)
    {
        // copy data to temporary buffer
        GLuint* d1 = new GLuint[newNumElements * newElementSize];
        for (unsigned int i = 0; i < numElements; i++)
        {
            for (unsigned int k = 0; k < elementSize; k++)
                d1[i * elementSize + k] = d0[i * elementSize + k];
        }
        // allocate new buffer
        // <---- DEBUG ----- //
        std::cerr << "[VertexAttribute::resize] DEBUG: "
            "Resizing buffer (ne0 = " << ne0 
            << ", exponent = " << resizeExponent << ", numElements = " 
            << newNumElements << ", elementSize = " << newElementSize 
            << ", type = " << getDataTypeString(newDataType) << ")." 
            << std::endl;
        // ----- DEBUG ----> */
        allocate(ne0, newElementSize, newDataType);
        // copy data back from temporary buffer
        d0 = static_cast<GLuint*>(data);
        for (unsigned int i = 0; i < numElements; i++)
        {
            for (unsigned int k = 0; k < elementSize; k++)
                d0[i * elementSize + k] = d1[i * elementSize + k];
        }
        delete[] d1;
    }
} else
{
    std::ostringstream status;
    status << "Unsupported buffer data type: " 
        << getDataTypeString(newDataType) << " (" << newDataType 
        << ")";
    throw GeoUtilsError(getErrorString(status.str(), "resize"));
}
setDataSize(n1);
setDataType(newDataType);
setNumElements(newNumElements);
setElementSize(newElementSize);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = append
	shortDesc = Append data
	longDesc = Append data from the source vertex attribute to the vertex attribute. The data type and element size of the two vertex attributes must match. If the buffer of the target vertex attribute is not sufficiently large to accomodate the new data, it will be resized.
	param[] = {
	    type = const Ionflux::GeoUtils::VertexAttribute&
	    name = source
	    desc = vertex attribute
	}
	impl = <<<
DataTypeID t0 = source.getDataType();
if (t0 != dataType)
{
    std::ostringstream status;
    status << "Buffer data type mismatch (source: " 
        << getDataTypeString(t0) << ", target: " << dataType << ")";
    throw GeoUtilsError(getErrorString(status.str(), "append"));
}
unsigned int es0 = source.getElementSize();
if (es0 != elementSize)
{
    std::ostringstream status;
    status << "Element size type mismatch (source: " 
        << es0 << ", target: " << elementSize << ")";
    throw GeoUtilsError(getErrorString(status.str(), "append"));
}
unsigned int ne0 = source.getNumElements();
resize(ne0 + numElements, elementSize, dataType);
if (dataType == DATA_TYPE_FLOAT)
{
    GLfloat* d0 = static_cast<GLfloat*>(data);
    GLfloat* d1 = static_cast<GLfloat*>(source.data);
    for (unsigned int i = 0; i < ne0; i++)
    {
        for (unsigned int k = 0; k < elementSize; k++)
        {
            d0[(i + numElements) * elementSize + k] = 
                d1[i * elementSize + k];
        }
    }
} else
if (dataType == DATA_TYPE_UINT)
{
    GLuint* d0 = static_cast<GLuint*>(data);
    GLuint* d1 = static_cast<GLuint*>(source.data);
    for (unsigned int i = 0; i < ne0; i++)
    {
        for (unsigned int k = 0; k < elementSize; k++)
        {
            d0[(i + numElements) * elementSize + k] = 
                d1[i * elementSize + k];
        }
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanupData
	shortDesc = Clean up data
	longDesc = Clean up the data buffer.
	impl = <<<
if (data != 0)
{
    if (dataType == DATA_TYPE_FLOAT)
    {
        GLfloat* d0 = static_cast<GLfloat*>(data);
        delete[] d0;
    } else
    if (dataType == DATA_TYPE_UINT)
    {
        GLuint* d0 = static_cast<GLuint*>(data);
        delete[] d0;
    } else
    {
        std::ostringstream status;
        status << "Unknown data type (dataType = " 
            << getDataTypeString(dataType) << ").";
        throw GeoUtilsError(getErrorString(status.str(), 
            "cleanupData"));
    }
    data = 0;
    dataSize = 0;
    numElements = 0;
    elementSize = 0;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up state maintained by the vertex attribute.
	impl = <<<
if (bufferImpl != 0)
{
    glDeleteBuffers(1, &bufferImpl);
    bufferImpl = 0;
}
cleanupData();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the vertex attribute.
	impl = <<<
if (bufferImpl != 0)
    glDeleteBuffers(1, &bufferImpl);
glGenBuffers(1, &bufferImpl);
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "Could not allocate OpenGL buffer.", "init"));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = bind
	shortDesc = Bind
	longDesc = Bind the OpenGL buffer.
	impl = <<<
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL buffer not initialized.", "bind"));
}
glBindBuffer(getOpenGLTarget(), bufferImpl);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the OpenGL buffer with the vertex array data.
	param[] = {
	    type = Ionflux::GeoUtils::BufferUsageID
	    name = usage
	    desc = Buffer usage
	    default = USAGE_STATIC_DRAW
	}
	impl = <<<
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL buffer not initialized.", "update"));
}
bind();
glBufferData(getOpenGLTarget(), dataSize, data, 
    getOpenGLBufferUsage(usage));
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = enable
	shortDesc = Enable
	longDesc = Enable the OpenGL vertex attribute for the specified index.
	param[] = {
	    type = unsigned int
	    name = index
	    desc = Vertex attribute index
	}
	impl = <<<
if (elementSize == 0)
{
    throw GeoUtilsError(getErrorString("Element size is zero.", 
        "enable"));
}
GLenum target = getOpenGLTarget();
if (target != GL_ARRAY_BUFFER)
{
    throw GeoUtilsError(getErrorString(
        "Buffer is not a vertex attribute array.", "enable"));
}
if (elementSize == 0)
{
    throw GeoUtilsError(getErrorString("Element size is zero.", 
        "enable"));
}
bind();
glEnableVertexAttribArray(index);
glVertexAttribPointer(index, elementSize, 
    getOpenGLDataType(dataType), normalized, 0, 0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::GeoUtils::Vertex3Set&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.getNumVertices();
if (n0 == 0)
    return;
allocate(n0, 3, DATA_TYPE_FLOAT);
GLfloat* d0 = static_cast<GLfloat*>(data);
for (unsigned int i = 0; i < n0; i++)
{
    Vertex3* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVertex(i), this, "setData", "Vertex");
    for (int j = 0; j < 3; j++)
        d0[3 * i + j] = v0->getCoord(j);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute. Data will be taken from the specified vector set. If \c useNumElements is 0, the number of elements to be used will be determined from the number of elements of the first vector in the set. If any of the vectors in the set have less than this number of elements, remaining elements will be set to the default value. Any elements in one of the vectors beyond the specified number of elements will be ignored.
	param[] = {
	    type = const Ionflux::GeoUtils::VectorSet&
	    name = newData
	    desc = Data
	}
	param[] = {
	    type = int
	    name = useNumElements
	    desc = Number of vector elements to be used
	    default = 0
	}
	param[] = {
	    type = float
	    name = defaultValue
	    desc = Default value
	    default = 0.
	}
	impl = <<<
unsigned int n0 = newData.getNumVectors();
if (n0 == 0)
    return;
if (useNumElements <= 0)
{
    Vector* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVector(0), this, "setData", "Vector");
    useNumElements = v0->getNumElements();
}
allocate(n0, useNumElements, DATA_TYPE_FLOAT);
GLfloat* d0 = static_cast<GLfloat*>(data);
for (unsigned int i = 0; i < n0; i++)
{
    Vector* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVector(i), this, "setData", "Vertex");
    unsigned int n2 = v0->getNumElements();
    for (int j = 0; j < useNumElements; j++)
    {
        if (static_cast<unsigned int>(j) < n2)
            d0[useNumElements * i + j] = v0->getElement(j);
        else
            d0[useNumElements * i + j] = defaultValue;
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::Altjira::ColorSet&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.getNumColors();
if (n0 == 0)
    return;
allocate(n0, 4, DATA_TYPE_FLOAT);
GLfloat* d0 = static_cast<GLfloat*>(data);
for (unsigned int i = 0; i < n0; i++)
{
    Ionflux::Altjira::Color* c0 = 
        Ionflux::ObjectBase::nullPointerCheck(
            newData.getColor(i), this, "setData", "Color");
    d0[4 * i] = c0->getRed();
    d0[4 * i + 1] = c0->getGreen();
    d0[4 * i + 2] = c0->getBlue();
    d0[4 * i + 3] = c0->getAlpha();
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::ObjectBase::UIntVector&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.size();
if (n0 == 0)
    return;
allocate(n0, 1, DATA_TYPE_UINT);
GLuint* d0 = static_cast<GLuint*>(data);
for (unsigned int i = 0; i < n0; i++)
    d0[i] = newData[i];
setNumElements(n0);
setElementSize(1);
>>>
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = setData
	shortDesc = Set data (mesh)
	longDesc = Set the data for the vertex attribute from a tri-mesh. \c attrType determines what subset of data from the mesh is assigned to the vertex attribute. If \c attrType is \c TYPE_DATA, the \c faceDataType parameter determines the type of face data that is assigned to the vertex attribute. This function creates one vertex attribute element per face vertex, i.e. vertices are duplicated for each face. An exception will be thrown if \c mesh is not a tri-mesh.
	param[] = {
	    type = const Ionflux::GeoUtils::Mesh&
	    name = mesh
	    desc = mesh
	}
	param[] = {
	    type = Ionflux::GeoUtils::VertexAttributeTypeID
	    name = attrType
	    desc = vertex attribute type
	    default = TYPE_POSITION
	}
	param[] = {
	    type = Ionflux::GeoUtils::MeshNFaceTypeID
	    name = nFaceType
	    desc = Mesh N-face type
	    default = Ionflux::GeoUtils::Mesh::NFACE_TYPE_FACE
	}
	param[] = {
	    type = Ionflux::GeoUtils::FaceDataTypeID
	    name = faceDataType
	    desc = face data type
	    default = FaceData::TYPE_VERTEX_NORMAL
	}
	impl = <<<
if ((nFaceType == Ionflux::GeoUtils::Mesh::NFACE_TYPE_FACE) 
    && !mesh.isTriMesh())
{
    throw GeoUtilsError(getErrorString(
        "Mesh is not a tri-mesh.", "setData"));
}
if ((attrType != TYPE_POSITION) 
    && (attrType != TYPE_DATA) 
    && (attrType != TYPE_INDEX))
{
    std::ostringstream status;
    status << "Invalid vertex attribute type: " << attrType;
    throw GeoUtilsError(getErrorString(
        status.str(), "setData"));
}
unsigned int numNFaces = mesh.getNumNFaces(nFaceType);
// <---- DEBUG ----- //
std::cerr << "[VertexAttribute::setData] DEBUG: "
    "numNFaces = " << numNFaces 
    << ", attrType = " << getTypeIDString(attrType) 
    << ", nFaceType = " 
        << Ionflux::GeoUtils::Mesh::getNFaceTypeIDString(nFaceType)
    << ", faceDataType = " << FaceData::getTypeIDString(faceDataType) 
    << std::endl;
// ----- DEBUG ----> */
VectorSet vs0;
Ionflux::ObjectBase::UIntVector iv0;
unsigned int numAttr = 0;
unsigned int nv0 = 0;
for (unsigned int i = 0; i < numNFaces; i++)
{
    NFace* f0 = mesh.getNFace(nFaceType, i);
    if (f0 != 0)
    {
        if (i == 0)
            nv0 = f0->getNumVertices();
        else
        {
            unsigned int nv1 = f0->getNumVertices();
            if (nv0 != nv1)
            {
                std::ostringstream status;
                status << "Inconsistent vertex count (type = " 
                    << Ionflux::GeoUtils::Mesh::getNFaceTypeIDString(
                        nFaceType) << ", N-face = " << i << ", nv0 = " 
                    << nv0 << ", nv1 = " << nv1 << ")";
                throw GeoUtilsError(getErrorString(
                    status.str(), "setData"));
            }
        }
        if (attrType == TYPE_POSITION)
        {
            // vertex position
            for (unsigned int i = 0; i < nv0; i++)
            {
                Vertex3* v0 = Ionflux::ObjectBase::nullPointerCheck(
                    mesh.getVertex(f0->getVertex(i)), this, 
                    "setData", "Vertex");
                vs0.addVector(v0->getVector().copy());
            }
        } else
        if (attrType == TYPE_DATA)
        {
            // vertex data
            FaceData* fd0 = f0->getFaceDataByType0(faceDataType);
            if (fd0 == 0)
            {
                std::ostringstream status;
                status << "N-face data not set (type = " 
                    << FaceData::getTypeIDString(faceDataType) 
                    << "(" << faceDataType << ")" 
                    << ", face = " << i << ")";
                throw GeoUtilsError(getErrorString(
                    status.str(), "setData"));
            }
            for (unsigned int i = 0; i < nv0; i++)
            {
                Vector* v0 = Ionflux::ObjectBase::nullPointerCheck(
                    fd0->getVector(i), this, "setData", 
                    "Face data vector");
                vs0.addVector(v0->copy());
            }
        } else
        if (attrType == TYPE_INDEX)
        {
            // vertex indices
            for (unsigned int i = 0; i < nv0; i++)
                iv0.push_back(f0->getVertex(i));
        }
        numAttr += nv0;
    }
}
if ((attrType == TYPE_POSITION) 
    || (attrType == TYPE_DATA))
    setData(vs0);
else
if (attrType == TYPE_INDEX)
    setData(iv0);
>>>
    return = {
        value = numAttr
        desc = number of vertex attribute elements that were created
    }
}
function.public[] = {
	spec = virtual
	type = float
	name = getFloat
	shortDesc = Get data (float)
	longDesc = Get the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	    default = 0
	}
	impl = <<<
if (dataType != DATA_TYPE_FLOAT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "getFloat"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
GLfloat* d0 = static_cast<GLfloat*>(data);
>>>
    return = {
        value = d0[elementIndex * elementSize + componentIndex]
        desc = Data value
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getUInt
	shortDesc = Get data (uint)
	longDesc = Get the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	    default = 0
	}
	impl = <<<
if (dataType != DATA_TYPE_UINT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "getFloat"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
GLuint* d0 = static_cast<GLuint*>(data);
>>>
    return = {
        value = d0[elementIndex * elementSize + componentIndex]
        desc = Data value
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data (float)
	longDesc = Set the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	}
	param[] = {
	    type = float
	    name = value
	    desc = Value
	}
	impl = <<<
if (dataType != DATA_TYPE_FLOAT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
GLfloat* d0 = static_cast<GLfloat*>(data);
d0[elementIndex * elementSize + componentIndex] = value;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setDataComponents
	shortDesc = Set data (float)
	longDesc = Set the data value with the specified element index to the specified component values.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = float
	    name = v0
	    desc = Value (0)
	}
	param[] = {
	    type = float
	    name = v1
	    desc = Value (1)
	}
	param[] = {
	    type = float
	    name = v2
	    desc = Value (2)
	    default = 0.
	}
	param[] = {
	    type = float
	    name = v3
	    desc = Value (3)
	    default = 0.
	}
	impl = <<<
if (elementSize > 0)
    setData(elementIndex, 0, v0);
if (elementSize > 1)
    setData(elementIndex, 1, v1);
if (elementSize > 2)
    setData(elementIndex, 2, v2);
if (elementSize > 3)
    setData(elementIndex, 3, v3);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data (Vector)
	longDesc = Set the data value with the specified element index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = const Ionflux::GeoUtils::Vector&
	    name = value
	    desc = Value
	}
	impl = <<<
if (dataType != DATA_TYPE_FLOAT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
GLfloat* d0 = static_cast<GLfloat*>(data);
unsigned int ne0 = value.getNumElements();
for (unsigned int i = 0; i < elementSize; i++)
{
    if (i < ne0)
        d0[elementIndex * elementSize + i] = value[i];
    else
        d0[elementIndex * elementSize + i] = 0.;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data (uint)
	longDesc = Set the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	}
	param[] = {
	    type = unsigned int
	    name = value
	    desc = Value
	}
	impl = <<<
if (dataType != DATA_TYPE_UINT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
GLuint* d0 = static_cast<GLuint*>(data);
d0[elementIndex * elementSize + componentIndex] = value;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setDataComponents
	shortDesc = Set data (uint)
	longDesc = Set the data value with the specified element index to the specified component values.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = v0
	    desc = Value (0)
	}
	param[] = {
	    type = unsigned int
	    name = v1
	    desc = Value (1)
	}
	param[] = {
	    type = unsigned int
	    name = v2
	    desc = Value (2)
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = v3
	    desc = Value (3)
	    default = 0
	}
	impl = <<<
if (elementSize > 0)
    setData(elementIndex, 0, v0);
if (elementSize > 1)
    setData(elementIndex, 1, v1);
if (elementSize > 2)
    setData(elementIndex, 2, v2);
if (elementSize > 3)
    setData(elementIndex, 3, v3);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = draw
	shortDesc = Draw
	longDesc = Draw primitives. If \c drawNumPrimitives is 0, the maximum possible number of primitives of the specified type will be drawn. Otherwise, the specified number of primitives, up to the maximum possible, will be drawn. If \c startIndex is not 0, primitives will be drawn starting from the primitive with index \c startIndex.
	param[] = {
	    type = Ionflux::GeoUtils::PrimitiveID
	    name = primitiveID
	    desc = Primitive ID
	}
	param[] = {
	    type = unsigned int
	    name = drawNumPrimitives
	    desc = Number of primitives to be drawn
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = startIndex
	    desc = Start index
	    default = 0
	}
	impl = <<<
unsigned int numElementsPerPrimitive = 
    getNumElementsPerPrimitive(primitiveID);
unsigned int maxDrawNumPrimitives = numElements 
    / numElementsPerPrimitive;
if ((startIndex >= maxDrawNumPrimitives)
    || (maxDrawNumPrimitives == 0))
    return;
if ((drawNumPrimitives == 0) 
    || ((startIndex + drawNumPrimitives) > maxDrawNumPrimitives))
    drawNumPrimitives = maxDrawNumPrimitives - startIndex;
GLenum target = getOpenGLTarget();
GLenum mode = getOpenGLPrimitive(primitiveID);
if (target == GL_ARRAY_BUFFER)
{
    // draw array elements
    glDrawArrays(mode, numElementsPerPrimitive * startIndex, 
        numElementsPerPrimitive * drawNumPrimitives);
} else
if (target == GL_ELEMENT_ARRAY_BUFFER)
{
    // draw indexed elements
    bind();
    glDrawElements(mode, 
        numElementsPerPrimitive * drawNumPrimitives, 
        getOpenGLDataType(dataType), 
        reinterpret_cast<const void*>(
            numElementsPerPrimitive * startIndex));
} else
{
    throw GeoUtilsError(getErrorString(
        "Unknown OpenGL buffer target.", "draw"));
}
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << "dataType = " << getDataTypeString(dataType) 
    << ", numElements = " << numElements 
    << ", elementSize = " << elementSize 
    << ", normalized = " << normalized;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = std::string
	name = getTypeIDString
	shortDesc = Get vertex attribute type string representation
	longDesc = Get a string representation for a vertex attribute type ID.
	param[] = {
		type = Ionflux::GeoUtils::VertexAttributeTypeID
		name = typeID
		desc = Vertex attribute type ID
	}
    impl = <<<
if (typeID == TYPE_UNDEFINED)
    return "undefined";
else
if (typeID == TYPE_POSITION)
    return "position";
else
if (typeID == TYPE_DATA)
    return "data";
else
if (typeID == TYPE_INDEX)
    return "index";
>>>
    return = {
        value = "<unknown>"
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

