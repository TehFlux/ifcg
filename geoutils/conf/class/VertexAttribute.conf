# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# VertexAttribute.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"ifobject/types.hpp"'
        '"altjira/ColorSet.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/gltypes.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<cstring>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3Set.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/VectorSet.hpp"'
        '"geoutils/Vector.hpp"'
    }
}

# forward declarations
forward = {
    'class Vertex3Set'
    'class VectorSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VertexAttribute
	shortDesc = Vertex attribute (OpenGL)
	title = Vertex attribute (OpenGL)
	longDesc = An OpenGL vertex attribute. This can be used to manage vertex attributes.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeDataTypeID
    name = DATA_TYPE_FLOAT
    desc = Data type ID: float
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::VertexAttributeDataTypeID
    name = DATA_TYPE_UINT
    desc = Data type ID: unsigned integer
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STREAM_DRAW
    desc = OpenGL buffer usage ID: stream draw
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STREAM_READ
    desc = OpenGL buffer usage ID: stream read
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STREAM_COPY
    desc = OpenGL buffer usage ID: stream copy
    value = 2
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STATIC_DRAW
    desc = OpenGL buffer usage ID: static draw
    value = 3
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STATIC_READ
    desc = OpenGL buffer usage ID: static read
    value = 4
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_STATIC_COPY
    desc = OpenGL buffer usage ID: static copy
    value = 5
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_DYNAMIC_DRAW
    desc = OpenGL buffer usage ID: dynamic draw
    value = 6
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_DYNAMIC_READ
    desc = OpenGL buffer usage ID: dynamic read
    value = 7
}
constant.public[] = {
    type = Ionflux::GeoUtils::BufferUsageID
    name = USAGE_DYNAMIC_COPY
    desc = OpenGL buffer usage ID: dynamic copy
    value = 8
}
constant.public[] = {
    type = Ionflux::GeoUtils::PrimitiveID
    name = PRIMITIVE_POINT
    desc = OpenGL primitive ID: point
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::PrimitiveID
    name = PRIMITIVE_LINE
    desc = OpenGL primitive ID: line
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::PrimitiveID
    name = PRIMITIVE_TRIANGLE
    desc = OpenGL primitive ID: triangle
    value = 2
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = GLvoid*
    setFromType = GLvoid*
    name = data
    desc = Data buffer
    protectedWrite = true
}
property.protected[] = {
    type = GLsizei
    setFromType = GLsizei
    name = dataSize
    desc = Data buffer size
    protectedWrite = true
}
property.protected[] = {
    type = Ionflux::GeoUtils::VertexAttributeDataTypeID
    setFromType = Ionflux::GeoUtils::VertexAttributeDataTypeID
    name = dataType
    desc = Data buffer type
    protectedWrite = true
}
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = bufferImpl
    desc = Buffer implementation (OpenGL)
    protectedWrite = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = numElements
    desc = Number of elements
    protectedWrite = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = elementSize
    desc = Element size
    protectedWrite = true
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = normalized
    desc = Normalized flag
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = data
        value = 0
    }
    initializer[] = {
        name = dataSize
        value = 0
    }
    initializer[] = {
        name = dataType
        value = 0
    }
    initializer[] = {
        name = bufferImpl
        value = 0
    }
    initializer[] = {
        name = numElements
        value = 0
    }
    initializer[] = {
        name = elementSize
        value = 0
    }
    initializer[] = {
        name = normalized
        value = false
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
cleanup();
>>>

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions
function.public[] = {
    bindings.disable = true
	spec = virtual
	type = GLenum
	name = getOpenGLTarget
	shortDesc = Get buffer target (OpenGL)
	longDesc = Get the OpenGL buffer target for the current data type.
	impl = <<<
if (dataType == DATA_TYPE_FLOAT)
    return GL_ARRAY_BUFFER;
if (dataType == DATA_TYPE_UINT)
    return GL_ELEMENT_ARRAY_BUFFER;
std::ostringstream status;
status << "Invalid vertex attribute data type ID: " << dataType;
throw GeoUtilsError(getErrorString(status.str(), "getTarget"));
>>>
    return = {
        desc = OpenGL buffer target
        value = 0
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanupData
	shortDesc = Clean up data
	longDesc = Clean up the data buffer.
	impl = <<<
if (data != 0)
{
    if (dataType == DATA_TYPE_FLOAT)
    {
        GLfloat* d0 = static_cast<GLfloat*>(data);
        delete[] d0;
    } else
    if (dataType == DATA_TYPE_UINT)
    {
        GLuint* d0 = static_cast<GLuint*>(data);
        delete[] d0;
    } else
    {
        std::ostringstream status;
        status << "Unknown data type (dataType = " 
            << getDataTypeString(dataType) << ").";
        throw GeoUtilsError(getErrorString(status.str(), 
            "cleanupData"));
    }
    data = 0;
    dataSize = 0;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up state maintained by the vertex attribute.
	impl = <<<
if (bufferImpl != 0)
{
    glDeleteBuffers(1, &bufferImpl);
    bufferImpl = 0;
}
cleanupData();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the vertex attribute.
	impl = <<<
if (bufferImpl != 0)
    glDeleteBuffers(1, &bufferImpl);
glGenBuffers(1, &bufferImpl);
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "Could not allocate OpenGL buffer.", "init"));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = bind
	shortDesc = Bind
	longDesc = Bind the OpenGL buffer.
	impl = <<<
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL buffer not initialized.", "bind"));
}
glBindBuffer(getOpenGLTarget(), bufferImpl);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the OpenGL buffer with the vertex array data.
	param[] = {
	    type = Ionflux::GeoUtils::BufferUsageID
	    name = usage
	    desc = Buffer usage
	    default = USAGE_STATIC_DRAW
	}
	impl = <<<
if (bufferImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL buffer not initialized.", "update"));
}
bind();
glBufferData(getOpenGLTarget(), dataSize, data, 
    getOpenGLBufferUsage(usage));
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = enable
	shortDesc = Enable
	longDesc = Enable the OpenGL vertex attribute for the specified index.
	param[] = {
	    type = unsigned int
	    name = index
	    desc = Vertex attribute index
	}
	impl = <<<
if (elementSize == 0)
{
    throw GeoUtilsError(getErrorString("Element size is zero.", 
        "enable"));
}
GLenum target = getOpenGLTarget();
if (target != GL_ARRAY_BUFFER)
{
    throw GeoUtilsError(getErrorString(
        "Buffer is not a vertex attribute array.", "enable"));
}
if (elementSize == 0)
{
    throw GeoUtilsError(getErrorString("Element size is zero.", 
        "enable"));
}
bind();
glEnableVertexAttribArray(index);
glVertexAttribPointer(index, elementSize, 
    getOpenGLDataType(dataType), normalized, 0, 0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::GeoUtils::Vertex3Set&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.getNumVertices();
if (n0 == 0)
    return;
GLsizei n1 = n0 * 3 * sizeof(GLfloat);
GLfloat* d0 = static_cast<GLfloat*>(data);
if ((d0 == 0)
    || (n1 > dataSize))
{
    // allocate new buffer
    cleanupData();
    d0 = new GLfloat[n0 * 3];
    dataSize = n1;
    setData(d0);
    setDataType(DATA_TYPE_FLOAT);
}
Ionflux::ObjectBase::nullPointerCheck(d0, this, 
    "setData", "Data buffer");
for (unsigned int i = 0; i < n0; i++)
{
    Vertex3* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVertex(i), this, "setData", "Vertex");
    for (int j = 0; j < 3; j++)
        d0[3 * i + j] = v0->getCoord(j);
}
setNumElements(n0);
setElementSize(3);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute. Data will be taken from the specified vector set. If \c useNumElements is 0, the number of elements to be used will be determined from the number of elements of the first vector in the set. If any of the vectors in the set have less than this number of elements, remaining elements will be set to the default value. Any elements in one of the vectors beyond the specified number of elements will be ignored.
	param[] = {
	    type = const Ionflux::GeoUtils::VectorSet&
	    name = newData
	    desc = Data
	}
	param[] = {
	    type = int
	    name = useNumElements
	    desc = Number of vector elements to be used
	    default = 0
	}
	param[] = {
	    type = float
	    name = defaultValue
	    desc = Default value
	    default = 0.
	}
	impl = <<<
unsigned int n0 = newData.getNumVectors();
if (n0 == 0)
    return;
if (useNumElements <= 0)
{
    Vector* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVector(0), this, "setData", "Vector");
    useNumElements = v0->getNumElements();
}
GLsizei n1 = n0 * useNumElements * sizeof(GLfloat);
GLfloat* d0 = static_cast<GLfloat*>(data);
if ((d0 == 0)
    || (n1 > dataSize))
{
    // allocate new buffer
    cleanupData();
    d0 = new GLfloat[n0 * useNumElements];
    dataSize = n1;
    setData(d0);
    setDataType(DATA_TYPE_FLOAT);
}
for (unsigned int i = 0; i < n0; i++)
{
    Vector* v0 = Ionflux::ObjectBase::nullPointerCheck(
        newData.getVector(i), this, "setData", "Vertex");
    unsigned int n2 = v0->getNumElements();
    for (int j = 0; j < useNumElements; j++)
    {
        if (static_cast<unsigned int>(j) < n2)
            d0[useNumElements * i + j] = v0->getElement(j);
        else
            d0[useNumElements * i + j] = defaultValue;
    }
}
setNumElements(n0);
setElementSize(useNumElements);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::Altjira::ColorSet&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.getNumColors();
if (n0 == 0)
    return;
GLsizei n1 = n0 * 4 * sizeof(GLfloat);
GLfloat* d0 = static_cast<GLfloat*>(data);
if ((d0 == 0)
    || (n1 > dataSize))
{
    // allocate new buffer
    cleanupData();
    d0 = new GLfloat[n0 * 4];
    dataSize = n1;
    setData(d0);
    setDataType(DATA_TYPE_FLOAT);
}
for (unsigned int i = 0; i < n0; i++)
{
    Ionflux::Altjira::Color* c0 = 
        Ionflux::ObjectBase::nullPointerCheck(
            newData.getColor(i), this, "setData", "Color");
    d0[4 * i] = c0->getRed();
    d0[4 * i + 1] = c0->getGreen();
    d0[4 * i + 2] = c0->getBlue();
    d0[4 * i + 3] = c0->getAlpha();
}
setNumElements(n0);
setElementSize(4);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data for the vertex attribute.
	param[] = {
	    type = const Ionflux::ObjectBase::UIntVector&
	    name = newData
	    desc = Data
	}
	impl = <<<
unsigned int n0 = newData.size();
if (n0 == 0)
    return;
GLsizei n1 = n0 * sizeof(GLuint);
GLuint* d0 = static_cast<GLuint*>(data);
if ((d0 == 0)
    || (n1 > dataSize))
{
    // allocate new buffer
    cleanupData();
    d0 = new GLuint[n0];
    dataSize = n1;
    setData(d0);
    setDataType(DATA_TYPE_UINT);
}
for (unsigned int i = 0; i < n0; i++)
    d0[i] = newData[i];
setNumElements(n0);
setElementSize(1);
>>>
}
function.public[] = {
	spec = virtual
	type = float
	name = getFloat
	shortDesc = Get data (float)
	longDesc = Get the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	    default = 0
	}
	impl = <<<
if (dataType != DATA_TYPE_FLOAT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "getFloat"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getData"));
}
GLfloat* d0 = static_cast<GLfloat*>(data);
>>>
    return = {
        value = d0[elementIndex * elementSize + componentIndex]
        desc = Data value
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setData
	shortDesc = Set data
	longDesc = Set the data value with the specified element and component index.
	param[] = {
	    type = unsigned int
	    name = elementIndex
	    desc = Element index
	}
	param[] = {
	    type = unsigned int
	    name = componentIndex
	    desc = Component index
	}
	param[] = {
	    type = float
	    name = value
	    desc = Value
	}
	impl = <<<
if (dataType != DATA_TYPE_FLOAT)
{
    std::ostringstream status;
    status << "Data type mismatch (dataType = " 
        << getDataTypeString(dataType) << ").";
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (elementIndex >= numElements)
{
    std::ostringstream status;
    status << "Element index out of bounds: " << elementIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
if (componentIndex >= elementSize)
{
    std::ostringstream status;
    status << "Component index out of bounds: " << componentIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setData"));
}
GLfloat* d0 = static_cast<GLfloat*>(data);
d0[elementIndex * elementSize + componentIndex] = value;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = draw
	shortDesc = Draw
	longDesc = Draw primitives. If \c drawNumPrimitives is 0, the maximum possible number of primitives of the specified type will be drawn. Otherwise, the specified number of primitives, up to the maximum possible, will be drawn. If \c startIndex is not 0, primitives will be drawn starting from the primitive with index \c startIndex.
	param[] = {
	    type = Ionflux::GeoUtils::PrimitiveID
	    name = primitiveID
	    desc = Primitive ID
	}
	param[] = {
	    type = unsigned int
	    name = drawNumPrimitives
	    desc = Number of primitives to be drawn
	    default = 0
	}
	param[] = {
	    type = unsigned int
	    name = startIndex
	    desc = Start index
	    default = 0
	}
	impl = <<<
unsigned int numElementsPerPrimitive = 
    getNumElementsPerPrimitive(primitiveID);
unsigned int maxDrawNumPrimitives = numElements 
    / numElementsPerPrimitive;
if ((startIndex >= maxDrawNumPrimitives)
    || (maxDrawNumPrimitives == 0))
    return;
if ((drawNumPrimitives == 0) 
    || ((startIndex + drawNumPrimitives) > maxDrawNumPrimitives))
    drawNumPrimitives = maxDrawNumPrimitives - startIndex;
GLenum target = getOpenGLTarget();
GLenum mode = getOpenGLPrimitive(primitiveID);
if (target == GL_ARRAY_BUFFER)
{
    // draw array elements
    glDrawArrays(mode, numElementsPerPrimitive * startIndex, 
        numElementsPerPrimitive * drawNumPrimitives);
} else
if (target == GL_ELEMENT_ARRAY_BUFFER)
{
    // draw indexed elements
    bind();
    glDrawElements(mode, 
        numElementsPerPrimitive * drawNumPrimitives, 
        getOpenGLDataType(dataType), 
        reinterpret_cast<const void*>(
            numElementsPerPrimitive * startIndex));
} else
{
    throw GeoUtilsError(getErrorString(
        "Unknown OpenGL buffer target.", "draw"));
}
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << "dataType = " << getDataTypeString(dataType) 
    << ", numElements = " << numElements 
    << ", elementSize = " << elementSize 
    << ", normalized = " << normalized;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = std::string
	name = getDataTypeString
	shortDesc = Get data type string
	longDesc = Get a string representation for a vertex attribute data type ID.
    param[] = {
        type = Ionflux::GeoUtils::VertexAttributeDataTypeID
        name = dataType
        desc = data type
    }
	impl = <<<
if (dataType == DATA_TYPE_FLOAT)
    return "float";
if (dataType == DATA_TYPE_UINT)
    return "uint";
>>>
    return = {
        value = "<unknown>"
        desc = String representation
    }
}
function.public[] = {
	spec = static
	type = unsigned int
	name = getNumElementsPerPrimitive
	shortDesc = Get number of elements per primitive
	longDesc = Get the number of elements per primitive of the specified type.
    param[] = {
        type = Ionflux::GeoUtils::PrimitiveID
	    name = primitive
	    desc = Primitive ID
    }
	impl = <<<
if (primitive == PRIMITIVE_POINT)
    return 1;
if (primitive == PRIMITIVE_LINE)
    return 2;
if (primitive == PRIMITIVE_TRIANGLE)
    return 3;
std::ostringstream status;
status << "[VertexAttribute::getNumElementsPerPrimitive] "
    "Invalid primitive ID: " << primitive;
throw GeoUtilsError(status.str());
>>>
    return = {
        value = 0
        desc = Number of elements per primitive
    }
}
function.public[] = {
    bindings.disable = true
	spec = static
	type = GLenum
	name = getOpenGLBufferUsage
	shortDesc = Get OpenGL buffer usage value
	longDesc = Get an OpenGL buffer usage value.
    param[] = {
        type = Ionflux::GeoUtils::BufferUsageID
        name = usage
        desc = OpenGL buffer usage ID
    }
	impl = <<<
// TODO: Maybe move this out of VertexAttribute.
if (usage == USAGE_STREAM_DRAW)
    return GL_STREAM_DRAW;
if (usage == USAGE_STREAM_READ)
    return GL_STREAM_READ;
if (usage == USAGE_STREAM_COPY)
    return GL_STREAM_COPY;
if (usage == USAGE_STATIC_DRAW)
    return GL_STATIC_DRAW;
if (usage == USAGE_STATIC_READ)
    return GL_STATIC_READ;
if (usage == USAGE_STATIC_COPY)
    return GL_STATIC_COPY;
if (usage == USAGE_DYNAMIC_DRAW)
    return GL_DYNAMIC_DRAW;
if (usage == USAGE_DYNAMIC_READ)
    return GL_DYNAMIC_READ;
if (usage == USAGE_DYNAMIC_COPY)
    return GL_DYNAMIC_COPY;
std::ostringstream status;
status << "[VertexAttribute::getOpenGLBufferUsage] "
    "Invalid buffer usage ID: " << usage;
throw GeoUtilsError(status.str());
>>>
    return = {
        value = 0
        desc = OpenGL buffer usage value
    }
}
function.public[] = {
    bindings.disable = true
	spec = static
	type = GLenum
	name = getOpenGLDataType
	shortDesc = Get OpenGL data type
	longDesc = Get an OpenGL data type.
    param[] = {
        type = Ionflux::GeoUtils::VertexAttributeDataTypeID
        name = dataType
        desc = OpenGL buffer usage ID
    }
	impl = <<<
// TODO: Maybe move this out of VertexAttribute.
if (dataType == DATA_TYPE_FLOAT)
    return GL_FLOAT;
if (dataType == DATA_TYPE_UINT)
    return GL_UNSIGNED_INT;
std::ostringstream status;
status << "[VertexAttribute::getOpenGLDataType] "
    "Invalid vertex attribute data type ID: " << dataType;
throw GeoUtilsError(status.str());
>>>
    return = {
        value = 0
        desc = OpenGL buffer usage value
    }
}
function.public[] = {
    bindings.disable = true
	spec = static
	type = GLenum
	name = getOpenGLPrimitive
	shortDesc = Get OpenGL primitive
	longDesc = Get an OpenGL primitive.
    param[] = {
        type = Ionflux::GeoUtils::PrimitiveID
        name = primitive
        desc = Primitive ID
    }
	impl = <<<
// TODO: Maybe move this out of VertexAttribute.
if (primitive == PRIMITIVE_POINT)
    return GL_POINTS;
if (primitive == PRIMITIVE_LINE)
    return GL_LINES;
if (primitive == PRIMITIVE_TRIANGLE)
    return GL_TRIANGLES;
std::ostringstream status;
status << "[VertexAttribute::getOpenGLPrimitive] "
    "Invalid primitive ID: " << primitive;
throw GeoUtilsError(status.str());
>>>
    return = {
        value = 0
        desc = OpenGL primitive
    }
}

# Pure virtual member functions.

# operations

# Global functions.

