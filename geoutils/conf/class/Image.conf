# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2012 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Image.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"altjira/Matrix.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Polygon3Set.hpp"'
        '"geoutils/SVG.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<cairo.h>'
        '<librsvg/rsvg.h>'
        '<librsvg/rsvg-cairo.h>'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/ImagePattern.hpp"'
        '"altjira/BlendSrcOver.hpp"'
        '"geoutils/imageutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/BoxBoundsItem.hpp"'
        '"geoutils/BoundingBox.hpp"'
        '"geoutils/Voxel.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Image
	shortDesc = Image
	title = Image
	longDesc = A bitmap image with support for GeoUtils features.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::Drawable
            include = altjira/Drawable.hpp
            hasClassInfo = true
        }
        other[] = {
            name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::Vector3
    name = TANGENT_VECTORS[3][3]
    desc = tangent vectors for the 9 neighbouring pixel directions
    value = \{\
    \{ Ionflux::GeoUtils::Vector3(-1, 1, 0), \
       Ionflux::GeoUtils::Vector3(0, 1, 0), \
       Ionflux::GeoUtils::Vector3(1, 1, 0) \}, \
    \{ Ionflux::GeoUtils::Vector3(-1, 0, 0), \
       Ionflux::GeoUtils::Vector3(0, 0, 0), \
       Ionflux::GeoUtils::Vector3(1, 0, 0) \}, \
    \{ Ionflux::GeoUtils::Vector3(-1, -1, 0), \
       Ionflux::GeoUtils::Vector3(0, -1, 0), \
       Ionflux::GeoUtils::Vector3(1, -1, 0) \} \
\}
}

# Public constructors.
constructor.copy.impl = Ionflux::Altjira::init();\
*this = other;
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Drawable
        value = fileName
    }
	param[] = {
		type = const std::string&
		name = fileName
		desc = File name of an image to be loaded
	}
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Drawable
        value = initImage
    }
	param[] = {
		type = const Ionflux::Altjira::Image&
		name = initImage
		desc = Image
	}
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Drawable
        value = initDrawable
    }
	param[] = {
		type = const Ionflux::Altjira::Drawable&
		name = initDrawable
		desc = Drawable
	}
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Drawable
        value = initWidth, initHeight, initAlpha, initBitsPerSample, initColorSpace
    }
	param[] = {
		type = unsigned int
		name = initWidth
		desc = Width
	}
	param[] = {
		type = unsigned int
		name = initHeight
		desc = Height
	}
	param[] = {
		type = bool
		name = initAlpha
		desc = Create alpha channel
        default = true
	}
	param[] = {
		type = unsigned int
		name = initBitsPerSample
		desc = Bits pers sample
        default = 8
	}
	param[] = {
		type = Ionflux::Altjira::ColorSpace
		name = initColorSpace
		desc = Color space
        default = Ionflux::Altjira::Color::SPACE_RGB
	}
    impl = 
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range3
	name = getImageBounds
	shortDesc = Get image bounds
	longDesc = Get the bounds of the (untransformed) image.
	impl = Range3 result;\
result.setBounds(Vector3::ZERO);\
result.extend(Vector3(width, height, 0.));
	return = {
	    value = result
	    desc = Bounds of the image
	}
}
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = Recalculate bounds
	longDesc = Recalculate the bounds for the image.
	impl = TransformableObject::recalculateBounds();\
if (!useTransform && !useVI)\
\{\
    *boundsCache = getImageBounds();\
    return;\
\}\
// Adjust for transformation.\
/* TODO: Set bounds cache to transformed image bounds.\
         (This is unfortunately not trivial. For now, we just use \
          a box polygon and apply the transformation. \) */\
Range3 b0 = getImageBounds();\
Polygon3* p0 = Polygon3::square();\
/* The polygon is created in the XZ-plane by default, but we need it \
   to be in the XY-plane. */\
p0->rotate(0.5 * M_PI, AXIS_X);\
// Transform the polygon to match the bounds of the SVG.\
p0->scale(Vector3(2. * b0.getX().getRadius(), \
    2. * b0.getY().getRadius(), 1.));\
p0->translate(b0.getCenter());\
// Apply the transformations.\
if (useTransform)\
    p0->transform(transformMatrix);\
// NOTE: VI transform is not supported for SVG objects.\
p0->applyTransform();\
*boundsCache = p0->getBounds();\
delete p0;
}

# Public member functions.
function.copy.impl = Ionflux::Altjira::Drawable::operator=(other);\
Ionflux::GeoUtils::TransformableObject::operator=(other);
function.public[] = {
    spec = virtual
    type = void
    name = drawPolygons
    shortDesc = Draw polygons
    longDesc = Draw polygons to the image. The origin is by default translated to the center of the image.
    param[] = {
        type = Ionflux::GeoUtils::Polygon3Set&
        name = polygons
        desc = Polygons
    }
    param[] = {
        type = const Ionflux::GeoUtils::SVGShapeStyleVector*
        name = styles
        desc = Element styles
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
    param[] = {
        type = bool
        name = closePath
        desc = Close path
        default = true
    }
    param[] = {
        type = int
        name = originX
        desc = Coordinate origin (X)
        default = 0
    }
    param[] = {
        type = int
        name = originY
        desc = Coordinate origin (Y)
        default = 0
    }
    impl = if (!drawingInProgress())\
    throw GeoUtilsError("[Image::renderPolygons] " \
        "No drawing operation in progress!");\
AxisID oa[2];\
if (axis == AXIS_Y)\
\{\
    oa[0] = AXIS_X;\
    oa[1] = AXIS_Z;\
\} else\
if (axis == AXIS_X)\
\{\
    oa[0] = AXIS_Y;\
    oa[1] = AXIS_Z;\
\} else\
if (axis == AXIS_Z)\
\{\
    oa[0] = AXIS_X;\
    oa[1] = AXIS_Y;\
\} else\
\{\
    ostringstream message;\
    message << "[Image::renderPolygons] Invalid axis: " << axis;\
    throw GeoUtilsError(message.str());\
\}\
// Set up transformations.\
cairo_save(context);\
cairo_translate(context, 0.5 * width + originX, 0.5 * height + originY);\
cairo_scale(context, 1., -1.);\
// Render the polygons.\
polygons.applyTransform(true);\
unsigned int numStyles = 0;\
if (styles != 0)\
    numStyles = styles->size();\
for (unsigned int i = 0; i < polygons.getNumPolygons(); i++)\
\{\
    Polygon3* p0 = polygons.getPolygon(i);\
    /* <---- DEBUG ----- //\
    ostringstream message;\
    message << "Rendering polygon: " << (*p0);\
    log(IFLogMessage(message.str(), VL_DEBUG, this, \
        "renderPolygons"));\
    // ----- DEBUG ----> */\
    // Create the path.\
    for (unsigned int k = 0; k < p0->getNumVertices(); k++)\
    \{\
        Vertex3* v0 = p0->getVertex(k);\
        /* <---- DEBUG ----- //\
        message.str("");\
        message << "Processing vertex: " << (*v0);\
        log(IFLogMessage(message.str(), VL_DEBUG, this, \
            "renderPolygons"));\
        // ----- DEBUG ----> */\
        double x0 = v0->getCoord(oa[0]);\
        double y0 = v0->getCoord(oa[1]);\
        if (k == 0)\
            cairo_move_to(context, x0, y0);\
        else\
            cairo_line_to(context, x0, y0);\
    \}\
    if (closePath)\
        cairo_close_path(context);\
    const SVGShapeStyle* style = &DEFAULT_SHAPE_STYLE;\
    if ((styles != 0) \
        && (styles->size() > 0))\
        style = (*styles)[i % numStyles];\
    // Fill the path.\
    if ((style->color.size() > 0) \
        && (style->color != "none"))\
    \{\
        Ionflux::Altjira::Color fillColor(style->color);\
        cairo_set_source_rgba(context, fillColor.getRed(), \
            fillColor.getGreen(), fillColor.getBlue(), \
            style->fillOpacity);\
        cairo_fill_preserve(context);\
    \}\
    if (style->strokeWidth > 0.)\
    \{\
        // Stroke the path.\
        Ionflux::Altjira::Color strokeColor(style->strokeColor);\
        cairo_set_source_rgba(context, strokeColor.getRed(), \
            strokeColor.getGreen(), strokeColor.getBlue(), \
            style->strokeOpacity);\
        cairo_set_line_width(context, style->strokeWidth);\
        cairo_set_miter_limit(context, style->strokeMiterLimit);\
        cairo_stroke(context);\
    \} else\
        cairo_new_path(context);\
\}\
cairo_restore(context);
}
function.public[] = {
    spec = virtual
    type = void
    name = drawSVG
    shortDesc = Draw SVG object
    longDesc = Draw an SVG object to the image. The origin is by default translated to the center of the image.
    param[] = {
        type = Ionflux::GeoUtils::SVG&
        name = svg
        desc = SVG object
    }
    param[] = {
        type = int
        name = originX
        desc = Coordinate origin (X)
        default = 0
    }
    param[] = {
        type = int
        name = originY
        desc = Coordinate origin (Y)
        default = 0
    }
    impl = if (!drawingInProgress())\
    throw GeoUtilsError("[Image::renderSVG] " \
        "No drawing operation in progress!");\
cairo_save(context);\
// Set up transformations.\
cairo_translate(context, 0.5 * width + originX, 0.5 * height + originY);\
// Render the SVG.\
rsvg_init();\
RsvgHandle* rsvg0 = 0;\
std::string source = svg.getSource();\
if (svg.getType() == SVG::TYPE_DATA)\
    rsvg0 = rsvg_handle_new_from_data(\
        reinterpret_cast<const guint8*>(source.c_str()), \
        source.size(), 0);\
else\
if (svg.getType() == SVG::TYPE_FILE)\
    rsvg0 = rsvg_handle_new_from_file(\
        reinterpret_cast<const gchar*>(source.c_str()), 0);\
else\
\{\
    std::ostringstream status;\
    status << "[Image::renderSVG] Invalid SVG source type " \
        "for rendering (" << svg.getType() << ")!";\
    throw GeoUtilsError(status.str());\
\}\
if (rsvg0 == 0)\
\{\
    throw GeoUtilsError("[Image::renderSVG] "\
        "Could not create RSVG handle!");\
\}\
if (svg.checkTransform())\
\{\
    // Apply the transformation of the SVG object.\
    Matrix4 t0 = svg.getTransformMatrix();\
    cairo_matrix_t ct0;\
    cairo_matrix_init(&ct0, \
        t0.getElement(0, 0), t0.getElement(1, 0), \
        t0.getElement(0, 1), t0.getElement(1, 1), \
        t0.getElement(0, 3), t0.getElement(1, 3));\
    cairo_transform(context, &ct0);\
\}\
if (!rsvg_handle_render_cairo(rsvg0, context))\
\{\
    g_object_unref(rsvg0);\
    throw GeoUtilsError("[Image::renderSVG] "\
        "Could not render SVG to cairo context!");\
\}\
g_object_unref(rsvg0);\
cairo_restore(context);
}
function.public[] = {
    spec = virtual
    type = void
    name = drawImage
    shortDesc = Draw image
    longDesc = Draw a source image to the image. The origin is by default translated to the center of the image. The source image will be referenced.
    param[] = {
        type = Ionflux::GeoUtils::Image*
        name = image
        desc = Source image
    }
    param[] = {
        type = int
        name = originX
        desc = Coordinate origin (X)
        default = 0
    }
    param[] = {
        type = int
        name = originY
        desc = Coordinate origin (Y)
        default = 0
    }
    impl = if (!drawingInProgress())\
    throw GeoUtilsError("[Image::renderSVG] " \
        "No drawing operation in progress!");\
cairo_save(context);\
// Set up transformations.\
cairo_translate(context, 0.5 * width + originX, 0.5 * height + originY);\
// Render the image.\
addLocalRef(image);\
ImagePattern p0(image, 0, 0);\
if (image->checkTransform())\
\{\
    // Apply the transformation of the image object.\
    Matrix4 t0 = image->getTransformMatrix();\
    cairo_matrix_t ct0;\
    cairo_matrix_init(&ct0, \
        t0.getElement(0, 0), t0.getElement(1, 0), \
        t0.getElement(0, 1), t0.getElement(1, 1), \
        t0.getElement(0, 3), t0.getElement(1, 3));\
    cairo_transform(context, &ct0);\
    /* NOTE: If the source is set at this point, no transformation \
             is required for the pattern at all. */\
    setSource(p0);\
\}\
Range3 r0 = image->getImageBounds();\
cairo_rectangle(context, r0.getX().getRMin(), r0.getY().getRMin(), \
    2. * r0.getX().getRadius(), 2. * r0.getY().getRadius());\
cairo_fill(context);\
cairo_restore(context);\
removeLocalRef(image);
}
function.public[] = {
	spec = virtual
	type = void
	name = valueToNormal
	const = true
	shortDesc = Create normal map from heightmap
	longDesc = Create a normal map from a heightmap (encoded by value).
	param[] = {
		type = Ionflux::Altjira::Image&
		name = target
		desc = target image
	}
	param[] = {
		type = double
		name = maxHeight
		desc = maximum height
	}
    impl = if ((target.getWidth() < width) \
    || (target.getHeight() < height))\
    throw GeoUtilsError("[Image::valueToNormal] "\
        "Target image too small.");\
for (unsigned int x = 0; x < width; x++)\
    for (unsigned int y = 0; y < height; y++)\
    \{\
        FloatColor ps;\
        ps.space = Ionflux::Altjira::Color::SPACE_HSV;\
        getPixel(x, y, ps);\
        double v0 = ps.c2;\
        Vector3 r(0., 0., 0.);\
        double v = 0;\
        // check neighbor pixels\
        for (int xs = static_cast<int>(x) - 1; \
            xs < static_cast<int>(x) + 2; xs++)\
            for (int ys = static_cast<int>(y) - 1; \
                ys < static_cast<int>(y) + 2; ys++)\
            \{\
                if ((xs >= 0) && (xs < static_cast<int>(width)) \
                    && (ys >= 0) && (ys < static_cast<int>(height)))\
                \{\
                    // use neighbor pixel value\
                    getPixel(xs, ys, ps);\
                    v = ps.c2;\
                \} else\
                    // use center pixel value\
                    v = v0;\
                if ((xs != static_cast<int>(x)) \
                    && (ys != static_cast<int>(y)))\
                \{\
                    /* neighbor pixel\
                       get the gradient vector\
                       (y needs to be flipped because of image \
                       coordinates) */\
                    double dx = static_cast<double>(xs) - x;\
                    double dy = y - static_cast<double>(ys);\
                    Vector3 g(dx, dy, (v - v0) * maxHeight);\
                    Vector3 tx(TANGENT_VECTORS[xs - x + 1][y - ys + 1]);\
                    /* <---- DEBUG ----- //\
                    std::cerr << "[Image::valueToNormal] DEBUG: "\
                        "pos = (" << x << ", " << y << "), "\
                        "s = (" << xs << ", " << ys << ") "\
                        "g = " << g.getString() \
                        << ", tx = " << tx.getString() << std::endl;\
                    // ----- DEBUG ----> */\
                    // calculate the normal vector\
                    Vector3 dn(tx.cross(g));\
                    r += dn;\
                \}\
            \}\
        Vector3 n((r / 8.).normalize());\
        FloatColor nc;\
        nc.space = Ionflux::Altjira::Color::SPACE_RGB;\
        normalToColor(n, nc);\
        target.setPixel(x, y, nc);\
        /* <---- DEBUG ----- //\
        std::cerr << "[Image::valueToNormal] DEBUG: "\
            "pos = (" << x << ", " << y << ") "\
            "n = " << n.getString() << ", r = " << r.getString() \
            << ", c = " << Ionflux::Altjira::getString(nc) << std::endl;\
        // ----- DEBUG ----> */\
    \}
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = drawTranslate
	shortDesc = Translate (drawing operation)
	longDesc = Translate the coordinate origin.
	param[] = {
        type = double
        name = tx
        desc = Translation (X)
	}
	param[] = {
        type = double
        name = ty
        desc = Translation (Y)
	}
    impl = Altjira::Drawable::translate(tx, ty);
}
function.public[] = {
	spec = virtual
	type = void
	name = drawScale
	shortDesc = Scale (drawing operation)
	longDesc = Scale the coordinate system.
	param[] = {
        type = double
        name = sx
        desc = Scale factor (X)
	}
	param[] = {
        type = double
        name = sy
        desc = Scale factor (Y)
	}
	impl = Altjira::Drawable::scale(sx, sy);
}
function.public[] = {
	spec = virtual
	type = void
	name = drawRotate
	shortDesc = Rotate (drawing operation)
	longDesc = Rotate the coordinate system.
	param[] = {
        type = double
        name = phi
        desc = Rotation angle
	}
	impl = Altjira::Drawable::rotate(phi);
}
function.public[] = {
    spec = virtual
    type = void
    name = setDrawingMatrix
    shortDesc = Set drawing matrix
    longDesc = Set the transform matrix to be used for drawing.
    param[] = {
        type = const Ionflux::GeoUtils::Matrix4&
        name = m
        desc = Matrix
    }
    impl = if (!drawingInProgress())\
    throw GeoUtilsError("[Image::setDrawingMatrix] " \
        "No drawing operation in progress!");\
cairo_matrix_t ct0;\
cairo_matrix_init(&ct0, \
    m.getElement(0, 0), m.getElement(1, 0), \
    m.getElement(0, 1), m.getElement(1, 1), \
    m.getElement(0, 3), m.getElement(1, 3));\
cairo_transform(context, &ct0);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the image.
	impl = if (boundsCache == 0)\
    recalculateBounds();
    return = {
        value = boundsCache->getCenter()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Image&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = 
    return = {
        value = Drawable::getString()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = getValueMatrix
	shortDesc = Get value matrix
	longDesc = Get a matrix of pixel values.
	param[] = {
	    type = Ionflux::Altjira::Matrix&
	    name = target
	    desc = target matrix
	}
    impl = target.init(height, width);\
Ionflux::Altjira::ByteColor sc;\
for (unsigned int x = 0; x < width; x++)\
    for (unsigned int y = 0; y < height; y++)\
    \{\
        PixelData p = pixels + y * rowStride + x * numChannels;\
        sc.c0 = p[0];\
        sc.c1 = p[1];\
        sc.c2 = p[2];\
        sc.alpha = p[3];\
        sc.space = Ionflux::Altjira::Color::SPACE_RGB;\
        toColorSpace(sc, Ionflux::Altjira::Color::SPACE_HSV);\
        target.setValue(y, x, byteToFloat(sc.c2));\
    \}
}
function.public[] = {
	spec = virtual
	type = void
	name = setValueMatrix
	shortDesc = Set value matrix
	longDesc = Set pixel values according to values from the specified matrix.
	param[] = {
	    type = const Ionflux::Altjira::Matrix&
	    name = m
	    desc = matrix
	}
    impl = Ionflux::Altjira::FloatColor tc0;\
Ionflux::Altjira::ByteColor tc1;\
if ((m.getNumRows() < height) \
    || (m.getNumCols() < width))\
    throw GeoUtilsError("[Image::setValueMatrix] "\
        "Matrix is too small.");\
for (unsigned int x = 0; x < width; x++)\
    for (unsigned int y = 0; y < height; y++)\
    \{\
        double v0 = m.v(y, x);\
        tc0.c0 = 0.;\
        tc0.c1 = 0.;\
        tc0.c2 = v0;\
        tc0.alpha = 1.;\
        tc0.space = Ionflux::Altjira::Color::SPACE_HSV;\
        toRGB(tc0);\
        floatToByte(tc0, tc1);\
        PixelData p = pixels + y * rowStride + x * numChannels;\
        p[0] = tc1.c0;\
        p[1] = tc1.c1;\
        p[2] = tc1.c2;\
        p[3] = tc1.alpha;\
    \}
}
function.public[] = {
	spec = virtual
	type = void
	name = getPixelTree
	shortDesc = Get pixel AABB tree
	longDesc = Get an AABB tree containing references to the image pixels. The pixel items will be stored as voxels of size 1 in in the target bounding box.
	param[] = {
	    type = Ionflux::GeoUtils::BoundingBox*
	    name = target
	    desc = target bounding box
	}
    impl = Vector3 o0(0.5, 0.5, 0.);\
    Vector3 i0(Vector3::ZERO);\
for (unsigned int i = 0; i < width; i++)\
    for (unsigned int j = 0; j < height; j++)\
    \{\
        i0.setElements(i, j, 0);\
        Voxel* v0 = Voxel::create(i0, 1., o0);\
        target->addItem(v0);\
    \}
}
function.public[] = {
	spec = virtual
	type = void
	name = markPixels
	shortDesc = Mark pixels
	longDesc = Mark pixels that are in the specified box bounds item set (as voxels).
	param[] = {
	    type = Ionflux::GeoUtils::BoxBoundsItemSet&
	    name = markPixels
	    desc = pixels to be marked
	}
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = color
		desc = Color
		default = Ionflux::Altjira::Color::BLUE
	}
	param[] = {
		type = const Ionflux::Altjira::ColorBlender*
		name = blender
		desc = Color blender
        default = 0
	}
    impl = bool ownBlender = false;\
bool useComp = false;\
if (color.getAlpha() != 1)\
\{\
    // use compositing.\
    useComp = true;\
    if (blender == 0)\
    \{\
        blender = Ionflux::Altjira::BlendSrcOver::create();\
        ownBlender = true;\
    \}\
\}\
for (BoxBoundsItemSet::iterator i = markPixels.begin(); \
    i != markPixels.end(); i++)\
\{\
    Voxel* v0 = dynamic_cast<Voxel*>(*i);\
    if (v0 == 0)\
    \{\
        std::ostringstream status;\
        status << "[Image::markPixels] "\
            "Item is not a voxel: " << (*i)->getString();\
        throw GeoUtilsError(status.str());\
    \}\
    Vector3 pos(v0->getCenter());\
    unsigned int x0 = static_cast<unsigned int>(pos.getX0());\
    unsigned int y0 = static_cast<unsigned int>(pos.getX1());\
    /* <---- DEBUG ----- //\
    std::cerr << "[Image::markPixels] DEBUG: "\
        "marking (" << x0 << ", " << y0 << ")" << std::endl;\
    // ----- DEBUG ----> */\
    ByteColor sc0;\
    sc0.space = Ionflux::Altjira::Color::SPACE_RGB;\
    color.getByteColor(sc0);\
    ByteColor rc0;\
    rc0.space = Ionflux::Altjira::Color::SPACE_RGB;\
    if (!useComp)\
        rc0 = sc0;\
    else\
    {\
        ByteColor tc0;\
        tc0.space = Ionflux::Altjira::Color::SPACE_RGB;\
        getPixel(x0, y0, tc0);\
        blender->blend(rc0, sc0, tc0, 255, 255);\
    \}\
    setPixel(x0, y0, rc0);\
\}\
if (ownBlender)\
    delete blender;
}

# Pure virtual member functions.

# operations

# Global functions.

