# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Scale.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Scale
	shortDesc = Transform node: Scale
	title = Transform node: Scale
	longDesc = Scale elements from the input group. The scale vector is the sum of the constant scale vector and the vectors resulting from the input mappings, if specified. The index mapping maps the interval [0...1] to the interval [0...1]^3 and controls the scale factor depending on the index of the input element, where the indices are mapped to the interval depending on the total number of elements. The distance mapping maps an interval of distances to the interval [0...1]^3 and controls the scale factor depending on the distance of the element barycenter from the coordinate origin. For both mappings, the resulting value in the range [0...1]^3 is translated to an offset vector in the range specified for that mapping, where a mapping output value of 0 corresponds to the lower bound of the corresponding range and a mapping output value of 1 corresponds to the upper bound of that range. The centering method determines the center of scaling. If \c CENTER_ORIGIN is used, all elements are scaled around the origin. For \c CENTER_BARYCENTER and \c CENTER_BOUNDS, elements are scaled around individual element centers determined using the specified method.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
        'param'
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = Param
        notExistsError = GeoUtilsError(std::string("Parameter '") \
        + paramID + "' does not exist.")
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = scale
	desc = Scale vector
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = indexFunc
	desc = Index mapping function
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = distanceFunc
	desc = Distance mapping function
	managed = true
}
#property.protected[] = {
#	type = Ionflux::GeoUtils::Range3
#	setFromType = const Ionflux::GeoUtils::Range3&
#	name = indexRange
#	desc = Index scale range
#}
#property.protected[] = {
#	type = Ionflux::GeoUtils::Range3
#	setFromType = const Ionflux::GeoUtils::Range3&
#	name = distanceRange
#	desc = Distance scale range
#}
property.protected[] = {
	type = Ionflux::GeoUtils::CenteringMethod
	setFromType = Ionflux::GeoUtils::CenteringMethod
	name = centeringMethod
	desc = Centering method
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = scaleFactor
	desc = Scale factor (all axes)
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = deltaScaleFactor
	desc = Delta scale factor (all axes)
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}
#constant.public[] = {
#    type = Ionflux::GeoUtils::Range3
#    name = DEFAULT_SCALE_RANGE
#    desc = Default scale range
#    value = Ionflux::GeoUtils::Range3(.1, 1., .1, 1., .1, 1.)
#}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = scale
        value = 1., 1. ,1.
    }
    initializer[] = {
        name = indexFunc
        value = 0
    }
    initializer[] = {
        name = distanceFunc
        value = 0
    }
#    initializer[] = {
#        name = indexRange
#        value = DEFAULT_SCALE_RANGE
#    }
#    initializer[] = {
#        name = distanceRange
#        value = DEFAULT_SCALE_RANGE
#    }
    initializer[] = {
        name = centeringMethod
        value = CENTER_ORIGIN
    }
    initializer[] = {
        name = scaleFactor
        value = 1.
    }
    initializer[] = {
        name = deltaScaleFactor
        value = 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = scale
        value = initScale
    }
    initializer[] = {
        name = indexFunc
        value = 0
    }
    initializer[] = {
        name = distanceFunc
        value = 0
    }
#    initializer[] = {
#        name = indexRange
#        value = initIndexRange
#    }
#    initializer[] = {
#        name = distanceRange
#        value = initDistanceRange
#    }
    initializer[] = {
        name = centeringMethod
        value = initCenteringMethod
    }
    initializer[] = {
        name = scaleFactor
        value = initScaleFactor
    }
    initializer[] = {
        name = deltaScaleFactor
        value = initDeltaScaleFactor
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initScale
        desc = Scale vector
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initIndexFunc
        desc = Index mapping function
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initDistanceFunc
        desc = Distance mapping function
        default = 0
    }
#    param[] = {
#        type = Ionflux::GeoUtils::Range3
#        name = initIndexRange
#        desc = Index offset range
#        default = DEFAULT_SCALE_RANGE
#    }
#    param[] = {
#        type = Ionflux::GeoUtils::Range3
#        name = initDistanceRange
#        desc = Distance offset range
#        default = DEFAULT_SCALE_RANGE
#    }
    param[] = {
        type = Ionflux::GeoUtils::CenteringMethod
        name = initCenteringMethod
        desc = Centering method
        default = CENTER_ORIGIN
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initScaleFactor
        desc = Scale factor (all axes)
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initDeltaScaleFactor
        desc = Delta scale factor (all axes)
        default = 0.
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = setIndexFunc(initIndexFunc);\
setDistanceFunc(initDistanceFunc);
}

# Destructor.
#destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
setIndexFunc(other.indexFunc);\
setDistanceFunc(other.distanceFunc);
#indexRange = other.indexRange;\
#distanceRange = other.distanceRange;
scaleFactor = other.scaleFactor;\
deltaScaleFactor = other.deltaScaleFactor;\
centeringMethod = other.centeringMethod;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; ";\
if (indexFunc != 0)\
    status << indexFunc->getString();\
else\
    status << "<none>";\
if (distanceFunc != 0)\
    status << ", " << distanceFunc->getString();\
else\
    status << ", <none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
if ((centeringMethod == CENTER_ORIGIN) \
    && (indexFunc == 0) \
    && (distanceFunc == 0))\
    // All elements are scaled uniformly by the scale vector.\
    g0->scale(scaleFactor * scale);\
else\
\{\
    /* Since we are going to manipulate the individual elements, \
       any existing group transformations must be applied first. */\
    g0->applyTransform();\
    Vector3 c0;\
    // Scale elements individually according to the mappings.\
    unsigned int numSourceItems = g0->getNumItems();\
    /* <---- DEBUG ----- //\
    ostringstream message;\
    message << "numSourceItems = " << numSourceItems;\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    for (unsigned int i = 0; i < numSourceItems; i++)\
    \{\
        TransformableObject* o0 = g0->getItem(i);\
        /* <---- DEBUG ----- //\
        message.str("");\
        message << "Processing item #" << i;\
        log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
        // ----- DEBUG ----> */\
        // Calculate the total scale factor for the element.\
        /* <---- DEBUG ----- //\
        message.str("");\
        message << "scale = " << scale << ", scaleFactor = " << scaleFactor \
            << ", deltaScaleFactor = " << deltaScaleFactor;\
        log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
        // ----- DEBUG ----> */\
        Vector3 s0(scale);\
        s0 = (scaleFactor + i * deltaScaleFactor) * s0;\
        if (indexFunc != 0)\
        \{\
            // Multiply scaling according to index mapping.\
            /* NOTE: Not applying index range at this time since it \
                     does not really work as expected. */\
            Ionflux::Mapping::MappingValue t = static_cast<double>(i) \
                / (numSourceItems - 1);\
            Vector3 v0 = (*indexFunc)(t);\
            /* <---- DEBUG ----- //\
            message.str("");\
            message << "indexFunc(" << t << ") = " << v0;\
            log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
            // ----- DEBUG ----> */\
            s0 = s0.multElements(v0);\
        \}\
        if (distanceFunc != 0)\
        \{\
            // Multiply scaling according to distance mapping.\
            double r0 = o0->getBarycenter().norm();\
            s0 = s0.multElements((*distanceFunc)(r0));\
        \}\
        // Determine the center vector.\
        /* <---- DEBUG ----- //\
        log(IFLogMessage("Calculating scaling center...", VL_DEBUG, \
            this, "process"));\
        // ----- DEBUG ----> */\
        if (centeringMethod == CENTER_BOUNDS)\
            c0 = o0->getBounds().getCenter();\
        else\
        if (centeringMethod == CENTER_BARYCENTER)\
            c0 = o0->getBarycenter();\
        else\
            c0 = Vector3::ZERO;\
        // Scale the object.\
        /* <---- DEBUG ----- //\
        message.str("");\
        message << "Transforming object (s0 = " << s0 << ").";\
        log(IFLogMessage(message.str(), VL_DEBUG, \
            this, "process"));\
        // ----- DEBUG ----> */\
        o0->translate(c0.flip());\
        o0->scale(s0);\
        o0->translate(c0);\
    \}\
\}\
addOutput(g0);
}

# Pure virtual member functions.

# operations

# Global functions.

