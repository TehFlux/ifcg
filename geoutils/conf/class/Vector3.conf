# =================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# Vector3.conf              Class configuration.
# =================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	    '"ifmapping/Point.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/Vector2.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Plane3.hpp"'
        '"geoutils/Range.hpp"'
    }
}

# forward declarations
forward = {
    'class Plane3'
    'class Range'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vector3
	shortDesc = Vector (3 elements)
	title = Vector (3 elements)
	longDesc = A vector in three-dimensional space.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
		# other base classes
        other[] = {
			name = Ionflux::GeoUtils::Vector
            include = geoutils/Vector.hpp
            hasClassInfo = true
            xml = {
                enabled = true
                #getFunc = getVector
                include = geoutils/Vector
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = v3
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = x0
	desc = Element x0
    copy = true
    proxy = true
    impl = {
        set = elements[0] = newX0;
        get = return elements[0];
    }
}
property.protected[] = {
	type = double
	setFromType = double
	name = x1
	desc = Element x1
    copy = true
    proxy = true
    impl = {
        set = elements[1] = newX1;
        get = return elements[1];
    }
}
property.protected[] = {
	type = double
	setFromType = double
	name = x2
	desc = Element x2
    copy = true
    proxy = true
    impl = {
        set = elements[2] = newX2;
        get = return elements[2];
    }
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 3
}
constant.public[] = {
    desc = Zero vector
    type = Ionflux::GeoUtils::Vector3
    name = ZERO
    value = Ionflux::GeoUtils::Vector3(0., 0., 0.)
}
constant.public[] = {
    desc = Unit vector (X)
    type = Ionflux::GeoUtils::Vector3
    name = E_X
    value = Ionflux::GeoUtils::Vector3(1., 0., 0.)
}
constant.public[] = {
    desc = Unit vector (Y)
    type = Ionflux::GeoUtils::Vector3
    name = E_Y
    value = Ionflux::GeoUtils::Vector3(0., 1., 0.)
}
constant.public[] = {
    desc = Unit vector (Z)
    type = Ionflux::GeoUtils::Vector3
    name = E_Z
    value = Ionflux::GeoUtils::Vector3(0., 0., 1.)
}
constant.public[] = {
    desc = Sum of unit vectors
    type = Ionflux::GeoUtils::Vector3
    name = E_SUM
    value = Ionflux::GeoUtils::Vector3(1., 1., 1.)
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = zero();
}
constructor.public[] = {
    param[] = {
        name = initX0
        type = double
        desc = Element (X0)
    }
    param[] = {
        name = initX1
        type = double
        desc = Element (X1)
    }
    param[] = {
        name = initX2
        type = double
        desc = Element (X2)
    }
    impl = <<<
initElements();
elements[0] = initX0;
elements[1] = initX1;
elements[2] = initX2;
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Element vector
    }
    impl = <<<
initElements();
Vector::setElements(initElements0);
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::GeoUtils::Vector2&
        desc = Element vector
    }
    param[] = {
        name = initZ
        type = double
        desc = Z coordinate
        default = 1.
    }
    impl = <<<
initElements();
setV2(initElements0, initZ);
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::Mapping::Point&
        desc = Point
    }
    impl = <<<
initElements();
setElements(initElements0);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements of the vector.
	param[] = {
		type = double
		name = newX0
		desc = Element (x0)
	}
	param[] = {
		type = double
		name = newX1
		desc = Element (x1)
	}
	param[] = {
		type = double
		name = newX2
		desc = Element (x2)
	}
    impl = <<<
elements[0] = newX0;
elements[1] = newX1;
elements[2] = newX2;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a 2-element vector. The Z-coordinate will be left alone.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = newElements
		desc = Element vector
	}
    impl = <<<
elements[0] = newElements.getX0();
elements[1] = newElements.getX1();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a vector. The sizes of the target and source vectors may differ. In this case, only the relevant number of elements will be considered. The optional offsets may be specified to set a certain subset of elements.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
	param[] = {
		type = unsigned int
		name = sourceOffset
		desc = Source offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetOffset
		desc = Target offset
		default = 0
	}
    impl = Vector::setElements(other, sourceOffset, targetOffset);
}
function.public[] = {
	spec = virtual
	type = void
	name = setV2
	shortDesc = Set elements
	longDesc = Set elements from a 2-element vector. The Z-coordinate will be set to the optional second parameter (which defaults to 1).
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = newElements
		desc = Element vector
	}
	param[] = {
		type = double
		name = newZ
		desc = Z coordinate
        default = 1.
	}
    impl = <<<
setElements(newElements);
elements[2] = newZ;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a point.
	param[] = {
		type = const Ionflux::Mapping::Point&
		name = newElements
		desc = Point
	}
    impl = <<<
elements[0] = newElements.getX();
elements[1] = newElements.getY();
elements[2] = newElements.getZ();
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = flip
	const = true
	shortDesc = Flip vector
	longDesc = Create a new vector which is equal to the original vector multiplied by -1.
    impl = Vector3 result(*this);\
result.flipIP();
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = normalize
	const = true
	shortDesc = Normalize vector
	longDesc = Create a new vector which is equal to the normalized original vector.
    impl = Vector3 result(*this);\
result.normalizeIP();
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = cross
	const = true
	shortDesc = Cross product
	longDesc = Calculate the cross product of the vector and another vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = double x0 = elements[0];\
double x1 = elements[1];\
double x2 = elements[2];\
double y0 = other.elements[0];\
double y1 = other.elements[1];\
double y2 = other.elements[2];
	return = {
        value = Vector3(x1 * y2 - x2 * y1, \
    x2 * y0 - x0 * y2, \
    x0 * y1 - x1 * y0)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = project
	const = true
	shortDesc = Projection
	longDesc = Calculate the projection of another vector on the vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = const Vector3& v0 = *this;
	return = {
        value = ((v0 * other) * v0) / (v0 * v0)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = ortho
	const = true
	shortDesc = Orthogonalize vector
	longDesc = Rotate the other vector (v1) within the plane defined by the original vector (v0) and v1, so it is orthogonal to v0.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = const Vector3& v0 = *this;
	return = {
        value = other.norm() * (other - v0.project(other)).normalize()
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = ortho
	const = true
	shortDesc = Orthogonalize vector
	longDesc = Create a vector that is orthogonal to this one.
    impl = const int V3_P[] = \{ 0, 1, 2, 1, 0, 2, 2, 1, 0 \};\
int p = 0;\
if (elements[V3_P[p]] == 0)\
\{\
    p += 3;\
    if (elements[V3_P[p]] == 0)\
    \{\
        p += 3;\
        if (elements[V3_P[p]] == 0)\
            return Vector3(0., 0., 0.);\
    \}\
\}\
Vector3 t0(-elements[V3_P[p + 1]], elements[V3_P[p]], 0);
	return = {
        value = Vector3(t0.elements[V3_P[p]], t0.elements[V3_P[p + 1]], t0.elements[V3_P[p + 2]])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = angle
	const = true
	shortDesc = Calculate angle
	longDesc = Calculate the geometric angle between the two vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = <<<
const Vector3& v0 = *this;
double t = (v0 * other) / (v0.norm() * other.norm());
if (t < -1.)
    t = -1.;
else
if (t > 1.)
    t = 1.;
>>>
	return = {
        value = ::acos(t)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = slerp
	const = true
	shortDesc = Spherical linear interpolation
	longDesc = Interpolate vectors using spherical linear interpolation.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
	param[] = {
		type = double
		name = t
		desc = Parameter
	}
    impl = <<<
double phi0 = angle(other);
Vector3 v0(ortho(other));
double phi1 = t * phi0;
Vector3 result(::sin(phi1) * v0 + ::cos(phi1) * (*this));
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = permute
	const = true
	shortDesc = Permute vector
	longDesc = Permute the vector using the specified permutation of indices.
	param[] = {
		type = int
		name = px
		desc = Permutation (x)
	}
	param[] = {
		type = int
		name = py
		desc = Permutation (y)
	}
	param[] = {
		type = int
		name = pz
		desc = Permutation (z)
	}
    impl = const Vector3& v = *this;
	return = {
        value = Vector3(v[px], v[py], v[pz])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = permute
	const = true
	shortDesc = Permute vector
	longDesc = Permute the vector using the specified permutation of indices.
	param[] = {
		type = const Ionflux::ObjectBase::IntVector&
		name = p
		desc = Permutation
	}
    impl = <<<
if (p.size() < NUM_ELEMENTS)
{
    std::ostringstream status;
    status << "Not enough elements in permutation vector (p.size = " 
        << p.size() << ").";
    throw GeoUtilsError(getErrorString(status.str(), "permute"));
}
const Vector3& v = *this;
>>>
	return = {
        value = Vector3(v[p[0]], v[p[1]], v[p[2]])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = multElements
	const = true
	shortDesc = Element-wise multiplication
	longDesc = Multiply the vectors element-wise.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = Vector3 result(*this);\
result.multiplyIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = interpolate
	const = true
	shortDesc = Linear interpolation
	longDesc = Interpolate the vectors linearly.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
	param[] = {
		type = double
		name = t
		desc = Interpolation parameter
	}
    impl = 
	return = {
        value = t * (*this) + (1. - t) * other
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::AxisTriple
	name = getAxisOrder
    const = true
	shortDesc = Get axis order
	longDesc = Get the order of the coordinate axes of the vector. The axis with the highest absolute coordinate value will be the first in the triple, followed by the other ones in descending order.
    impl = <<<
AxisTriple result;
result.a0 = AXIS_X;
result.a1 = AXIS_Y;
result.a2 = AXIS_Z;
if (elements[AXIS_Y] > elements[AXIS_X])
{
    result.a0 = AXIS_Y;
    result.a1 = AXIS_X;
}
if (elements[result.a2] > elements[result.a0])
{
    AxisID t0 = result.a2;
    result.a2 = result.a1;
    result.a1 = result.a0;
    result.a0 = t0;
}
if (elements[result.a2] > elements[result.a1])
{
    AxisID t0 = result.a1;
    result.a1 = result.a2;
    result.a2 = t0;
}
>>>
    return = {
        desc = Triple containing the axes ordered from longest to shortest
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = operator+
	const = true
	shortDesc = Add vectors
	longDesc = Add vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = Vector3 result(*this);\
result.addIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = operator-
	const = true
	shortDesc = Subtract vectors
	longDesc = Subtract vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = Vector3 result(*this);\
result.subtractIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = operator*
	const = true
	shortDesc = Multiply vectors
	longDesc = Multiply vectors (dot product).
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = 
	return = {
        value = dot(other)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = operator*
	const = true
	shortDesc = Multiply vector by scalar
	longDesc = Multiply vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Vector3 result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = operator/
	const = true
	shortDesc = Divide vector by scalar
	longDesc = Divide vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Vector3 result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3&
	name = operator+=
	shortDesc = Add vectors
	longDesc = Add vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = addIP(other);
	return = {
        value = *this
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3&
	name = operator-=
	shortDesc = Subtract vectors
	longDesc = Subtract vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
    impl = subtractIP(other);
	return = {
        value = *this
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = findElement
	const = true
	shortDesc = Find elements
	longDesc = Find an element with the specified value in the vector.
	param[] = {
		type = double
		name = v
		desc = value
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
int k = 0;
bool found = false;
while (!found 
    && (k < 3))
{
    double c = elements[k];
    if (Ionflux::GeoUtils::eq(c, v, t))
        found = true;
    else
        k++;
}
if (found)
    return k;
>>>
    return = {
        value = -1
        desc = Index of the matching element, or -1 if no element with the specified value was found
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = findMatchingElements
	shortDesc = Find matching elements
	longDesc = Find matching elements in the two vectors. If the optional \c range parameter is specified, only such elements will be considered that are within that range.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = other
		desc = Vector
	}
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Where to store the matching elements
	}
	param[] = {
		type = const Ionflux::GeoUtils::Range*
		name = range
		desc = Range for valid values
		default = 0
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
target.clear();
for (unsigned int i = 0; i < 3; i++)
{
    double c = elements[i];
    if ((range == 0) 
        || (range->isInRange(c, t)))
    {
        if (other.findElement(c, t) >= 0)
            target.push_back(c);
    }
}
>>>
    return = {
        value = target.size()
        desc = The number of matching elements.
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = getV2
	const = true
	shortDesc = Create 2-element vector
	longDesc = Create a 2-element vector without the Z coordinate
	impl = 
    return = {
        value = Vector2(elements[0], elements[1])
        desc = 2-element vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = getPoint
	const = true
	shortDesc = Create point
	longDesc = Create a point.
	impl = 
    return = {
        value = Ionflux::Mapping::Point(\
    elements[0], elements[1], elements[2])
        desc = Point
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = distanceToPlane
    const = true
	shortDesc = Calculate distance to plane
	longDesc = Returns the distance of the point with coordinates indicated by the vector to the specified plane.
	param[] = {
		type = const Ionflux::GeoUtils::Plane3&
		name = plane
		desc = Plane
	}
    impl = 
    return = {
        value = (*this - plane.getP()) * plane.getNormal()
        desc = Distance to plane
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}

# static member functions
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Vector3
	name = axis
	shortDesc = Get axis direction vector
	longDesc = Get the direction vector for the specified axis.
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axisID
		desc = Axis
	}
    impl = <<<
if (axisID == AXIS_X)
    return E_X;
else
if (axisID == AXIS_Y)
    return E_Y;
else
if (axisID == AXIS_Z)
    return E_Z;
else
{
    ostringstream status;
    status << "[Vector3::axis] "
        "Invalid axis: " << axisID;
    throw GeoUtilsError(status.str());
}
>>>
	return = {
        value = ZERO
	    desc = Axis direction vector
    }
}

# Pure virtual member functions.

# operations

# Global functions.
function.global[] = {
	type = Ionflux::GeoUtils::Vector3
	name = operator*
	shortDesc = Multiply vector by scalar
	longDesc = Multiply vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = v
		desc = Vector
	}
    impl = 
	return = {
        value = v * c
	    desc = Result of the calculation
    }
}

