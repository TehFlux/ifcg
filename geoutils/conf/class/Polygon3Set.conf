# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Polygon3Set.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Polygon3CompareAxis.hpp"'
        '"geoutils/SVGImageProperties.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<fstream>'
        '<iomanip>'
        '<algorithm>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/transformutils.hpp"'
    }
}

# forward declarations
forward = {
    'class Polygon3'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Polygon3Set
	shortDesc = Polygon set (3D)
	title = Polygon set (3D)
	longDesc = A set of Polygons in three-dimensional space.
	group.name = geoutils
    base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
		}
    }
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = poly3set
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initPolygons
        type = Ionflux::GeoUtils::Polygon3Vector&
        desc = Polygons
    }
    impl = addPolygons(initPolygons);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = polys
    desc = Polygon vector
    element = {
        type = Ionflux::GeoUtils::Polygon3*
        name = Polygon
#        plural = Vertices
        managed = true
        createExpr = Polygon3::create()
        valueType = object
    }
    xml.child = {
        name = polygons
        elementName = poly3vec
    }
    extendedAddFuncs = true
}

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::Polygon3CompareAxis
    name = COMPARE_AXIS_X
    desc = Polygon comparison function: X axis
    value = Ionflux::GeoUtils::Polygon3CompareAxis(Ionflux::GeoUtils::AXIS_X)
}
constant.public[] = {
    type = Ionflux::GeoUtils::Polygon3CompareAxis
    name = COMPARE_AXIS_Y
    desc = Polygon comparison function: Y axis
    value = Ionflux::GeoUtils::Polygon3CompareAxis(Ionflux::GeoUtils::AXIS_Y)
}
constant.public[] = {
    type = Ionflux::GeoUtils::Polygon3CompareAxis
    name = COMPARE_AXIS_Z
    desc = Polygon comparison function: Z axis
    value = Ionflux::GeoUtils::Polygon3CompareAxis(Ionflux::GeoUtils::AXIS_Z)
}

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = Recalculate bounds
	longDesc = Recalculate the bounds for the polygon set.
	impl = <<<
TransformableObject::recalculateBounds();
const Polygon3Set* ps0 = this;
Polygon3Set* ps1 = 0;
if (useTransform() || useVI())
{
    // Adjust for transformation.
    Polygon3Set* ps1 = copy();
    addLocalRef(ps1);
    ps1->applyTransform();
    ps0 = ps1;
}
Ionflux::GeoUtils::Polygon3Vector::const_iterator i;
bool e0 = true;
for (i = ps0->polys.begin(); i < ps0->polys.end(); i++)
{
    Range3 r0((*i)->getBounds());
    if (e0)
    {
        boundsCache->setBounds(r0);
        e0 = false;
    } else
        boundsCache->extend(r0);
}
if (ps1 != 0)
    removeLocalRef(ps1);
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
TransformableObject::operator=(other);
Polygon3Vector pv0;
for (Polygon3Vector::const_iterator i = other.polys.begin(); 
    i != other.polys.end(); i++)
{
    Polygon3* pt0 = Ionflux::ObjectBase::nullPointerCheck(*i, this, 
        "operator=", "Polygon");
    pv0.push_back(pt0->copy());
}
clearPolygons();
addPolygons(pv0);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for all polygons.
	impl = <<<
Vector3 vSum;
Ionflux::GeoUtils::Polygon3Vector::const_iterator i;
for (i = polys.begin(); i < polys.end(); i++)
    vSum = vSum + (*i)->getBarycenter();
vSum = vSum / polys.size();
// Adjust for transformation.
Vertex3 v0(vSum);
if (useTransform())
    v0.transform(*getTransformMatrix());
if (useVI())
    v0.transformVI(*getViewMatrix(), getImageMatrix());
>>>
    return = {
        value = v0.getVector()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformations
	longDesc = Apply transformations that have been accumulated in the transformation matrices.
	param[] = {
	    type = bool
	    name = recursive
	    desc = Apply transformations recursively
	    default = false
	}
    impl = Ionflux::GeoUtils::applyTransform(*this, polys, \
    recursive, "Polygon");
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getSVG
	shortDesc = Get SVG representation
	longDesc = Get a Scalable Vector Graphics (XML) representation of the polygons in the set. The polygons will be projected orthogonally to the appropriate coordinate plane along the specified axis.
    param[] = {
        type = const std::string&
        name = attrs
        desc = Element attributes
        default = SVG_DEFAULT_POLY_STYLE
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
    param[] = {
        type = Ionflux::GeoUtils::SVGShapeType
        name = shapeType
        desc = Shape type
        default = Ionflux::GeoUtils::DEFAULT_SHAPE_TYPE
    }
    param[] = {
        type = bool
        name = closePath
        desc = Close path
        default = true
    }
	impl = ostringstream svg;\
ostringstream eid;\
unsigned int k = 0;\
applyTransform();\
for (Polygon3Vector::const_iterator i = polys.begin(); \
    i != polys.end(); i++)\
\{\
    Polygon3* p0 = *i;\
    eid.str("");\
    eid << elementIDPrefix << right << setfill('0') << setw(8) << k;\
    if (k > 0)\
        svg << "\n";\
    svg << p0->getSVG(attrs, eid.str(), axis, shapeType, closePath);\
    k++;\
\}
    return = {
        value = svg.str()
        desc = SVG representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getSVG
	shortDesc = Get SVG representation
	longDesc = Get a Scalable Vector Graphics (XML) representation of the polygons in the set. The polygons will be projected orthogonally to the appropriate coordinate plane along the specified axis. For each polygon, a style is selected from the \c styles vector in order (modulo the number of styles in the vector).
    param[] = {
        type = const Ionflux::GeoUtils::SVGShapeStyleVector&
        name = styles
        desc = Element styles
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
    param[] = {
        type = Ionflux::GeoUtils::SVGShapeType
        name = shapeType
        desc = Shape type
        default = Ionflux::GeoUtils::DEFAULT_SHAPE_TYPE
    }
    param[] = {
        type = bool
        name = closePath
        desc = Close path
        default = true
    }
	impl = Ionflux::ObjectBase::StringVector attrs;\
    for (SVGShapeStyleVector::const_iterator j = styles.begin(); \
        j != styles.end(); j++)\
    attrs.push_back(getSVGPolygonStyle(*(*j)));\
if (attrs.size() == 0)\
    attrs.push_back(SVG_DEFAULT_POLY_STYLE);\
ostringstream svg;\
ostringstream eid;\
unsigned int k = 0;\
unsigned int numAttrs = attrs.size();\
applyTransform();\
for (Polygon3Vector::const_iterator i = polys.begin(); \
    i != polys.end(); i++)\
\{\
    Polygon3* p0 = *i;\
    eid.str("");\
    eid << elementIDPrefix << right << setfill('0') << setw(8) << k;\
    if (k > 0)\
        svg << "\n";\
    std::string a0 = attrs[k % numAttrs];\
    svg << p0->getSVG(a0, eid.str(), axis, shapeType, closePath);\
    k++;\
\}
    return = {
        value = svg.str()
        desc = SVG representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getSVG
	shortDesc = Get SVG representation
	longDesc = Get a Scalable Vector Graphics (XML) representation of the polygons in the set. The polygons will be projected orthogonally to the appropriate coordinate plane along the specified axis.
    param[] = {
        type = Ionflux::GeoUtils::SVGImageProperties&
        name = imageProperties
        desc = SVG image properties
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
	impl = ostringstream svg;\
ostringstream eid;\
unsigned int k = 0;\
applyTransform();\
SVGShapeStyleSource* src0 = imageProperties.getStyleSource();\
for (Polygon3Vector::const_iterator i = polys.begin(); \
    i != polys.end(); i++)\
\{\
    Polygon3* p0 = *i;\
    eid.str("");\
    eid << elementIDPrefix << right << setfill('0') << setw(8) << k;\
    SVGShapeStyle* s0 = src0->getStyle(eid.str());\
    if (k > 0)\
        svg << "\n";\
    svg << p0->getSVG(*s0, eid.str(), axis, s0->shapeType, s0->closePath);\
    k++;\
\}
    return = {
        value = svg.str()
        desc = SVG representation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = writeSVG
	shortDesc = Write SVG representation to file
	longDesc = Create a Scalable Vector Graphics (XML) representation of the polygons in the set and write it to a file.
    param[] = {
        type = const std::string&
        name = fileName
        desc = File name
    }
    param[] = {
        type = const std::string&
        name = attrs
        desc = Element attributes
        default = SVG_DEFAULT_POLY_STYLE
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
    param[] = {
        type = Ionflux::GeoUtils::SVGShapeType
        name = shapeType
        desc = Shape type
        default = Ionflux::GeoUtils::DEFAULT_SHAPE_TYPE
    }
    param[] = {
        type = bool
        name = closePath
        desc = Close path
        default = true
    }
	impl = ofstream f0;\
f0.open(fileName.c_str(), ios_base::out);\
f0 << SVG_DEFAULT_HEADER << getSVG(attrs, elementIDPrefix, \
    axis, shapeType, closePath) << SVG_DEFAULT_FOOTER;
}
function.public[] = {
	spec = virtual
	type = void
	name = writeSVG
	shortDesc = Write SVG representation to file
	longDesc = Create a Scalable Vector Graphics (XML) representation of the polygons in the set and write it to a file.
    param[] = {
        type = const std::string&
        name = fileName
        desc = File name
    }
    param[] = {
        type = const Ionflux::GeoUtils::SVGShapeStyleVector&
        name = styles
        desc = Element styles
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
    param[] = {
        type = Ionflux::GeoUtils::SVGShapeType
        name = shapeType
        desc = Shape type
        default = Ionflux::GeoUtils::DEFAULT_SHAPE_TYPE
    }
    param[] = {
        type = bool
        name = closePath
        desc = Close path
        default = true
    }
	impl = <<<
std::ofstream f0;
f0.open(fileName.c_str(), ios_base::out);
f0 << SVG_DEFAULT_HEADER << getSVG(styles, elementIDPrefix, axis, 
    shapeType, closePath) << SVG_DEFAULT_FOOTER;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = writeSVG
	shortDesc = Write SVG representation to file
	longDesc = Create a Scalable Vector Graphics (XML) representation of the polygons in the set and write it to a file.
    param[] = {
        type = Ionflux::GeoUtils::SVGImageProperties&
        name = imageProperties
        desc = SVG image properties
    }
    param[] = {
        type = const std::string&
        name = elementIDPrefix
        desc = Element ID prefix
        default = "polygon"
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Projection axis
        default = Ionflux::GeoUtils::AXIS_Y
    }
	impl = <<<
std::ofstream f0;
f0.open(imageProperties.getFileName().c_str(), ios_base::out);
Vector2 o0 = imageProperties.getOrigin();
std::string d0 = getSVG(imageProperties, elementIDPrefix, axis);
f0 << getSVGImage(d0, imageProperties.getWidth(), 
    imageProperties.getHeight(), static_cast<int>(o0.getX0()), 
    static_cast<int>(o0.getX1()));
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = TransformableObject::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = TransformableObject::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = TransformableObject::transformVI(view, image);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Set&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = sort
	shortDesc = Sort
	longDesc = Sort polygons in the set. If no comparison function is specified, polygons are sorted according to the Z-axis order of their barycenters. \c compFunc will be managed by a temporary object so it is possible to create a new instance of a comparison function within the call.
	param[] = {
	    type = Ionflux::GeoUtils::Polygon3Compare*
	    name = compFunc
	    desc = Comparison function
	    default = 0
	}
    impl = Polygon3Compare wrap0;\
if (compFunc == 0)\
    wrap0.setTarget(Polygon3CompareAxis::create(AXIS_Z));\
else\
    wrap0.setTarget(compFunc);\
::sort(polys.begin(), polys.end(), wrap0);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = <<<
std::ostringstream status;
bool e0 = true;
for (Polygon3Vector::const_iterator i = polys.begin(); 
    i != polys.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "[" << (*i)->getValueString() << "]";
}
// transformable object data
std::string ts0(TransformableObject::getValueString());
if (ts0.size() > 0)
    status << "; " << ts0;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

