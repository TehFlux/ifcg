# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector2.hpp"'
        '"geoutils/Matrix2.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vector4.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/gslutils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Matrix3
	shortDesc = Matrix (3x3)
	title = Matrix (3x3)
	longDesc = A 3x3 matrix.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::GeoUtils::Matrix
            include = geoutils/Matrix.hpp
            xml = {
                enabled = true
                #getFunc = getMatrix
                include = geoutils/Matrix
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = m3
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = r0
	desc = Row vector (0)
    proxy = true
    impl = {
        get = return Vector3(elements[0], elements[1], elements[2]);
        set = <<<
elements[0] = newR0.getX0();
elements[1] = newR0.getX1();
elements[2] = newR0.getX2();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = r1
	desc = Row vector (1)
    proxy = true
    impl = {
        get = return Vector3(elements[3], elements[4], elements[5]);
        set = <<<
elements[3] = newR1.getX0();
elements[4] = newR1.getX1();
elements[5] = newR1.getX2();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = r2
	desc = Row vector (2)
    proxy = true
    impl = {
        get = return Vector3(elements[6], elements[7], elements[8]);
        set = <<<
elements[6] = newR2.getX0();
elements[7] = newR2.getX1();
elements[8] = newR2.getX2();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = c0
	desc = Column vector (0)
    proxy = true
    impl = {
        get = return Vector3(elements[0], elements[3], elements[6]);
        set = <<<
elements[0] = newC0.getX0();
elements[3] = newC0.getX1();
elements[6] = newC0.getX2();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = c1
	desc = Column vector (1)
    proxy = true
    impl = {
        get = return Vector3(elements[1], elements[4], elements[7]);
        set = <<<
elements[1] = newC1.getX0();
elements[4] = newC1.getX1();
elements[7] = newC1.getX2();
>>>
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = c2
	desc = Column vector (2)
    proxy = true
    impl = {
        get = return Vector3(elements[2], elements[5], elements[8]);
        set = <<<
elements[2] = newC2.getX0();
elements[5] = newC2.getX1();
elements[8] = newC2.getX2();
>>>
    }
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 9
}
constant.public[] = {
	type = unsigned int
	name = NUM_ROWS
	desc = Number of rows
	value = 3
}
constant.public[] = {
	type = unsigned int
	name = NUM_COLS
	desc = Number of columns
	value = 3
}
constant.public[] = {
    desc = Zero matrix
    type = Ionflux::GeoUtils::Matrix3
    name = ZERO
    value = Ionflux::GeoUtils::Matrix3(0., 0., 0., 0., 0., 0., 0., 0., 0.)
}
constant.public[] = {
    desc = Unit matrix
    type = Ionflux::GeoUtils::Matrix3
    name = UNIT
    value = Ionflux::GeoUtils::Matrix3(1., 0., 0., 0., 1., 0., 0., 0., 1.)
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = zero();
}
constructor.public[] = {
    param[] = {
        name = initX00
        type = double
        desc = Element x00
    }
    param[] = {
        name = initX01
        type = double
        desc = Element x01
    }
    param[] = {
        name = initX02
        type = double
        desc = Element x02
    }
    param[] = {
        name = initX10
        type = double
        desc = Element x10
    }
    param[] = {
        name = initX11
        type = double
        desc = Element x11
    }
    param[] = {
        name = initX12
        type = double
        desc = Element x12
    }
    param[] = {
        name = initX20
        type = double
        desc = Element x20
    }
    param[] = {
        name = initX21
        type = double
        desc = Element x21
    }
    param[] = {
        name = initX22
        type = double
        desc = Element x22
    }
    impl = <<<
initElements();
elements[0] = initX00;
elements[1] = initX01;
elements[2] = initX02;
elements[3] = initX10;
elements[4] = initX11;
elements[5] = initX12;
elements[6] = initX20;
elements[7] = initX21;
elements[8] = initX22;
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Element vector
    }
    impl = <<<
initElements();
Vector::setElements(initElements0);
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::GeoUtils::Matrix&
        desc = matrix
    }
    impl = <<<
initElements();
setElements(initElements0);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = transpose
	const = true
	shortDesc = Transpose
	longDesc = Transpose the matrix.
	return = {
        value = Matrix3(elements[0], elements[3], elements[6], \
    elements[1], elements[4], elements[7], \
    elements[2], elements[5], elements[8])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = permuteColumns
	const = true
	shortDesc = Permute columns
	longDesc = Permute the columns using the specified permutation of indices.
	param[] = {
		type = int
		name = px
		desc = Permutation (x)
	}
	param[] = {
		type = int
		name = py
		desc = Permutation (y)
	}
	param[] = {
		type = int
		name = pz
		desc = Permutation (z)
	}
    impl = 
	return = {
        value = Matrix3(elements[px], elements[py], elements[pz], \
    elements[3 + px], elements[3 + py], elements[3 + pz], \
    elements[6 + px], elements[6 + py], elements[6 + pz])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = permuteColumns
	const = true
	shortDesc = Permute columns
	longDesc = Permute the columns using the specified permutation of indices.
	param[] = {
		type = const Ionflux::ObjectBase::IntVector&
		name = p
		desc = Permutation
	}
    impl = <<<
if (p.size() < 3)
    throw GeoUtilsError(getErrorString(
        "Not enough elements in permutation vector.", 
        "permuteColumns"));
>>>
	return = {
        value = permuteColumns(p[0], p[1], p[2])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = solve
	const = true
	shortDesc = Solve matrix equation
	longDesc = Solve the matrix equation Mx = v.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = v
		desc = Vector
	}
    impl = <<<
double x11 = elements[0];
double x12 = elements[1];
double x13 = elements[2];
double x21 = elements[3];
double x22 = elements[4];
double x23 = elements[5];
double x31 = elements[6];
double x32 = elements[7];
double x33 = elements[8];
double a = v.getElement(0);
double b = v.getElement(1);
double c = v.getElement(2);
Vector3 result;
if (x11 != 0.0)
{
    double y11 = (x22 * x11 - x12 * x21) / x11;
    double y12 = (x23 * x11 - x13 * x21) / x11;
    double y21 = (x32 * x11 - x12 * x31) / x11;
    double y22 = (x33 * x11 - x13 * x31) / x11;
    double d = (b * x11 - a * x21) / x11;
    double e = (c * x11 - a * x31) / x11;
    Vector2 r0 = Matrix2(y11, y12, y21, y22).solve(Vector2(d, e));
    double x = (a - r0[0] * x12 - r0[1] * x13) / x11;
    result.setElement(0, x);
    result.setElement(1, r0.getElement(0));
    result.setElement(2, r0.getElement(1));
} else
if (x12 != 0.0)
    result = permuteColumns(1, 0, 2).solve(v).permute(1, 0, 2);
else
if (x13 != 0.0)
    result = permuteColumns(2, 1, 0).solve(v).permute(2, 1, 0);
else
{
    std::ostringstream status;
    status << "Cannot solve 3x3 matrix equation (M = ["
        << getValueString() << "], v = (" << v.getValueString() 
        << ")).";
    throw GeoUtilsError(getErrorString(status.str(), "solve"));
}
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = invert
	const = true
	shortDesc = Invert matrix
	longDesc = Invert the matrix.
    impl = <<<
Vector3 x = solve(Vector3::E_X);
Vector3 y = solve(Vector3::E_Y);
Vector3 z = solve(Vector3::E_Z);
Matrix3 result;
result.setC0(x);
result.setC1(y);
result.setC2(z);
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3&
	name = multiplyLeft
	shortDesc = Multiply matrices (left)
	longDesc = Multiply the specified matrix to the left of the matrix. The result is stored in the matrix itself.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = other
		desc = Matrix
	}
    impl = *this = other * (*this);
	return = {
        value = *this
	    desc = The matrix itself
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3&
	name = multiplyRight
	shortDesc = Multiply matrices (right)
	longDesc = Multiply the specified matrix to the right of the matrix. The result is stored in the matrix itself.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = other
		desc = Matrix
	}
    impl = *this = (*this) * other;
	return = {
        value = *this
	    desc = The matrix itself
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = operator*
	const = true
	shortDesc = Multiply matrices
	longDesc = Multiply matrices.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = other
		desc = Matrix
	}
    impl = <<<
Matrix3 result;
for (unsigned int i = 0; i < 3; i++)
    for (unsigned int j = 0; j < 3; j++)
    {
        double s = 0.0;
        for (unsigned int k = 0; k < 3; k++)
            s += elements[3 * i + k] * other.elements[3 * k + j];
        result.elements[3 * i + j] = s;
    }
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = operator*
	const = true
	shortDesc = Transform vector
	longDesc = Transform a vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = v
		desc = Vector
	}
    impl = <<<
double result[3];
for (unsigned int i = 0; i < 3; i++)
{
    double s = 0.0;
    for (unsigned int k = 0; k < 3; k++)
        s += elements[3 * i + k] * v.getElement(k);
    result[i] = s;
}
>>>
	return = {
        value = Vector3(result[0], result[1], result[2])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = operator*
	const = true
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix3 result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = operator/
	const = true
	shortDesc = Divide matrix by scalar
	longDesc = Divide matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix3 result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = operator+
	const = true
	shortDesc = Add matrices
	longDesc = Add matrices element-wise.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = other
		desc = Matrix
	}
    impl = Matrix3 result(*this);\
result.addIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = operator-
	const = true
	shortDesc = Subtract matrices
	longDesc = Subtract matrices.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = other
		desc = Matrix
	}
    impl = Matrix3 result(*this);\
result.subtractIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = svd
	const = true
	shortDesc = Calculate singular value decomposition
	longDesc = Calculate the singular value decomposition M = U S V^T of the matrix.
	param[] = {
		type = Ionflux::GeoUtils::Matrix3&
		name = u
		desc = U
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3&
		name = s
		desc = singular values
	}
	param[] = {
		type = Ionflux::GeoUtils::Matrix3&
		name = v
		desc = V
	}
    impl = Ionflux::GeoUtils::svd(*this, u, s, v);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector4
	name = getAxisAngle
	const = true
	shortDesc = Get rotation axis/angle
	longDesc = Get the rotation axis and angle for a rotation matrix. The rotation axis is stored in the first three elements of the result vector. The rotation angle is stored in the fourth element of the result vector. If the matrix is not a rotation matrix, the result is undefined.
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
	impl = <<<
Matrix3 m0(*this - UNIT);
Matrix3 u;
Vector3 s;
Matrix3 v;
m0.svd(u, s, v);
if (!Ionflux::GeoUtils::eq(s[2], 0., t))
{
    std::ostringstream status;
    status << "Unexpected singular value (2): " << s[2] 
        << " (should be 0)";
    throw GeoUtilsError(getErrorString(status.str(), 
        "getAxisAngle"));
}
double a0 = 0.5 * (trace() - 1.);
double angle0 = 0.;
if (ltOrEq(a0, -1.))
    angle0 = M_PI;
else
if (gtOrEq(a0, 1.))
    angle0 = 0;
else
    angle0 = ::acos(a0);
>>>
    return = {
        value = Vector4(v.getC2(), angle0)
        desc = Axis/angle vector
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumRows
	const = true
	shortDesc = Get number of rows
	longDesc = Get the number of rows in the matrix
	impl = 
    return = {
        value = NUM_ROWS
        desc = Number of rows
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumCols
	const = true
	shortDesc = Get number of columns
	longDesc = Get the number of columns in the matrix
	impl = 
    return = {
        value = NUM_COLS
        desc = Number of columns
    }
}

# static member functions
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix3
	name = scale
	shortDesc = Create scale matrix
	longDesc = Create a scale matrix.
	param[] = {
		type = double
		name = sx
		desc = Scale factor (x)
        default = 1.
	}
	param[] = {
		type = double
		name = sy
		desc = Scale factor (y)
        default = 1.
	}
	param[] = {
		type = double
		name = sz
		desc = Scale factor (z)
        default = 1.
	}
	impl = 
    return = {
        value = Matrix3(sx, 0., 0., 0., sy, 0., 0., 0., sz)
        desc = Scale matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix3
	name = translate
	shortDesc = Create translation matrix
	longDesc = Create a translation matrix.
	param[] = {
		type = double
		name = tx
		desc = Translation distance (x)
        default = 0.
	}
	param[] = {
		type = double
		name = ty
		desc = Translation distance (y)
        default = 0.
	}
	impl = 
    return = {
        value = Matrix3(1., 0., tx, 0., 1., ty, 0., 0., 1.)
        desc = Translation matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix3
	name = rotate
	shortDesc = Create rotation matrix
	longDesc = Create a rotation matrix.
	param[] = {
		type = double
		name = phi
		desc = Angle
        default = 0.
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
	impl = <<<
if (axis == AXIS_X)
    return Matrix3(1., 0., 0., 
        0., ::cos(phi), -::sin(phi), 
        0., ::sin(phi), ::cos(phi));
else
if (axis == AXIS_Y)
    return Matrix3(::cos(phi), 0., ::sin(phi), 
        0., 1., 0., 
        -::sin(phi), 0., ::cos(phi));
else
if (axis == AXIS_Z)
    return Matrix3(::cos(phi), -::sin(phi), 0., 
        ::sin(phi), ::cos(phi), 0., 
        0., 0., 1.);
else
{
    std::ostringstream status;
    status << "[Matrix3::rotate] Invalid axis: " << axis;
    throw GeoUtilsError(status.str());
}
>>>
    return = {
        value = ZERO
        desc = Rotation matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix3
	name = crossProduct
	shortDesc = Create cross-product matrix
	longDesc = Create a cross-product matrix for the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = v
		desc = Vector
	}
	impl = 
    return = {
        value = Matrix3(0, -v[2], v[1], v[2], 0, -v[0], -v[1], v[0], 0)
        desc = Cross-product matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix3
	name = rotate
	shortDesc = Create rotation matrix
	longDesc = Create a rotation matrix for the specified rotation angle and axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = axis
		desc = Axis vector
	}
	impl = <<<
Matrix3 cp(crossProduct(axis));
Matrix3 result(Matrix3::UNIT + ::sin(phi) * cp 
    + (1. - ::cos(phi)) * (cp * cp));
>>>
    return = {
        value = result
        desc = Rotation matrix
    }
}

# Pure virtual member functions.

# operations

# Global functions.
function.global[] = {
	type = Ionflux::GeoUtils::Matrix3
	name = operator*
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = m
		desc = Matrix
	}
    impl = 
	return = {
        value = m * c
	    desc = Result of the calculation
    }
}

