# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Iterate.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
#        '"geoutils/Clock.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Iterate
	shortDesc = Transform node: Iterate
	title = Transform node: Iterate
	longDesc = Query the input group a number of times and add one output group per query.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numIterations
	desc = Number of iterations
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_FIRST
    desc = Output ID: first
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_ITERATIONS
    desc = Default number of iterations
    value = 1
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = numIterations
        value = DEFAULT_NUM_ITERATIONS
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = numIterations
        value = initNumIterations
    }
    param[] = {
        type = unsigned int
        name = initNumIterations
        desc = Number of iterations
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = 
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
numIterations = other.numIterations;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; " \
    << numIterations << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = void
	name = updateInputs
	shortDesc = Update inputs
	longDesc = Update the inputs of the node. Each input node is updated only once, no matter how many of its outputs are connected to this node.
    impl = /* Nothing to be done here. Input nodes will be updated in the \
   process() method. */
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputs.size() < 1)\
    throw GeoUtilsError("No inputs defined.");\
InputNodeSpec i0 = inputs[INPUT_SOURCE];\
if (i0.node == 0)\
    throw GeoUtilsError("Input node not set.");\
if (numIterations == 0)\
    throw GeoUtilsError("Number of iterations must be positive.");\
// Process iterations.\
/* <---- DEBUG ----- //\
Ionflux::GeoUtils::Clock c0;\
double sourceUpdateTime = 0.;\
double duplicateTime = 0.;\
// ----- DEBUG ----> */\
for (unsigned int j = 0; j < numIterations; j++)\
\{\
    /* <---- DEBUG ----- //\
    c0.start();\
    // ----- DEBUG ----> */\
    i0.node->update();\
    /* <---- DEBUG ----- //\
    c0.stop();\
    sourceUpdateTime += c0.getElapsedTime();\
    // ----- DEBUG ----> */\
    TransformableGroup* g0 = i0.node->getOutput(i0.outputID);\
    if (g0 == 0)\
    \{\
        std::ostringstream message;\
        message << "Input node does not supply the specified "\
            "output (node = " << i0.node->getString() << ", outputID = " \
            << i0.outputID << ").";\
        throw GeoUtilsError(message.str());\
    \}\
    /* <---- DEBUG ----- //\
    c0.start();\
    // ----- DEBUG ----> */\
    addOutput(g0);\
    /* <---- DEBUG ----- //\
    c0.stop();\
    duplicateTime += c0.getElapsedTime();\
    // ----- DEBUG ----> */\
\}\
/* <---- DEBUG ----- //\
c0.stop();\
std::ostringstream message;\
message << "sourceUpdateTime = " << (sourceUpdateTime / numIterations) \
    << " secs, duplicateTime = " << (duplicateTime / numIterations);\
log(IFLogMessage(message.str(), VL_DEBUG, this, "update"));\
// ----- DEBUG ----> */\
i0.node->clearOutputs();

}

# operations

# Global functions.

