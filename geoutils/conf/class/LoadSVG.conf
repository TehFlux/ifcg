# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# LoadSVG.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/xmlutils.hpp"'
        '"geoutils/Polygon3Set.hpp"'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/SVG.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = LoadSVG
	shortDesc = Transform node: Load SVG
	title = Transform node: Load SVG
	longDesc = A transform node that creates transformable objects from an SVG file. If both file name and element IDs are specified, LoadSVG reads path data from the SVG file and creates a polygon for each element ID. If no element IDs are specified, LoadSVG wraps the whole contents of the SVG file in an SVG object. The node has no inputs and provides one output group, containing the objects created from the SVG data.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = fileName
        value = ""
    }
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = fileName
        value = initFileName
    }
    param[] = {
        type = const std::string&
        name = initFileName
        value = Input file name
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = fileName
    desc = Input file name
}
property.protected[] = {
    style = vector
    name = elementIDs
    desc = Input element IDs
    element = {
        type = std::string
        name = ElementID
        defaultValue = ""
    }
}

## Public static constants.
#constant.public[] = {
#    type = unsigned int
#    name = INPUT_...
#    desc = Input ID: ...
#    value = 0
#}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
fileName = other.fileName;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") \
    << "; " << defaultStr(fileName, "<none>") << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (fileName.size() == 0)\
    throw GeoUtilsError("Input file name not specified.");\
TransformableGroup* g0 = new TransformableGroup();\
if (g0 == 0)\
throw GeoUtilsError("[LoadSVG::process] "\
    "Could not allocate transformable group!");\
if (elementIDs.size() > 0)\
\{\
    // Create polygons.\
    Polygon3Set ps0;\
    Ionflux::GeoUtils::getSVGPolygons(fileName, elementIDs, ps0);\
    for (unsigned int i = 0; i < ps0.getNumPolygons(); i++)\
    \{\
        Polygon3* p0 = ps0.getPolygon(i);\
        g0->addItem(p0);\
    \}\
\} else\
\{\
    // Create SVG object.\
    SVG* svg0 = SVG::create();\
    svg0->setSource(fileName);\
    svg0->setType(SVG::TYPE_FILE);\
    g0->addItem(svg0);\
\}\
addOutput(g0);
}

# operations

# Global functions.

