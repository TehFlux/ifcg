# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Connection.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/TransformNode.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Connection
	shortDesc = Connection
	title = Transform node connection
	longDesc = An object that can be used to conveniently establish and dispose of connections between the outputs and inputs of transform nodes. Although not strictly necessary to connect nodes, the Connection object is the recommended way to do this.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = connected
        value = false
    }
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = target
        value = 0
    }
    initializer[] = {
        name = outputID
        value = 0
    }
    initializer[] = {
        name = inputID
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = connected
        value = false
    }
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = target
        value = 0
    }
    initializer[] = {
        name = outputID
        value = 0
    }
    initializer[] = {
        name = inputID
        value = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::TransformNodes::TransformNode*
        name = initSource
        desc = Source node
    }
    param[] = {
        type = Ionflux::GeoUtils::TransformNodes::TransformNode*
        name = initTarget
        desc = Target node
    }
    param[] = {
        type = unsigned int
        name = outputID
        desc = Output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = inputID
        desc = Input ID
        default = INPUT_NEXT_FREE
    }
    param[] = {
        type = bool
        name = connectLater
        desc = Connect later
        default = false
    }
    impl = connect(initSource, initTarget, outputID, inputID, connectLater);
}

# Destructor.
destructor.impl = clear();

# Member variables.
variable.protected[] = {
    type = bool
    name = connected
    desc = Connected flag
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::TransformNodes::TransformNode*
    name = source
    desc = Source node
    readOnly = true
#    managed = true
}
property.protected[] = {
    type = Ionflux::GeoUtils::TransformNodes::TransformNode*
    name = target
    desc = Target node
    readOnly = true
#    managed = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = outputID
    desc = Output ID
    readOnly = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = inputID
    desc = Input ID
    readOnly = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode* s0 = other.source;\
TransformNode* t0 = other.target;\
unsigned int o0 = other.outputID;\
unsigned int i0 = other.inputID;\
bool c0 = other.connected;\
clear();\
if (c0)\
    connect(s0, t0, o0, i0);\
else\
    connect(s0, t0, o0, i0, true);
function.public[] = {
	spec = virtual
	type = bool
	name = connect
	shortDesc = Connect
	longDesc = Establish a connection from the specified output slot of the input node to the specified input slot of the output node. If \c connectLater is \c true, the internal state will be set up but the connection will not be established immediately.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = newSource
		desc = Source node
		default = 0
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = newTarget
		desc = Target node
		default = 0
	}
    param[] = {
        type = unsigned int
        name = newOutputID
        desc = New output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = newInputID
        desc = New input ID
        default = INPUT_NEXT_FREE
    }
    param[] = {
        type = bool
        name = connectLater
        desc = Connect later
        default = false
    }
    impl = if (connected)\
\{\
    /* If we are already connected, check if we need to establish \
       a new connection. */\
    if ((newSource == source) \
        && (newTarget == target) \
        && (newOutputID == outputID) \
        && (newInputID == inputID))\
        // Nothing to be done.\
        return true;\
    else\
        disconnect();\
\} else\
if ((newSource == 0) \
    && (newTarget == 0) \
    && (source != 0) \
    && (target != 0)) \
\{\
    /* We are already set up for a connection, use the existing \
       configuration. */\
    newTarget = target;\
    newSource = source;\
    newOutputID = outputID;\
    newInputID = inputID;\
\}\
if (newSource != source)\
\{\
    // Source has changed.\
    source = newSource;\
\}\
if (newTarget != target)\
\{\
    // Target has changed.\
    target = newTarget;\
\}\
outputID = newOutputID;\
inputID = newInputID;\
if ((connectLater) \
    || (source == 0) \
    || (target == 0))\
    // Done for now.\
    return false;\
// Establish the connection.\
if (inputID == INPUT_NEXT_FREE)\
    inputID = target->getNumInputs();\
target->setInput(createInputNodeSpec(source, outputID), inputID);\
connected = true;
    return = {
        value = true
        desc = \c true if a connection has been established, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = disconnect
	shortDesc = Disconnect
	longDesc = Disconnect the connection.
    impl = if (!connected)\
    return true;\
if (target == 0)\
    return false;\
target->setInput(DEFAULT_INPUT_NODE_SPEC, inputID);\
connected = false;
    return = {
        value = true
        desc = \c true if the connection has been discarded, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Reset the object to an uninitialized state.
    impl = disconnect();\
source = 0;\
target = 0;\
outputID = 0;\
inputID = INPUT_NEXT_FREE;
}
function.public[] = {
	spec = virtual
	type = bool
	name = isConnected
	shortDesc = Connection check
	longDesc = Check whether the connection is established.
    impl = 
    return = {
        value = connected
        desc = \c true if the connection is established, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (source != 0)\
    status << source->getString() << ":" << outputID;\
else\
    status << "none:" << outputID;\
if (connected)\
    status << " --> ";\
else\
    status << " -X- ";\
if (source != 0)\
    status << target->getString() << ":" << inputID;\
else\
    status << "none:" << inputID;\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::TransformNodes::Connection&
		name = other
		desc = Connection
	}
    impl = 
	return = {
        value = (source == other.source) && (target == other.target) && (outputID == other.outputID) && (inputID == other.inputID)
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::TransformNodes::Connection&
		name = other
		desc = Connection
	}
    impl = 
	return = {
        value = !(*this == other)
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = static
	type = bool
	name = check
	shortDesc = Check connection
	longDesc = Check whether a connection between the specified node input and output actually exists. Note that this does not check whether a corresponding connection object exists. it just checks whether the internal state of the target node indicates such a connection.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = checkSource
		desc = Source node
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = checkTarget
		desc = Target node
	}
    param[] = {
        type = unsigned int
        name = checkOutputID
        desc = Output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = checkInputID
        desc = Input ID
        default = 0
    }
    impl = if (checkTarget == 0)\
    // Target node is null, nothing to check.\
    return false;\
InputNodeSpec s0 = checkTarget->getInput(checkInputID);\
if ((s0.node == 0) \
    || (s0.node != checkSource))\
    // Source node mismatch.\
    return false;\
if (checkOutputID != s0.outputID)\
    // Output ID mismatch.\
    return false;
    return = {
        value = true
        desc = \c true if the connection exists, \c false otherwise
    }
}

# Pure virtual member functions.

# operations

# Global functions.

