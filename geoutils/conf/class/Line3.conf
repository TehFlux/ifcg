# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Line3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Plane3.hpp"'
        '"geoutils/Polygon3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Matrix3.hpp"'
        '"geoutils/Polygon2.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Line3
	shortDesc = Line (3D)
	title = Line (3D)
	longDesc = A line in three-dimensional space.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::Mapping::PointMapping
            include = ifmapping/PointMapping.hpp
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object");
        extendedCreate = true
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = p
        value = 0., 0., 0.
    }
    initializer[] = {
        name = u
        value = 1., 0., 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = p
        value = initP
    }
    initializer[] = {
        name = u
        value = initU
    }
    param[] = {
        name = initP
        type = const Ionflux::GeoUtils::Vector3&
        desc = Position vector
    }
    param[] = {
        name = initU
        type = const Ionflux::GeoUtils::Vector3&
        desc = Direction vector (u)
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = p
	desc = Position vector
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = u
	desc = Direction vector (u)
    copy = true
#    proxy = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = intersect
    const = true
	shortDesc = Intersect line
	longDesc = Calculate the intersection point of the line and another line.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = other
        desc = Line
    }
    param[] = {
        type = Ionflux::GeoUtils::Vector3&
        name = result
        desc = Intersection point
    }
    impl = <<<
Vector3 r;
try
{
    Matrix3 m;
    m.setC0(u);
    m.setC1(other.u.flip());
    m.setC2(Vector3::ZERO);
    r = m.solve(other.p - p);
} catch (GeoUtilsError& e)
{
    return false;
}
result = r[0] * u + p;
>>>
    return = {
        desc = \c true on success, \c false if no intersection exists
        value = true
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = intersect
    const = true
	shortDesc = Intersect plane
	longDesc = Calculate the intersection point of the line and the plane.
    param[] = {
        type = const Ionflux::GeoUtils::Plane3&
        name = plane
        desc = Plane
    }
    param[] = {
        type = Ionflux::GeoUtils::Vector3&
        name = result
        desc = Intersection point
    }
    impl = Vector3 r;\
try\
\{\
    Matrix3 m;\
    m.setC0(plane.getU());\
    m.setC1(plane.getV());\
    m.setC2(u.flip());\
    r = m.solve((p - plane.getP()));\
\} catch (GeoUtilsError& e)\
\{\
    return false;\
\}\
result = r[2] * u + p;
    return = {
        desc = \c true on success, \c false if no intersection exists
        value = true
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = intersectionInPoly
    const = true
	shortDesc = Polygon intersection test
	longDesc = Check for an intersection between the line and the plane defined by the first three vertices of the polygon. Returns \c true if the intersection point is within the polygon. Returns \c false otherwise. Throws GeoUtilsError if the polygon is not planar.
    param[] = {
        type = const Ionflux::GeoUtils::Polygon3&
        name = poly
        desc = Polygon
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = if (poly.getNumVertices() < 3)\
    throw GeoUtilsError("Polygon does not have enough vertices.");\
Plane3 p0 = poly.getPlane();\
/*\
// Check for parallelity and incidence.\
Vector3 pn = p0.getNormal();\
if (eq(pn * u, 0, t))\
\{\
    // Line is parallel to the plane.\
    if (eq(p.distanceToPlane(p0), 0, t))\
        // incidence\
        return true;\
    return false;\
\}\
*/\
Vector3 ip;\
if (!intersect(p0, ip))\
    return false;\
// Transform polygon and intersection point to tangent space.\
Matrix3 tm = p0.getTangentBase();\
Matrix3 tmInv = tm.invert();\
/* NOTE: The old Polygon3::transform() function was expected to \
         translate the polygon vertices into the origin coordinate \
         system. Since this has changed, we now have to translate the \
         polygon explicitly. */\
Polygon3 tp0(poly);\
// We have at least three vertices because of the check above.\
Vector3 v0 = tp0.getVertex(0)->getVector();\
tp0.translate(v0.flip());\
tp0.transform(tmInv);\
tp0.applyTransform();\
// Check planarity.\
Polygon2 tp;\
for (unsigned int i = 0; i < tp0.getNumVertices(); i++)\
\{\
    Vertex3* v = tp0.getVertex(i);\
    if (!eq(v->getZ(), 0., t))\
    \{\
        ostringstream message;\
        message << "[Line3::intersectionInPoly] "\
            "Polygon is not planar (v = " \
            + v->getString() + ").";\
        throw GeoUtilsError(message.str());\
    \} else\
        tp.addVertex(new Vertex2(v->getX(), v->getY()));\
\}\
for (unsigned int i = 0; i < tp0.getNumEdges(); i++)\
    tp.addEdge(new Edge(*tp0.getEdge(i)));\
Vertex3* origin = poly.getVertex(0);\
Vertex3 iv0(tmInv * (ip - origin->getVector()));\
Vertex2 iv(iv0.getX(), iv0.getY());
    return = {
        desc = Result of the intersection test
        value = tp.checkVertex(iv, t)
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Line3&
		name = other
		desc = Line
	}
    impl = if (!((p == other.p) && (u == other.u)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Line3&
		name = other
		desc = Line
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Point
	name = call
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = <<<
Vector3 result(p + value * u);
>>>
    return = {
        value = result.getPoint()
        desc = Value of the mapping at the specified parameter
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
std::ostringstream status;
status << "p = (" << p.getValueString() 
    << "), u = (" << u.getValueString();
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# Static member functions.
function.public[] = {
	spec = static
	type = const Ionflux::GeoUtils::Line3&
	name = axisX
	shortDesc = Get axis (X)
	longDesc = Get a line corresponding to the X axis.
	impl = <<<
static const Line3 l0(Ionflux::GeoUtils::Vector3::ZERO, 
    Ionflux::GeoUtils::Vector3::E_X);
>>>
    return = {
        value = l0
        desc = Line
    }
}
function.public[] = {
	spec = static
	type = const Ionflux::GeoUtils::Line3&
	name = axisY
	shortDesc = Get axis (Y)
	longDesc = Get a line corresponding to the Y axis.
	impl = <<<
static const Line3 l0(Ionflux::GeoUtils::Vector3::ZERO, 
    Ionflux::GeoUtils::Vector3::E_Y);
>>>
    return = {
        value = l0
        desc = Line
    }
}
function.public[] = {
	spec = static
	type = const Ionflux::GeoUtils::Line3&
	name = axisZ
	shortDesc = Get axis (Z)
	longDesc = Get a line corresponding to the Z axis.
	impl = <<<
static const Line3 l0(Ionflux::GeoUtils::Vector3::ZERO, 
    Ionflux::GeoUtils::Vector3::E_Z);
>>>
    return = {
        value = l0
        desc = Line
    }
}

# operations

# Global functions.

