# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Scatter.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Mapping'
	'namespace Ionflux::GeoUtils::Mapping'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifmapping/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
        '"geoutils/Shape3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/RandomNorm.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Compose3.hpp"'
        '"geoutils/Lookup3.hpp"'
        '"geoutils/AcceptVolume3.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Scatter
	shortDesc = Transform node: Scatter
	title = Transform node: Scatter
	longDesc = Scatter elements from the input group. The offset vectors for scattering are taken from the specified mapping and scaled with the specified scale vector, scale factor and delta scale factor. A constant offset can be specified that is added to all element offsets. A mapping can be specified to control the order in which offset vectors are read from the offset mapping. The scatter node also supports optional mappings for scaling individual elements of the input group according to their index or distance from the coordinate system center after scattering.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        #'logmessage'
        'upcast'
        'classinfo'
        'create'
        'param'
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = Param
        notExistsError = GeoUtilsError(std::string("Parameter '") \
        + paramID + "' does not exist.")
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = offset
	desc = Constant offset
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = offsetFunc
	desc = Offset mapping
	managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = offsetIndexFunc
	desc = Offset index mapping
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = offsetScale
	desc = Offset scale vector
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = offsetScaleFactor
	desc = Offset scale factor (all axes)
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = offsetDeltaScaleFactor
	desc = Offset delta scale factor (all axes)
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = offsetIndexOffset
	desc = Offset for the offset index
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = offsetIndexScale
	desc = Scale factor for the offset index
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = elementScale
	desc = Element scale vector
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = elementScaleFactor
	desc = Element scale factor (all axes)
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = elementDeltaScaleFactor
	desc = Element delta scale factor (all axes)
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = elementScaleIndexFunc
	desc = Element scale index mapping
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = elementScaleDistanceFunc
	desc = Element scale distance mapping function
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::CenteringMethod
	setFromType = Ionflux::GeoUtils::CenteringMethod
	name = centeringMethod
	desc = Centering method for element scaling
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_LUT_ENTRIES
    desc = Default number of lookup table entries
    value = 100
}
constant.public[] = {
    type = Ionflux::Mapping::Range
    name = OFFSET_INDEX_RANGE
    desc = Offset index range
    value = \{ 0., 1. \}
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = offset
        value = GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = offsetFunc
        value = 0
    }
    initializer[] = {
        name = offsetIndexFunc
        value = 0
    }
    initializer[] = {
        name = offsetScale
        value = GeoUtils::Vector3::E_SUM
    }
    initializer[] = {
        name = offsetScaleFactor
        value = 1.
    }
    initializer[] = {
        name = offsetDeltaScaleFactor
        value = 0.
    }
    initializer[] = {
        name = offsetIndexOffset
        value = 0.
    }
    initializer[] = {
        name = offsetIndexScale
        value = 1.
    }
    initializer[] = {
        name = elementScale
        value = GeoUtils::Vector3::E_SUM
    }
    initializer[] = {
        name = elementScaleFactor
        value = 1.
    }
    initializer[] = {
        name = elementDeltaScaleFactor
        value = 0.
    }
    initializer[] = {
        name = elementScaleIndexFunc
        value = 0
    }
    initializer[] = {
        name = elementScaleDistanceFunc
        value = 0
    }
    initializer[] = {
        name = centeringMethod
        value = CENTER_BARYCENTER
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    initializer[] = {
        name = offsetFunc
        value = 0
    }
    initializer[] = {
        name = offsetIndexFunc
        value = 0
    }
    initializer[] = {
        name = offsetScale
        value = initOffsetScale
    }
    initializer[] = {
        name = offsetScaleFactor
        value = initOffsetScaleFactor
    }
    initializer[] = {
        name = offsetDeltaScaleFactor
        value = initOffsetDeltaScaleFactor
    }
    initializer[] = {
        name = offsetIndexOffset
        value = initOffsetIndexOffset
    }
    initializer[] = {
        name = offsetIndexScale
        value = initOffsetIndexScale
    }
    initializer[] = {
        name = elementScale
        value = initElementScale
    }
    initializer[] = {
        name = elementScaleFactor
        value = initElementScaleFactor
    }
    initializer[] = {
        name = elementDeltaScaleFactor
        value = initElementDeltaScaleFactor
    }
    initializer[] = {
        name = elementScaleIndexFunc
        value = 0
    }
    initializer[] = {
        name = elementScaleDistanceFunc
        value = 0
    }
    initializer[] = {
        name = centeringMethod
        value = initCenteringMethod
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffset
        desc = Offset
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initOffsetFunc
        desc = Offset mapping
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initOffsetIndexFunc
        desc = Offset index mapping
        default = 0
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffsetScale
        desc = Offset scale vector
        default = GeoUtils::Vector3::E_SUM
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffsetScaleFactor
        desc = Offset scale factor (all axes)
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffsetDeltaScaleFactor
        desc = Offset delta scale factor (all axes)
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffsetIndexOffset
        desc = Offset index offset
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initOffsetIndexScale
        desc = Offset index scale
        default = 1.
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initElementScale
        desc = Element scale vector
        default = GeoUtils::Vector3::E_SUM
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initElementScaleFactor
        desc = Element scale factor (all axes)
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initElementDeltaScaleFactor
        desc = Element delta scale factor (all axes)
        default = 0.
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initElementScaleIndexFunc
        desc = Scale index mapping function
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initElementScaleDistanceFunc
        desc = Scale distance mapping function
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::CenteringMethod
        name = initCenteringMethod
        desc = Centering method
        default = CENTER_BARYCENTER
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = setOffsetFunc(initOffsetFunc);\
setOffsetIndexFunc(initOffsetIndexFunc);\
setElementScaleIndexFunc(initElementScaleIndexFunc);\
setElementScaleDistanceFunc(initElementScaleDistanceFunc);
}

# Destructor.
#destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
offset = other.offset;\
setOffsetFunc(other.offsetFunc);\
setOffsetIndexFunc(other.offsetIndexFunc);\
offsetScale = other.offsetScale;\
offsetScaleFactor = other.offsetScaleFactor;\
offsetDeltaScaleFactor = other.offsetDeltaScaleFactor;\
offsetIndexOffset = other.offsetIndexOffset;\
offsetIndexScale = other.offsetIndexScale;\
elementScale = other.elementScale;\
elementScaleFactor = other.elementScaleFactor;\
elementDeltaScaleFactor = other.elementDeltaScaleFactor;\
setElementScaleIndexFunc(other.elementScaleIndexFunc);\
setElementScaleDistanceFunc(other.elementScaleDistanceFunc);\
centeringMethod = other.centeringMethod;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (offsetFunc == 0)\
    throw GeoUtilsError("Offset mapping not set.");\
if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
/* Since we are going to manipulate the individual elements, \
   any existing group transformations must be applied first. */\
g0->applyTransform();\
// Process elements from the input group.\
unsigned int numSourceItems = g0->getNumItems();\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "START: Group: barycenter = " << g0->getBarycenter()\
    << ", bounds.center = " << g0->getBounds().getCenter();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */\
for (unsigned int i = 0; i < numSourceItems; i++)\
\{\
    TransformableObject* o0 = g0->getItem(i);\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Processing object: " << o0->getClassName() \
        << " (barycenter = " << o0->getBarycenter() << ")";\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    // Calculate the element offset.\
    MappingValue i0 = Ionflux::Mapping::wrap(\
        static_cast<MappingValue>(i) / (numSourceItems - 1.) \
        * offsetIndexScale + offsetIndexOffset, OFFSET_INDEX_RANGE);\
    if (offsetIndexFunc != 0)\
        i0 = (*offsetIndexFunc)(i0);\
    Vector3 v0((*offsetFunc)(i0));\
    // Scale the offset vector.\
    Vector3 s1((offsetScaleFactor + i * offsetDeltaScaleFactor) \
        * offsetScale);\
    v0 = offset + v0.multElements(s1);\
    // Translate the object.\
    o0->translate(v0);\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "After translation: barycenter = " << o0->getBarycenter();\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    // Calculate the element scale.\
    Vector3 s0((elementScaleFactor + i * elementDeltaScaleFactor) \
        * elementScale);\
    if (elementScaleIndexFunc != 0)\
        // Multiply element scaling according to index mapping.\
        s0 = s0.multElements(\
            (*elementScaleIndexFunc)(static_cast<double>(i) \
                / (numSourceItems - 1)));\
    // Determine the center vector.\
    Vector3 c0;\
    if (centeringMethod == CENTER_BOUNDS)\
        c0 = o0->getBounds().getCenter();\
    else\
    if (centeringMethod == CENTER_BARYCENTER)\
        c0 = o0->getBarycenter();\
    else\
        c0 = Vector3::ZERO;\
    if (elementScaleDistanceFunc != 0)\
    \{\
        // Multiply element scaling according to distance mapping.\
        double r0 = c0.norm();\
        s0 = s0.multElements((*elementScaleDistanceFunc)(r0));\
    \}\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Scaling center: " << c0 << " (v0 = " \
        << v0 << ", s0 = " << s0 << ", centeringMethod = " \
        << centeringMethod << ").";\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    // Scale the object.\
    o0->translate(c0.flip());\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Before scaling: barycenter = " << o0->getBarycenter();\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    o0->scale(s0);\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "After scaling: barycenter = " << o0->getBarycenter();\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    o0->translate(c0);\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Result: barycenter = " << o0->getBarycenter() \
        << ", bounds.center = " << o0->getBounds().getCenter() \
        << ", v0 = " << v0;\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
\}\
/* <---- DEBUG ----- //\
message.str("");\
message << "END: Group: barycenter = " << g0->getBarycenter() \
    << ", bounds = " << g0->getBounds() << ", bounds.center = " \
    << g0->getBounds().getCenter();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */\
addOutput(g0);
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = createLUT
	shortDesc = Create offset lookup table
	longDesc = Create an offset lookup table suitable for use with the scatter node. If the optional source functions are specified, those functions will be used as the source for generating coordinate values for the lookup table. A random normal generator with the sppecified parameters will be used in place of any coordinate functions that are not specified. If an optional reference object is specified, all generated offsets will be contained within the reference object. The mapping that is returned will not be referenced and must be managed by the caller.
	param[] = {
	    type = unsigned int
	    name = numEntries
	    desc = Number of entries in the table
	    default = DEFAULT_NUM_LUT_ENTRIES
	}
	param[] = {
	    type = const Ionflux::GeoUtils::Vector3&
	    name = stdDev
	    desc = Standard deviation for normal distribution
	    default = Ionflux::GeoUtils::Vector3::E_SUM
	}
	param[] = {
	    type = const Ionflux::GeoUtils::Vector3&
	    name = mean
	    desc = Mean value for normal distribution
	    default = Ionflux::GeoUtils::Vector3::ZERO
	}
	param[] = {
	    type = Ionflux::GeoUtils::Shape3*
	    name = refObject
	    desc = Reference object
	    default = 0
	}
	param[] = {
	    type = Ionflux::Mapping::Mapping*
	    name = sourceFuncX
	    desc = Source function (X)
	    default = 0
	}
	param[] = {
	    type = Ionflux::Mapping::Mapping*
	    name = sourceFuncY
	    desc = Source function (Y)
	    default = 0
	}
	param[] = {
	    type = Ionflux::Mapping::Mapping*
	    name = sourceFuncZ
	    desc = Source function (Z)
	    default = 0
	}
    impl = // Create default source mappings if necessary.\
RandomNorm* m0 = 0;\
if (sourceFuncX == 0)\
\{\
    m0 = RandomNorm::create();\
    m0->setMean(mean.getX0());\
    m0->setStdDev(stdDev.getX0());\
    sourceFuncX = m0;\
\}\
if (sourceFuncY == 0)\
\{\
    m0 = RandomNorm::create();\
    m0->setMean(mean.getX1());\
    m0->setStdDev(stdDev.getX1());\
    sourceFuncY = m0;\
\}\
if (sourceFuncZ == 0)\
\{\
    m0 = RandomNorm::create();\
    m0->setMean(mean.getX2());\
    m0->setStdDev(stdDev.getX2());\
    sourceFuncZ = m0;\
\}\
// Create the lookup table.\
Compose3* m1 = Compose3::create();\
m1->setFuncX0(sourceFuncX);\
m1->setFuncX1(sourceFuncY);\
m1->setFuncX2(sourceFuncZ);\
Lookup3* result = Lookup3::create();\
if (refObject != 0)\
\{\
    // Insert the reference volume check.\
    AcceptVolume3* m2 = AcceptVolume3::create();\
    m2->setRefObject(refObject);\
    m2->setSource(m1);\
    result->setSource(m2);\
\} else\
    // Use the source mappings in unmodified form.\
    result->setSource(m1);\
result->update(numEntries);
    return = {
        value = result
        desc = Offset lookup table
    }
}

# Pure virtual member functions.

# operations

# Global functions.

