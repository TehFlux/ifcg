# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ImageItem.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"altjira/ColorBlender.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Image.hpp"'
        '"geoutils/ImageSource.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ImageItem
	shortDesc = Image item
	title = Image item
	longDesc = A box bounds item that represents an image.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
		other[] = {
		    name = Ionflux::GeoUtils::BoxBoundsItem
		    include = geoutils/BoxBoundsItem.hpp
		    hasClassInfo = true
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'logmessage'
        'classinfo'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Image*
	setFromType = Ionflux::GeoUtils::Image*
	name = image
	desc = Image
	managed = true
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = imageID
	desc = Image ID
}
property.protected[] = {
	type = Ionflux::GeoUtils::ImageSourceType
	setFromType = Ionflux::GeoUtils::ImageSourceType
	name = sourceType
	desc = Image source type
}
property.protected[] = {
	type = Ionflux::Altjira::ColorBlender*
	setFromType = Ionflux::Altjira::ColorBlender*
	name = blender
	desc = Color blender
	managed = true
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = numUsers
	desc = Number of users of the image
}
property.protected[] = {
	type = Ionflux::GeoUtils::ImageSource*
	setFromType = Ionflux::GeoUtils::ImageSource*
	name = source
	desc = Image source
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = Ionflux::GeoUtils::Vector3
	name = offset
	desc = Offset vector
}

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = SOURCE_TYPE_UNDEFINED
    desc = Image source type: undefined
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = SOURCE_TYPE_FILE
    desc = Image source type: file
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = SOURCE_TYPE_SOURCE
    desc = Image source type: source
    value = 2
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = image
        value = 0
    }
    initializer[] = {
        name = imageID
        value = ""
    }
    initializer[] = {
        name = sourceType
        value = SOURCE_TYPE_UNDEFINED
    }
    initializer[] = {
        name = blender
        value = 0
    }
    initializer[] = {
        name = numUsers
        value = 0
    }
    initializer[] = {
        name = source
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = image
        value = 0
    }
    initializer[] = {
        name = imageID
        value = initImageID
    }
    initializer[] = {
        name = sourceType
        value = initSourceType
    }
    initializer[] = {
        name = blender
        value = 0
    }
    initializer[] = {
        name = numUsers
        value = 0
    }
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    param[] = {
        type = const std::string&
        name = initImageID
        desc = Image ID
    }
    param[] = {
        type = Ionflux::GeoUtils::ImageSourceType
        name = initSourceType
        desc = Image source type
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffset
        desc = Offset vector
        default = Ionflux::GeoUtils::Vector3::ZERO
    }
    param[] = {
        type = Ionflux::Altjira::ColorBlender*
        name = initBlender
        desc = Color blender
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Image*
        name = initImage
        desc = Image
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::ImageSource*
        name = initSource
        desc = Image source
        default = 0
    }
    impl = setImage(initImage);\
setBlender(initBlender);\
setSource(initSource);
}

# Destructor.
destructor.impl = if (numUsers > 0)\
\{\
    std::ostringstream status;\
    status << "Image data is still in use (" << numUsers \
        << " users left).";\
    log(IFLogMessage(status.str(), VL_WARNING, this, \
        "~ImageItem"));\
\}

# Protected member functions.

# Public member functions.
function.copy.impl = if (*this == other)\
    return *this;\
BoxBoundsItem::operator=(other);\
setImage(other.image);\
setImageID(other.imageID);\
setSourceType(other.sourceType);\
numUsers = other.numUsers;
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear item
	longDesc = Clears the bounds data of the item.
	impl = BoxBoundsItem::clear();\
setImage(0);\
setImageID("");\
setSourceType(SOURCE_TYPE_UNDEFINED);\
numUsers = 0;
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update all state according to the image source.
	impl = acquire();\
if (image != 0)\
\{\
    Range3 b0 = image->getBounds();\
    bounds.setBounds(b0.getCenter() + offset);\
    bounds.extend(b0.getCenter() + offset - b0.getRadius());\
    bounds.extend(b0.getCenter() + offset + b0.getRadius());\
\} else\
    bounds.setBounds(offset);\
updateRadiusAndCenter();\
release();
}
function.public[] = {
	spec = virtual
	type = void
	name = acquire
	shortDesc = Acquire image data
	longDesc = Increment the user count for the image data. Loads the image data from the source if it is not currently loaded.
	impl = if (numUsers == UINT_MAX)\
    throw GeoUtilsError("[ImageItem::acquire] " \
        "Overflow in number of users!");\
if (numUsers == 0)\
    load();\
numUsers++;
}
function.public[] = {
	spec = virtual
	type = void
	name = release
	shortDesc = Release image data
	longDesc = Decrement the user count for the image data. Unloads the image data if there are no more users.
	impl = if (numUsers == 0)\
    throw GeoUtilsError("[ImageItem::release] " \
        "Attempt to release image data with zero users!");\
numUsers--;
if (numUsers == 0)\
    clearData();
}
function.public[] = {
	spec = virtual
	type = void
	name = load
	shortDesc = Load image data
	longDesc = Load the image data from the source.
	impl = if (sourceType == SOURCE_TYPE_FILE)\
\{\
    Image* img0 = Image::create();\
    img0->loadFromFile(imageID);\
    setImage(img0);\
    return;\
\}\
if (sourceType == SOURCE_TYPE_SOURCE)\
\{\
    if (source == 0)\
        throw GeoUtilsError("[ImageItem::load] " \
            "Image source not set!");\
    Image* img0 = source->getImage(imageID);\
    setImage(img0);\
    return;\
\}\
std::ostringstream status;\
status << "[ImageItem::load] Unknown source type for loading (" \
    << sourceType << ")!";\
throw GeoUtilsError(status.str());
}
function.public[] = {
	spec = virtual
	type = void
	name = clearData
	shortDesc = Clear data
	longDesc = Clear the image data.
	impl = setImage(0);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
	state << getClassName() << "[center: " << center.getString() \
    << ", rVec: " << rVec.getString() << ", itemID: '" << itemID \
    << "', imageID: '" << imageID << "', sourceType: " \
    << getSourceTypeString(sourceType) << ", offset: " \
    << offset << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# Static member functions.
function.public[] = {
	spec = static
	type = std::string
	name = getSourceTypeString
	shortDesc = Get string representation for source type
	longDesc = Get a string representation for a source type.
    param[] = {
        type = Ionflux::GeoUtils::ImageSourceType
        name = sourceType
        desc = Image source type
    }
	impl = if (sourceType == SOURCE_TYPE_UNDEFINED)\
    return "<undefined>";\
if (sourceType == SOURCE_TYPE_FILE)\
    return "FILE";\
if (sourceType == SOURCE_TYPE_SOURCE)\
    return "SOURCE";
    return = {
        value = "<unknown>"
        desc = String representation
    }
}

# operations

# Global functions.

