# =================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# VectorN.conf              Class configuration.
# =================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	    '"ifmapping/Mapping.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/Interpolator.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
	    '"ifmapping/Linear.hpp"'
	    '"ifmapping/Cubic.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/LinearInterpolator.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VectorN
	shortDesc = Vector (N-D)
	title = Vector (N-D)
	longDesc = A numeric N-dimensional vector.
	group.name = ifphysim
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::GeoUtils::Vector
            include = geoutils/Vector.hpp
            hasClassInfo = true
            xml = {
                enabled = true
                include = geoutils/Vector
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = vn
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = numElements
    desc = Number of elements
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = numElements
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = numElements
        value = initNumElements
    }
    param[] = {
        type = unsigned int
        name = initNumElements
        desc = Number of elements
    }
    impl = zero();
}
constructor.public[] = {
    initializer[] = {
        name = numElements
        value = initNumElements
    }
    param[] = {
        type = unsigned int
        name = initNumElements
        desc = Number of elements
    }
    param[] = {
        type = double
        name = x0
        desc = element (0)
    }
    param[] = {
        type = double
        name = x1
        desc = element (1)
        default = 0.
    }
    param[] = {
        type = double
        name = x2
        desc = element (2)
        default = 0.
    }
    param[] = {
        type = double
        name = x3
        desc = element (3)
        default = 0.
    }
    param[] = {
        type = double
        name = x4
        desc = element (4)
        default = 0.
    }
    param[] = {
        type = double
        name = x5
        desc = element (5)
        default = 0.
    }
    param[] = {
        type = double
        name = x6
        desc = element (6)
        default = 0.
    }
    param[] = {
        type = double
        name = x7
        desc = element (7)
        default = 0.
    }
    param[] = {
        type = double
        name = x8
        desc = element (8)
        default = 0.
    }
    param[] = {
        type = double
        name = x9
        desc = element (9)
        default = 0.
    }
    param[] = {
        type = double
        name = x10
        desc = element (10)
        default = 0.
    }
    param[] = {
        type = double
        name = x11
        desc = element (11)
        default = 0.
    }
    param[] = {
        type = double
        name = x12
        desc = element (12)
        default = 0.
    }
    impl = <<<
zero();
setElements(x0, x1, x2, x3, x4, x5, x6, 
    x7, x8, x9, x10, x11, x12);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
unsigned int tNumElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
/* <---- DEBUG ----- //
std::cerr << "[GeoUtils::VectorN::operator=] "
    "tNumElements = " << tNumElements << ", oNumElements = " 
    << oNumElements << std::endl;
// ----- DEBUG ----> */
if ((tNumElements != oNumElements)
    && (elements != 0))
{
    delete[] elements;
    elements = 0;
}
numElements = oNumElements;
Ionflux::GeoUtils::Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = interpolate
	shortDesc = Interpolate vectors
	longDesc = Interpolate vectors.
    param[] = {
        type = const Ionflux::GeoUtils::VectorN&
        name = other
        desc = Vector
    }
    param[] = {
        type = double
        name = t
        desc = Interpolation parameter
        default = 0.5
    }
    param[] = {
        type = Ionflux::GeoUtils::Interpolator*
        name = interp
        desc = Interpolator
        default = 0
    }
    impl = <<<
bool ownInterp = false;
if (interp == 0)
{
    ownInterp = true;
    interp = Ionflux::GeoUtils::LinearInterpolator::create();
    addLocalRef(interp);
}
unsigned int numElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
if (numElements > oNumElements)
{
    std::ostringstream status;
    status << "Vector size mismatch (this.numElements = " 
        << numElements << ", other.numElements = " << oNumElements 
        << ").";
    throw GeoUtilsError(getErrorString(status.str(), 
        "interpolate"));
}
VectorN result(numElements);
for (unsigned int i = 0; i < numElements; i++)
{
    interp->setValues(elements[i], other.elements[i]);
    result.elements[i] = (*interp)(t);
}
if (ownInterp)
    removeLocalRef(interp);
>>>
    return = {
        desc = Interpolated vector
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = operator+
	const = true
	shortDesc = Add vectors
	longDesc = Add vectors.
	param[] = {
		type = const Ionflux::GeoUtils::VectorN&
		name = other
		desc = Vector
	}
    impl = VectorN result(*this);\
result.addIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = operator-
	const = true
	shortDesc = Subtract vectors
	longDesc = Subtract vectors.
	param[] = {
		type = const Ionflux::GeoUtils::VectorN&
		name = other
		desc = Vector
	}
    impl = VectorN result(*this);\
result.subtractIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = operator*
	const = true
	shortDesc = Multiply vector by scalar
	longDesc = Multiply vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = VectorN result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = operator*
	const = true
	shortDesc = Multiply vectors (dot product)
	longDesc = Multiply vectors (dot product).
	param[] = {
		type = const Ionflux::GeoUtils::VectorN&
		name = other
		desc = Vector
	}
    impl = 
	return = {
        value = dot(other)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::VectorN
	name = operator/
	const = true
	shortDesc = Divide vector by scalar
	longDesc = Divide vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = VectorN result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::VectorN*
	name = sample
	shortDesc = Sample mapping
	longDesc = Sample a mapping uniformly in the specified interval. Return the  sample values as a new vector.
	param[] = {
		type = const Ionflux::Mapping::Mapping&
		name = mapping
		desc = mapping
	}
	param[] = {
		type = unsigned int
		name = numPoints
		desc = sample points
	}
	param[] = {
		type = double
		name = t0
		desc = start parameter
		default = 0.
	}
	param[] = {
		type = double
		name = t1
		desc = end parameter
		default = 1.
	}
    impl = <<<
if (t1 < t0)
{
    std::ostringstream status;
    status << "[Vector::sample] "
        "Parameter t1 is smaller than parameter t0 (t0 = " << t0 
        << ", t1 = " << t1 << ").";
    throw GeoUtilsError(status.str());
}
VectorN* result = 0;
if (numPoints == 1)
{
    result = VectorN::create(1, mapping(0.5 * (t1 - t0)));
    return result;
}
result = VectorN::create(numPoints);
double dt = 1. / (numPoints - 1);
double t = t0;
unsigned int k = 0;
while ((t <= t1) 
    && (k < numPoints))
{
    result->setElement(k, mapping(t));
    t += dt;
    k += 1;
}
>>>
	return = {
        value = result
	    desc = New vector
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::VectorN*
	name = linear
	shortDesc = Sample linear mapping
	longDesc = Sample a linear mapping uniformly in the specified interval. Return the sample values as a new vector.
	param[] = {
		type = unsigned int
		name = numPoints
		desc = sample points
	}
	param[] = {
		type = double
		name = t0
		desc = start parameter
		default = 0.
	}
	param[] = {
		type = double
		name = t1
		desc = end parameter
		default = 1.
	}
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = lower
        desc = Lower value
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = upper
        desc = Upper value
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = scale
        desc = Scale factor
        default = 1.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = offset
        desc = Offset
        default = 0.
    }
    impl = <<<
Ionflux::Mapping::Linear m(lower, upper, scale, offset);
VectorN* result = VectorN::sample(m, numPoints, t0, t1);
>>>
	return = {
        value = result
	    desc = New vector
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::VectorN*
	name = cubic
	shortDesc = Sample cubic mapping
	longDesc = Sample a cubic mapping uniformly in the specified interval. Return the sample values as a new vector.
	param[] = {
		type = unsigned int
		name = numPoints
		desc = sample points
	}
	param[] = {
		type = double
		name = t0
		desc = start parameter
		default = 0.
	}
	param[] = {
		type = double
		name = t1
		desc = end parameter
		default = 1.
	}
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = lower
        desc = Lower value
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = upper
        desc = Upper value
        default = 1.
    }
    impl = <<<
Ionflux::Mapping::Cubic m(lower, upper);
VectorN* result = VectorN::sample(m, numPoints, t0, t1);
>>>
	return = {
        value = result
	    desc = New vector
    }
}

# Pure virtual member functions.

# operations

# Global functions.

