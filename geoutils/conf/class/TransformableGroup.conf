# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TransformableGroup.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Matrix4.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/transformutils.hpp"'
#        '"geoutils/Clock.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TransformableGroup
	shortDesc = Transformable object group
	title = Transformable object group
	longDesc = A group of transformable objects that is itself a transformable object. This allows to build hierarchies of transformable objects.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
		}
	}
    features = {
        'copy'
#        'logmessage'
        'classinfo'
        'upcast'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = transformable_group
}

# Public constructors.
constructor.copy.impl = *this = other;
#constructor.default = {
#    impl = 
#}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = items
    desc = Item vector
    element = {
        type = Ionflux::GeoUtils::TransformableObject*
        name = Item
        #plural = Items
        managed = true
        valueType = object
        createExpr = TransformableObject::create()
    }
    xml.child.name = items
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = Recalculate bounds
	longDesc = Recalculate the bounds for the group.
	impl = <<<
TransformableObject::recalculateBounds();
const TransformableGroup* g0 = this;
TransformableGroup* g1 = 0;
if (useTransform() || useVI())
{
    // Adjust for transformation.
    g1 = copy();
    addLocalRef(g1);
    g1->applyTransform();
    g0 = g1;
}
Ionflux::GeoUtils::TransformableObjectVector::const_iterator i;
bool e0 = true;
for (i = g0->items.begin(); i != g0->items.end(); i++)
{
    TransformableObject* to0 = 
        Ionflux::ObjectBase::nullPointerCheck(*i, this, 
            "recalculateBounds", "Transformable object");
    Range3 r0(to0->getBounds());
    if (e0)
    {
        boundsCache->setBounds(r0);
        e0 = false;
    } else
        boundsCache->extend(r0);
}
if (g1 != 0)
    removeLocalRef(g1);
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
TransformableObject::operator=(other);
TransformableObjectVector v0;
for (TransformableObjectVector::const_iterator i = 
    other.items.begin(); i != other.items.end(); i++)
{
    TransformableObject* ot0 = 
        Ionflux::ObjectBase::nullPointerCheck(*i, this, 
            "operator=", "Transformable object");
    v0.push_back(ot0->copy());
}
clearItems();
addItems(v0);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Removes all items and resets state.
    impl = <<<
clearItems();
TransformableObject::clear();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformations
	longDesc = Apply transformations that have been accumulated in the transformation matrices. The tolerance is used to compare matrices against the identity matrix and avoid unnecessary transformations.
	param[] = {
	    type = bool
	    name = recursive
	    desc = Apply transformations recursively
	    default = false
	}
	impl = Ionflux::GeoUtils::applyTransform(*this, items, \
    recursive, "Transformable object");
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	const = true
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for all polygons.
	impl = <<<
Vector3 vSum;
Ionflux::GeoUtils::TransformableObjectVector::const_iterator i;
for (i = items.begin(); i < items.end(); i++)
    vSum = vSum + (*i)->getBarycenter();
vSum = vSum / items.size();
// Adjust for transformation.
Vertex3 v0(vSum);
if (useTransform())
    v0.transform(*getTransformMatrix());
if (useVI())
    v0.transformVI(*getViewMatrix(), getImageMatrix());
>>>
    return = {
        value = v0.getVector()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = TransformableObject::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = TransformableObject::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = TransformableObject::transformVI(view, image);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableGroup&
	name = flatten
	shortDesc = Flatten hierarchy
	longDesc = Flatten the hierarchy starting at this group by finding all leaf items and replacing the items in the group with the set of leaf items.
    impl = TransformableGroup g0;\
getLeafItems(g0);\
clearItems();\
for (TransformableObjectVector::iterator i = \
    g0.items.begin(); i != g0.items.end(); i++)\
    addItem(*i);
    return = {
        value = *this
        desc = The group containing leaf items only
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = getLeafItems
	shortDesc = Get leaf items
	longDesc = Get leaf items of the group hierarchy starting at this group, i.e. all items that are not themselves groups. The leaf items are added to the specified transformable group.
	param[] = {
		type = Ionflux::GeoUtils::TransformableGroup&
		name = target
		desc = Target group
	}
	param[] = {
		type = unsigned int
		name = level
		desc = Recursion level
		default = 0
	}
    impl = if (level == 0)\
    // If this is the top level, apply all transforms.\
    applyTransform(true);\
for (TransformableObjectVector::const_iterator i = \
    items.begin(); i != items.end(); i++)\
\{\
    TransformableGroup* g1 = upcast(*i);\
    if (g1 != 0)\
        // Add leaf items recursively.\
        g1->getLeafItems(target, level + 1);\
    else\
        target.addItem(*i);\
\}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getDebugInfo
	shortDesc = Get debugging information
	longDesc = Get a representation of the group and its contents that is usable for debugging.
	param[] = {
		type = bool
		name = expand
		desc = Display information about non-group items
		default = true
	}
	param[] = {
		type = unsigned int
		name = level
		desc = Recursion level
		default = 0
	}
    impl = <<<
std::ostringstream result;
std::ostringstream prefix;
for (unsigned int i = 0; i < (2 * level); i++)
    prefix << " ";
result << prefix.str() << getClassName() << ": bounds = " << getBounds() 
    << ", barycenter = " << getBarycenter() << ", numItems = " 
    << items.size()<< "\n";
if (useTransform())
    result << prefix.str() << "transformMatrix = [" 
        << getTransformMatrix()->getValueString() << "]\n";
if (useVI())
{
    result << prefix.str() << "viewMatrix = [" 
        << getViewMatrix()->getValueString() << "]\n";
    if (getImageMatrix() != 0)
        result << prefix.str() << "imageMatrix = [" 
            << getImageMatrix()->getValueString() << "]\n";
}
if (items.size() == 0)
{
    result << prefix.str() << "(no items)";
    return result.str();
}
result << prefix.str() << "Items:\n";
unsigned int notShown = 0;
for (unsigned int i = 0; i < items.size(); i++)
{
    TransformableObject* it0 = items[i];
    TransformableGroup* g0 = upcast(it0);
    if (g0 != 0)
    {
        // Append debug info recursively.
        if (i != 0)
            result << prefix.str() << "\n";
        result << g0->getDebugInfo(expand, level + 1);
    } else
    {
        if (expand)
        {
            if (i != 0)
                result << prefix.str() << "\n";
            result << prefix.str() << it0->getClassName() << " (bounds = " 
                << it0->getBounds() << ", barycenter = " 
                << it0->getBarycenter() << ")";
        } else
            notShown++;
    }
}
if (!expand 
    && (notShown > 0))
    result << prefix.str() << "  (" << notShown << " items not shown)";
>>>
    return = {
        value = result.str()
        desc = Debugging information
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
std::ostringstream status;
if (items.size() > 0)
{
    // items
    status << "items: ";
    bool e0 = true;
    for (TransformableObjectVector::const_iterator i = 
        items.begin(); i != items.end(); i++)
    {
        TransformableObject* to0 = *i;
        if (!e0)
            status << ", ";
        else
            e0 = false;
        if (to0 != 0)
            status << to0->getString();
        else
            status << "<null>";
    }
}
// transformable object data
std::string ts0(TransformableObject::getValueString());
if (ts0.size() > 0)
    status << "; " << ts0;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# operations

# Global functions.

