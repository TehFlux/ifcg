# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Range.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Range
	shortDesc = Range of values
	title = Range of values
	longDesc = A range of values.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = rMin
        value = 0.
    }
    initializer[] = {
        name = rMax
        value = 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = rMin
        value = initRMin
    }
    initializer[] = {
        name = rMax
        value = initRMax
    }
    param[] = {
        name = initRMin
        type = double
        desc = Range minimum
    }
    param[] = {
        name = initRMax
        type = double
        desc = Range maximum
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = rMin
	desc = Minimum value
    copy = true
#    proxy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = rMax
	desc = Maximum value
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::ObjectBase::DoubleVector
	setFromType = const Ionflux::ObjectBase::DoubleVector&
	name = bounds
	desc = Bounds
#    copy = true
    proxy = true
    impl.get = DoubleVector result;\
result.push_back(rMin);\
result.push_back(rMax);\
return result;
    impl.set = if (newBounds.size() < 2)\
    throw GeoUtilsError("Not enough elements in bounds vector!");\
rMin = newBounds[0];\
rMax = newBounds[1];
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = extend
	shortDesc = Extend range
	longDesc = Extend the range to contain the specified value.
    param[] = {
        type = double
        name = value
        desc = Value
    }
    impl = if (value < rMin)\
    rMin = value;\
if (value > rMax)\
    rMax = value;
}
function.public[] = {
	spec = virtual
	type = double
	name = getCenter
    const = true
	shortDesc = Get center
	longDesc = Get the center of the range.
    impl = 
    return = {
        desc = Center of the range
        value = 0.5 * (rMin + rMax)
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = getRadius
    const = true
	shortDesc = Get radius
	longDesc = Get the radius of the range.
    impl = 
    return = {
        desc = Radius of the range
        value = 0.5 * (rMax - rMin)
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = getExtent
    const = true
	shortDesc = Get extent
	longDesc = Get the extent of the range.
    impl = 
    return = {
        desc = Extent of the range
        value = rMax - rMin
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = getValue
    const = true
	shortDesc = Get value
	longDesc = Get the value inside the range corresponding to the parameter s, where s = 0 returns the minimum value and s = 1 returns the maximum value.
    param[] = {
        type = double
        name = s
        desc = Parameter
    }
    impl = 
    return = {
        desc = Value from the range
        value = rMin + (rMax - rMin) * s
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = clamp
    const = true
	shortDesc = Clamp value
	longDesc = Clamp the value to the range.
    param[] = {
        type = double
        name = value
        desc = Value
    }
    impl = if (value < rMin)\
    return rMin;\
if (value > rMax)\
    return rMax;
    return = {
        desc = Clamped value
        value = value
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = getClampedValue
    const = true
	shortDesc = Get value
	longDesc = Get the value inside the range corresponding to the parameter s, where s = 0 returns the minimum value and s = 1 returns the maximum value. The result is clamped to the range.
    param[] = {
        type = double
        name = s
        desc = Parameter
    }
    impl = 
    return = {
        desc = Clamped value from the range
        value = clamp(getValue(s))
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::RangeCompResult
	name = compare
    const = true
	shortDesc = Compare ranges
	longDesc = Returns RANGE_EQUAL if the ranges are equal within the tolerance, i.e. they have the same rMin and rMax values. Returns RANGE_OTHER_CONTAINS  if the range on which the method is called is contained within the other range, and RANGE_FIRST_CONTAINS if the other range is contained within the range on which the method is called. Returns RANGE_OVERLAP if the ranges overlap. Returns RANGE_DISJOINT if the ranges are disjoint.
    param[] = {
        type = const Ionflux::GeoUtils::Range&
        name = other
        desc = Range
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = if (eq(rMin, other.rMin, t) && eq(rMax, other.rMax, t))\
    return RANGE_EQUAL;\
if (lt(rMax, other.rMin, t) || gt(rMin, other.rMax, t))\
    return RANGE_DISJOINT;\
if (ltOrEq(other.rMin, rMin, t) && gtOrEq(other.rMax, rMax, t))\
    return RANGE_OTHER_CONTAINS;\
if (ltOrEq(rMin, other.rMin, t) && gtOrEq(rMax, other.rMax, t))\
    return RANGE_FIRST_CONTAINS;
    return = {
        desc = Result of the comparison
        value = RANGE_OVERLAP
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = isInRange
    const = true
	shortDesc = Range check
	longDesc = Check whether the value is contained in the range.
    param[] = {
        type = double
        name = v
        desc = Value
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = if (lt(v, rMin, t) || gt(v, rMax, t))\
    return false;
    return = {
        desc = \c true if the value is within the range, \c false otherwise
        value = true
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setBounds
	shortDesc = Set bounds
	longDesc = Set the bounds of the range.
    param[] = {
        type = double
        name = rMinNew
        desc = Range minimum
    }
    param[] = {
        type = double
        name = rMaxNew
        desc = Range maximum
    }
    impl = rMin = rMinNew;\
rMax = rMaxNew;
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Range&
		name = other
		desc = Range
	}
    impl = if (!((rMin == other.rMin) && (rMax == other.rMax)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Range&
		name = other
		desc = Range
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << rMin \
    << ", " << rMax << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

