# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# VectorSetSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/VectorSet.hpp"'
    }
}

# forward declarations
forward = {
    'class VectorSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VectorSetSet
	shortDesc = Set of vector sets
	title = Set of vector sets
	longDesc = A set of vector sets.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = vectorsetset
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initVectorSets
        type = Ionflux::GeoUtils::VectorSetVector&
        desc = Vector sets
    }
    impl = addVectorSets(initVectorSets);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = vectorSets
    desc = Vector of vector sets
    element = {
        type = Ionflux::GeoUtils::VectorSet*
        name = VectorSet
        #plural = VectorSets
        managed = true
        valueType = object
        createExpr = VectorSet::create()
    }
    xml.child = {
        name = vector_sets
        elementName = vectorsetvec
    }
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
VectorSetVector v0;
for (VectorSetVector::const_iterator i = other.vectorSets.begin(); 
    i != other.vectorSets.end(); i++)
    v0.push_back((*i)->copy());
clearVectorSets();
addVectorSets(v0);
>>>
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
bool e0 = true;
for (VectorSetVector::const_iterator i = vectorSets.begin(); 
    i != vectorSets.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "(" << (*i)->getValueString() << ")";
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

