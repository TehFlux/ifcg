# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# FBXNodeSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/fbxtypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<fstream>'
        '<iomanip>'
        '<algorithm>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/FBXNode.hpp"'
    }
}

# forward declarations
forward = {
    'class FBXNode'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = FBXNodeSet
	shortDesc = FBX node set
	title = FBX node set
	longDesc = A set of FBX nodes.
	group.name = geoutils
    base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        ## other base classes
        #other[] = {
		#	name = Ionflux::GeoUtils::TransformableObject
        #    include = geoutils/TransformableObject.hpp
		#}
    }
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    #xml.elementName = fbxnodeset
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initNodes
        type = Ionflux::GeoUtils::FBXNodeVector&
        desc = Nodes
    }
    impl = addNodes(initNodes);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = nodes
    desc = Node vector
    element = {
        type = Ionflux::GeoUtils::FBXNode*
        name = Node
        managed = true
        createExpr = FBXNode::create()
        valueType = object
    }
    #xml.child = {
    #    name = nodes
    #    elementName = fbxnodevec
    #}
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = unsigned int
	name = findNodesByAttributeType
	shortDesc = Find nodes by attribute type
	longDesc = Find nodes from the set by attribute type.
	param[] = {
	    type = Ionflux::GeoUtils::FBXNodeAttributeType
	    name = t
	    desc = node attribute type
	}
	param[] = {
	    type = Ionflux::GeoUtils::FBXNodeSet&
	    name = target
	    desc = where to store the nodes
	}
	param[] = {
	    type = bool
	    name = recursive
	    desc = look for child nodes recursively
	    default = true
	}
	impl = <<<
unsigned int n0 = getNumNodes();
unsigned int numNodes = 0;
for (unsigned int i = 0; i < n0; i++)
{
    FBXNode* cn = getNode(i);
    if (cn != 0)
        numNodes += cn->findNodesByAttributeType(t, target, recursive);
}
>>>
    return = {
        value = numNodes
        desc = number of nodes that have been found
    }
}

# Public member functions overridden from IFObject.
function.copy.impl = <<<
if (this == &other)
    return *this;
FBXNodeVector v0;
for (FBXNodeVector::const_iterator i = other.nodes.begin(); 
    i != other.nodes.end(); i++)
{
    FBXNode* n0 = Ionflux::ObjectBase::nullPointerCheck(*i, this, 
        "operator=", "FBX node");
    v0.push_back(n0->copy());
}
clearNodes();
addNodes(v0);
>>>

# Pure virtual member functions.

# operations

# Global functions.

