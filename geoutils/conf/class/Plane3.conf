# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Plane3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Matrix3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Plane3
	shortDesc = Plane (3D)
	title = Plane (3D)
	longDesc = A plane in three-dimensional space.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = p
        value = 0., 0., 0.
    }
    initializer[] = {
        name = u
        value = 1., 0., 0.
    }
    initializer[] = {
        name = v
        value = 0., 1., 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = p
        value = initP
    }
    initializer[] = {
        name = u
        value = initU
    }
    initializer[] = {
        name = v
        value = initV
    }
    param[] = {
        name = initP
        type = const Ionflux::GeoUtils::Vector3&
        desc = Position vector
    }
    param[] = {
        name = initU
        type = const Ionflux::GeoUtils::Vector3&
        desc = Direction vector (u)
    }
    param[] = {
        name = initV
        type = const Ionflux::GeoUtils::Vector3&
        desc = Direction vector (v)
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = p
	desc = Position vector
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = u
	desc = Direction vector (u)
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = v
	desc = Direction vector (v)
    copy = true
#    proxy = true
}

# Public static constants.
constant.public[] = {
    desc = XY plane
    type = Ionflux::GeoUtils::Plane3
    name = XY
    value = Ionflux::GeoUtils::Plane3(Ionflux::GeoUtils::Vector3::ZERO, \
    Ionflux::GeoUtils::Vector3::E_X, Ionflux::GeoUtils::Vector3::E_Y)
}
constant.public[] = {
    desc = YZ plane
    type = Ionflux::GeoUtils::Plane3
    name = YZ
    value = Ionflux::GeoUtils::Plane3(Ionflux::GeoUtils::Vector3::ZERO, \
    Ionflux::GeoUtils::Vector3::E_Y, Ionflux::GeoUtils::Vector3::E_Z)
}
constant.public[] = {
    desc = ZX plane
    type = Ionflux::GeoUtils::Plane3
    name = ZX
    value = Ionflux::GeoUtils::Plane3(Ionflux::GeoUtils::Vector3::ZERO, \
    Ionflux::GeoUtils::Vector3::E_Z, Ionflux::GeoUtils::Vector3::E_X)
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getTangent
    const = true
	shortDesc = Get tangent vector
	longDesc = Get the tangent vector of the plane.
    impl = 
    return = {
        desc = Tangent vector
        value = u.normalize()
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBinormal
    const = true
	shortDesc = Get binormal vector
	longDesc = Get the binormal vector of the plane.
    impl = 
    return = {
        desc = Binormal vector
        value = v.normalize()
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getNormal
    const = true
	shortDesc = Get normal vector
	longDesc = Get the normal vector of the plane.
    impl = 
    return = {
        desc = Normal vector
        value = u.cross(v).normalize()
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = getTangentBase
    const = true
	shortDesc = Get tangent space base matrix
	longDesc = Calculate the (orthogonal) base matrix of the tangent space for the plane.
    impl = Matrix3 result;\
Vector3 u0 = getTangent();\
Vector3 v0 = u0.ortho(getBinormal());\
result.setC0(u0);\
result.setC1(v0);\
result.setC2(getNormal());
    return = {
        desc = Tangent space matrix
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Plane3&
		name = other
		desc = Plane
	}
    impl = if (!((p == other.p) && (u == other.u) && (v == other.v)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Plane3&
		name = other
		desc = Plane
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << p.getString() \
    << ", " << u.getString() << ", " << v.getString() << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Plane3
	name = createFromNormal
	shortDesc = Create plane from normal vector
	longDesc = Create a plane from the specified normal vector. If a linearly independent tangent vector is specified as well, that vector will be orthonormalized and then used to construct the binormal vector. If no tangent vector is specified or the tangent vector is not linearly independent, the tangent and binormal will be determined by the implementation.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = n
		desc = Normal vector
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Tangent vector
        default = Ionflux::GeoUtils::Vector3::E_X
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = p
		desc = Position vector
        default = Ionflux::GeoUtils::Vector3::ZERO
	}
	impl = Vector3 u(t);\
// If n and t are not linearly independent, modify t.\
int i = 0;\
while (eq(n.cross(u).norm(), 0.) \
    && (i < 2))\
\{\
    if (i == 0)\
        u = Vector3::E_Y;\
    else\
    if (i == 1)\
        u = Vector3::E_Z;\
    i++;\
\}\
u = n.ortho(u).normalize();\
Vector3 v = n.cross(u).normalize();
    return = {
        value = Plane3(p, u, v);
        desc = Plane
    }
}

# Pure virtual member functions.

# operations

# Global functions.

