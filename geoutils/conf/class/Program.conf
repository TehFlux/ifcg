# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# Program.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"geoutils/types.hpp"'
        '"geoutils/gltypes.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<cstring>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"geoutils/Matrix3.hpp"'
        '"geoutils/Matrix4.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
    'class Matrix3'
    'class Matrix4'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Program
	shortDesc = Program (OpenGL)
	title = Program (OpenGL)
	longDesc = An OpenGL program. This can be used to manage vertex and fragment shaders.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = int
    name = INFO_LOG_BUFFER_SIZE
    desc = Buffer size for info logs
    value = 10000
}
constant.public[] = {
    type = std::string
    name = DEFAULT_VERTEX_SHADER
    desc = Default vertex shader
    value = <<<
"#version 330\n"
"uniform mat4 ifvgMVPMatrix;\n"
"uniform mat3 ifvgNormalMatrix;\n"
"in vec4 ifvgVertex;\n"
"in vec4 ifvgColor;\n"
"in vec3 ifvgNormal;\n"
"in vec4 ifvgMultiTexCoord0;\n"
"smooth out vec4 color;\n"
"smooth out vec3 normal;\n"
"smooth out vec4 texCoord0;\n"
"void main()\n"
"{\n"
"    color = ifvgColor;\n"
"    normal = ifvgNormalMatrix * ifvgNormal;\n"
"    texCoord0 = ifvgMultiTexCoord0;\n"
"    gl_Position = ifvgMVPMatrix * ifvgVertex;\n"
"}\n";
>>>
}
constant.public[] = {
    type = std::string
    name = FRAGMENT_SHADER_FLAT_COLOR
    desc = Fragmet shader: flat color
    value = <<<
"#version 330\n"
"in vec4 color;\n"
"out vec4 fragData;\n"
"void main()\n"
"{\n"
"    fragData = color;\n"
"}\n"
>>>
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string
    name = vertexShaderSource
    desc = Fragment shader source
}
property.protected[] = {
    type = std::string
    setFromType = const std::string
    name = fragmentShaderSource
    desc = Fragment shader source
}
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = vertexShaderImpl
    desc = Vertex shader implementation
    protectedWrite = true
}
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = fragmentShaderImpl
    desc = Fragment shader implementation
    protectedWrite = true
}
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = programImpl
    desc = Program implementation
    protectedWrite = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = vertexShaderSource
        value = DEFAULT_VERTEX_SHADER
    }
    initializer[] = {
        name = fragmentShaderSource
        value = FRAGMENT_SHADER_FLAT_COLOR
    }
    initializer[] = {
        name = vertexShaderImpl
        value = 0
    }
    initializer[] = {
        name = fragmentShaderImpl
        value = 0
    }
    initializer[] = {
        name = programImpl
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = vertexShaderSource
        value = DEFAULT_VERTEX_SHADER
    }
    initializer[] = {
        name = fragmentShaderSource
        value = initFragmentShaderSource
    }
    param[] = {
        type = const std::string&
        name = initVertexShaderSource
        desc = Vertex shader source
    }
    param[] = {
        type = const std::string&
        name = initFragmentShaderSource
        desc = Fragment shader source
        default = FRAGMENT_SHADER_FLAT_COLOR
    }
    initializer[] = {
        name = vertexShaderImpl
        value = 0
    }
    initializer[] = {
        name = fragmentShaderImpl
        value = 0
    }
    initializer[] = {
        name = programImpl
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
cleanup();
>>>

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setVertexShaderSource(other.vertexShaderSource);
setFragmentShaderSource(other.fragmentShaderSource);
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up state maintained by the program.
	impl = <<<
if (programImpl != 0)
{
    glDeleteProgram(programImpl);
    programImpl = 0;
}
if (vertexShaderImpl != 0)
{
    glDeleteShader(vertexShaderImpl);
    vertexShaderImpl = 0;
}
if (fragmentShaderImpl != 0)
{
    glDeleteShader(fragmentShaderImpl);
    fragmentShaderImpl = 0;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the program.
	impl = <<<
// vertex shader
if (vertexShaderSource.size() > 0)
{
    if (vertexShaderImpl != 0)
    {
        if (programImpl != 0)
            glDetachShader(programImpl, vertexShaderImpl);
        glDeleteShader(vertexShaderImpl);
    }
    vertexShaderImpl = createOpenGLShader(vertexShaderSource, 
        GL_VERTEX_SHADER, "vertex");
}
// fragment shader
if (fragmentShaderSource.size() > 0)
{
    if (fragmentShaderImpl != 0)
    {
        if (programImpl != 0)
            glDetachShader(programImpl, fragmentShaderImpl);
        glDeleteShader(fragmentShaderImpl);
    }
    fragmentShaderImpl = createOpenGLShader(fragmentShaderSource, 
        GL_FRAGMENT_SHADER, "fragment");
}
// program
// <---- DEBUG ----- //
std::cerr << "[Program::init] "
    "Initializing program..." << std::endl;
// ----- DEBUG ----> */
if (programImpl != 0)
    glDeleteProgram(programImpl);
programImpl = glCreateProgram();
if (programImpl == 0)
{
    throw GeoUtilsError(getErrorString("Could not create program.", 
        "init"));
}
glAttachShader(programImpl, vertexShaderImpl);
glAttachShader(programImpl, fragmentShaderImpl);
// <---- DEBUG ----- //
std::cerr << "[Program::init] "
    "Linking program..." << std::endl;
// ----- DEBUG ----> */
glLinkProgram(programImpl);
int result = GL_FALSE;
glGetProgramiv(programImpl, GL_LINK_STATUS, &result);
if (result != GL_TRUE)
{
    std::ostringstream status;
    status << "Could not link program: " 
        << std::endl << getOpenGLProgramInfoLog(programImpl);
    glDeleteProgram(programImpl);
    throw GeoUtilsError(getErrorString(status.str(), "init"));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = use
	shortDesc = Use program
	longDesc = Use this program.
	impl = <<<
if (programImpl == 0)
    throw GeoUtilsError(getErrorString("Program not set.", "use"));
glUseProgram(programImpl);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setUniform
	shortDesc = Set uniform (4x4 matrix)
	longDesc = Set the uniform with the specified name within the default uniform block to the specified value.
	param[] = {
	    type = const std::string&
	    name = name
	    desc = Uniform name
	}
	param[] = {
	    type = const Ionflux::GeoUtils::Matrix4&
	    name = value
	    desc = Value
	}
	impl = <<<
if (programImpl == 0)
    throw GeoUtilsError(getErrorString("Program not set.", "setUniform"));
int ul0 = glGetUniformLocation(programImpl, name.c_str());
if (ul0 == -1)
{
    std::ostringstream status;
    status << "Name does not exist within default "
        "uniform block: '" << name << "'.";
    throw GeoUtilsError(getErrorString(status.str(), "setUniform"));
}
int n0 = value.getNumElements();
GLfloat* v0 = new GLfloat[n0];
Ionflux::ObjectBase::nullPointerCheck(v0, this, 
    "setUniform", "Value buffer");
for (int i = 0; i < n0; i++)
    v0[i] = value.getElement(i);
glUniformMatrix4fv(ul0, 1, GL_FALSE, v0);
delete[] v0;
if (glGetError() == GL_INVALID_OPERATION)
{
    std::ostringstream status;
    status << "Type mismatch for uniform within default block '" 
        << name << "'.";
    throw GeoUtilsError(getErrorString(status.str(), "setUniform"));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setUniform
	shortDesc = Set uniform (3x3 matrix)
	longDesc = Set the uniform with the specified name within the default uniform block to the specified value.
	param[] = {
	    type = const std::string&
	    name = name
	    desc = Uniform name
	}
	param[] = {
	    type = const Ionflux::GeoUtils::Matrix3&
	    name = value
	    desc = Value
	}
	impl = <<<
if (programImpl == 0)
    throw GeoUtilsError(getErrorString("Program not set.", "setUniform"));
int ul0 = glGetUniformLocation(programImpl, name.c_str());
if (ul0 == -1)
{
    std::ostringstream status;
    status << "Name does not exist within default "
        "uniform block: '" << name << "'.";
    throw GeoUtilsError(getErrorString(status.str(), "setUniform"));
}
int n0 = value.getNumElements();
GLfloat* v0 = new GLfloat[n0];
Ionflux::ObjectBase::nullPointerCheck(v0, this, 
    "setUniform", "Value buffer");
for (int i = 0; i < n0; i++)
    v0[i] = value.getElement(i);
glUniformMatrix3fv(ul0, 1, GL_FALSE, v0);
delete[] v0;
if (glGetError() == GL_INVALID_OPERATION)
{
    std::ostringstream status;
    status << "Type mismatch for uniform within default block '" 
        << name << "'.";
    throw GeoUtilsError(getErrorString(status.str(), "setUniform"));
}
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << "shaders: ";
if (vertexShaderSource.size() > 0)
    status << "vertex";
else
    status << "<none>";
status << ", ";
if (fragmentShaderSource.size() > 0)
    status << "fragment";
else
    status << "<none>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
    bindings.disable = true
	spec = static
	type = std::string
	name = getOpenGLShaderInfoLog
	shortDesc = Get OpenGL shader info log
	longDesc = Get the shader info log for an OpenGL shader.
    param[] = {
        type = GLuint
        name = shader
        desc = OpenGL shader
    }
	impl = <<<
char* cb0 = new char[INFO_LOG_BUFFER_SIZE];
Ionflux::ObjectBase::nullPointerCheck(cb0, 
    "Program::getOpenGLShaderInfoLog", "Buffer");
glGetShaderInfoLog(shader, INFO_LOG_BUFFER_SIZE, 0, cb0);
std::string result(cb0);
delete[] cb0;
>>>
    return = {
        value = result
        desc = Shader info log
    }
}
function.public[] = {
    bindings.disable = true
	spec = static
	type = std::string
	name = getOpenGLProgramInfoLog
	shortDesc = Get OpenGL program info log
	longDesc = Get the program info log for an OpenGL program.
    param[] = {
        type = GLuint
        name = program
        desc = OpenGL program
    }
	impl = <<<
char* cb0 = new char[INFO_LOG_BUFFER_SIZE];
Ionflux::ObjectBase::nullPointerCheck(cb0, 
    "Program::getOpenProgramInfoLog", "Buffer");
glGetProgramInfoLog(program, INFO_LOG_BUFFER_SIZE, 0, cb0);
std::string result(cb0);
delete[] cb0;
>>>
    return = {
        value = result
        desc = Program info log
    }
}
function.public[] = {
    bindings.disable = true
	spec = static
	type = GLuint
	name = createOpenGLShader
	shortDesc = Create OpenGL shader
	longDesc = Create an OpenGL shader.
    param[] = {
        type = const std::string&
        name = source
        desc = Shader source
    }
    param[] = {
        type = GLenum
        name = type
        desc = Shader type
    }
    param[] = {
        type = const std::string&
        name = shaderID
        desc = Shader ID
        default = "<unnamed>"
    }
	impl = <<<
if (source.size() == 0)
{
    std::ostringstream status;
    status << "[Program::createOpenGLShader] " 
        "Shader source not set for shader '" << shaderID << "'.";
    throw GeoUtilsError(status.str());
}
GLuint shader = 0;
// <---- DEBUG ----- //
std::cerr << "[Program::createOpenGLShader] "
    "Initializing shader '" << shaderID << "'... " << std::endl;
// ----- DEBUG ----> */
// <---- DEBUG ----- //
std::cerr << "[Program::createOpenGLShader] "
    "Source for shader '" << shaderID << "': " << std::endl 
    << source << std::endl;
// ----- DEBUG ----> */
shader = glCreateShader(type);
if (shader == 0)
{
    std::ostringstream status;
    status << "[Program::createOpenGLShader] "
        "Could not create shader '" << shaderID << "'.";
    throw GeoUtilsError(status.str());
}
const char* c0 = source.c_str();
glShaderSource(shader, 1, &c0, 0);
// <---- DEBUG ----- //
std::cerr << "[Program::createOpenGLShader] "
    "Compiling shader '" << shaderID << "'..." << std::endl;
// ----- DEBUG ----> */
glCompileShader(shader);
int result = GL_FALSE;
glGetShaderiv(shader, GL_COMPILE_STATUS, &result);
if (result != GL_TRUE)
{
    std::ostringstream status;
    status << "[Program::createOpenGLShader] "
        "Could not compile shader '" << shaderID << "': " 
        << std::endl << getOpenGLShaderInfoLog(shader);
    glDeleteShader(shader);
    throw GeoUtilsError(status.str());
}
>>>
    return = {
        value = shader
        desc = OpenGL shader
    }
}

# Pure virtual member functions.

# operations

# Global functions.

