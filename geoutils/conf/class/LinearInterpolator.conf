# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# LinearInterpolator.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = LinearInterpolator
	shortDesc = Linear interpolator
	title = Linear interpolator
	longDesc = An object that does linear interpolation between two scalar values.
	group.name = geoutils
	base = {
		# other base classes
		other[] = {
            include = geoutils/Interpolator.hpp
			name = Ionflux::GeoUtils::Interpolator
		}
	}
    features = {
        'classinfo'
        'copy'
        'upcast'
        'create'
    }
    create = {
        extendedCreate = true
        allocationError = GeoUtilsError("Could not allocate object.")
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Interpolator
        value = v0, v1
    }
    param[] = {
        name = initV0
        type = double
        desc = First value
    }
    param[] = {
        name = initV1
        type = double
        desc = Second value
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Interpolator
        value = initValues
    }
    param[] = {
        name = initValues
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Value vector
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = v0 = other.v0;\
v1 = other.v1;
function.public[] = {
	spec = virtual
	type = double
	name = interpolate
	const = true
	shortDesc = Interpolate
	longDesc = Interpolate the current values using the specified parameter.
	param[] = {
		type = double
		name = t
		desc = Interpolation parameter
        default = 0.5
	}
    impl = 
	return = {
        value = (v1 - v0) * t + v0
        desc = Interpolated value
    }
}

# Pure virtual member functions.

# operations

# Global functions.

