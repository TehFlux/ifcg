# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# FBXScene.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/constants.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/fbxtypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fbxsdk.h>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/FBXManager.hpp"'
        '"geoutils/FBXNode.hpp"'
    }
}

# forward declarations
forward = {
    'class FBXManager'
    'class FBXNode'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = FBXScene
	shortDesc = FBX Scene
	title = FBX Scene
	longDesc = A 3D scene loaded using the Autodesk FBX SDK. This can be used to convert data loaded from an FBX file to the data structures used by GeoUtils.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        ## other base classes
        #other[] = {
		#}
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::FBXManager*
    setFromType = Ionflux::GeoUtils::FBXManager*
    name = fbxManager
    desc = FBX manager
    managed = true
}
property.protected[] = {
    bindings.disable = true
    type = FBXSDK_NAMESPACE::FbxScene*
    setFromType = FBXSDK_NAMESPACE::FbxScene*
    name = impl
    desc = FBX scene implementation
    impl.set = <<<
if (newImpl == impl)
    return;
if (impl != 0)
    impl->Destroy();
impl = newImpl;
>>>
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = title
    desc = title
    protectedWrite = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = subject
    desc = subject
    protectedWrite = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = author
    desc = author
    protectedWrite = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = keywords
    desc = keywords
    protectedWrite = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = revision
    desc = revision
    protectedWrite = true
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = comment
    desc = comment
    protectedWrite = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = fbxManager
        value = 0
    }
    initializer[] = {
        name = impl
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = fbxManager
        value = 0
    }
    initializer[] = {
        name = impl
        value = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::FBXManager*
        name = initFbxManager
        desc = FBX manager
    }
    impl = <<<
if (initFbxManager != 0)
    setFbxManager(initFbxManager);
>>>
}

# Destructor.
destructor.impl = <<<
if (impl != 0)
{
    impl->Destroy();
    impl = 0;
}
>>>

# Protected member functions.
function.protected[] = {
    spec = virtual
    type = void
    name = initImpl
    shortDesc = Initialize the FBX scene implementation
    longDesc = Initialize the FBX scene.
    impl = <<<
Ionflux::ObjectBase::nullPointerCheck(fbxManager, this, 
    "initFBXScene", "FBX manager");
std::string sceneName(id);
if (sceneName.size() == 0)
    sceneName = "Unnamed Scene";
FbxScene* fbxs = FbxScene::Create(fbxManager->getImpl(), 
    sceneName.c_str());
if (fbxs == 0)
    throw GeoUtilsError(getErrorString(
        "Could not create FBX scene.", "initFBXScene"));
setImpl(fbxs);
>>>
}
function.protected[] = {
    spec = virtual
    type = void
    name = initMetaData
    shortDesc = Initialize metadata
    longDesc = Initialize the metadata properties.
    impl = <<<
Ionflux::ObjectBase::nullPointerCheck(impl, this, 
    "initMetadata", "FBX scene");
FbxDocumentInfo* sceneInfo = impl->GetSceneInfo();
if (sceneInfo != 0)
{
    setTitle(sceneInfo->mTitle.Buffer());
    setSubject(sceneInfo->mSubject.Buffer());
    setAuthor(sceneInfo->mAuthor.Buffer());
    setKeywords(sceneInfo->mKeywords.Buffer());
    setRevision(sceneInfo->mRevision.Buffer());
    setComment(sceneInfo->mComment.Buffer());
}
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setFbxManager(other.fbxManager);
setImpl(other.impl);
>>>
function.public[] = {
    spec = virtual
    type = bool
    name = loadFromFile
    shortDesc = Load scene from file
    longDesc = Load a scene from the specified file.
    param[] = {
        type = const std::string&
        name = fileName
        desc = File name
    }
    impl = <<<
Ionflux::ObjectBase::nullPointerCheck(fbxManager, this, 
    "loadFromFile", "FBX manager");
if (impl == 0)
    initImpl();
Ionflux::ObjectBase::nullPointerCheck(impl, this, 
    "loadFromFile", "FBX scene");
FbxManager* mImpl = fbxManager->getImpl();
FbxImporter* imp0 = FbxImporter::Create(mImpl, "");
bool result = imp0->Initialize(fileName.c_str(), -1, 
    mImpl->GetIOSettings());
if (!result)
{
    FbxString es0 = imp0->GetStatus().GetErrorString();
    std::ostringstream status;
    status << "Error importing file '" << fileName << ": " 
        << es0.Buffer();
    throw GeoUtilsError(getErrorString(status.str(), 
        "loadFromFile"));
}
result = imp0->Import(impl);
if (!result)
{
    FbxString es0 = imp0->GetStatus().GetErrorString();
    std::ostringstream status;
    status << "Error importing file '" << fileName << ": " 
        << es0.Buffer();
    throw GeoUtilsError(getErrorString(status.str(), 
        "loadFromFile"));
}
imp0->Destroy();
initMetaData();
>>>
    return = {
        value = true
        desc = \c true on success, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::FBXNode*
	name = getRootNode
	const = true
	shortDesc = Get the root node
	longDesc = Get the root node of the scene. The caller is responsible for managing the returned object.
	impl = <<<
if (impl == 0)
    return 0;
FBXNode* r0 = FBXNode::create(impl->GetRootNode());
>>>
    return = {
        value = r0
        desc = Root node, or 0 if the root node does not exist.
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = listNodes
	const = true
	shortDesc = List nodes
	longDesc = List the nodes in the scene
	param[] = {
	    type = bool
	    name = recursive
	    desc = List nodes recursively
	    default = true
	}
	param[] = {
	    type = unsigned int
	    name = indentWidth
	    desc = Indentation width
	    default = Ionflux::ObjectBase::DEFAULT_INDENT_WIDTH
	}
	param[] = {
	    type = char
	    name = indentChar
	    desc = Indentation character
	    default = ' '
	}
	impl = <<<
FBXNode* r0 = getRootNode();
if (r0 == 0)
    return;
addLocalRef(r0);
std::cout << "[root: " << r0->getValueString() << "]" << std::endl;
r0->listChildNodes(recursive, indentWidth, indentChar, 1);
removeLocalRef(r0);
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = 
    return = {
        value = ""
        desc = String representation
    }
}

# static member functions

# Pure virtual member functions.

# operations

# Global functions.

