# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vertex2.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector2.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/LinearInterpolator.hpp"'
    }
}

# forward declarations
forward = {
    'class Interpolator'
    'class Vertex2'
}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vertex2
	shortDesc = Vertex (2D)
	title = Vertex (2D)
	longDesc = A vertex in two-dimensional space.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        extendedCreate = true
        allocationError = GeoUtilsError("Could not allocate object.")
    }
    xml.elementName = vert2
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = x
	desc = X coordinate
#   copy = true
#    proxy = true
    valueType = float
    xml.attribute.name = x
}
property.protected[] = {
	type = double
	setFromType = double
	name = y
	desc = Y coordinate
#   copy = true
#    proxy = true
    valueType = float
    xml.attribute.name = y
}

# Public static constants.
constant.public[] = {
    desc = Origin
    type = Ionflux::GeoUtils::Vertex2
    name = ORIGIN
    value = Ionflux::GeoUtils::Vertex2(0., 0.)
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = initX
    }
    initializer[] = {
        name = y
        value = initY
    }
    param[] = {
        name = initX
        type = double
        desc = Element (X)
    }
    param[] = {
        name = initY
        type = double
        desc = Element (Y)
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    param[] = {
        name = initCoords
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Coordinate vector
    }
    impl = setCoords(initCoords);
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    param[] = {
        name = initCoords
        type = const Ionflux::GeoUtils::Vector2&
        desc = Coordinate vector
    }
    impl = setCoords(initCoords);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
x = other.x;
y = other.y;
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates from a vector of doubles. If the vector contains fewer than the required number of coordinates, the remaining coordinates will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector&
		name = newCoords
		desc = Coordinate vector
	}
    impl = if (newCoords.size() == 0)\
    return;\
if (newCoords.size() >= 2)\
    y = newCoords[1];\
x = newCoords[0];
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates from a vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = newCoords
		desc = Coordinate vector
	}
    impl = x = newCoords.getX0();\
y = newCoords.getX1();
}
function.public[] = {
	spec = virtual
	type = void
	name = getCoords
    const = true
	shortDesc = Get coordinates
	longDesc = Store the coordinates of the vertex in a vector of doubles.
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = target.clear();\
target.push_back(x);\
target.push_back(y);
}
function.public[] = {
	spec = virtual
	type = void
	name = getCoords
    const = true
	shortDesc = Get coordinates
	longDesc = Store the coordinates of the vertex in a vector.
	param[] = {
		type = Ionflux::GeoUtils::Vector2&
		name = target
		desc = Target vector
	}
    impl = target.setX0(x);\
target.setX1(y);
}
function.public[] = {
	spec = virtual
	type = double
	name = getCoord
    const = true
	shortDesc = Get coordinate
	longDesc = Get the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = 
    return = {
        value = (*this)[index];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = getVector
    const = true
	shortDesc = Get coordinates as vector
	longDesc = Get the coordinates of the vertex as a vector.
    impl = 
    return = {
        desc = Vector
        value = Vector2(x, y)
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoord
	shortDesc = Set coordinate
	longDesc = Set the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = if ((index < 0) || (index > 2))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw GeoUtilsError(message.str());\
\}\
if (index == 0)\
    x = value;\
else \
if (index == 1)\
    y = value;
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex2
	name = interpolate
    const = true
	shortDesc = Interpolate vertices
	longDesc = Interpolate the vertex coordinates and the coordinates of the other vertex using the specified parameter.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex2&
		name = other
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Parameter
	}
	param[] = {
		type = Ionflux::GeoUtils::Interpolator*
		name = interpolator
		desc = Interpolator
        default = 0
	}
    impl = Vertex2 result;\
Interpolator* i0 = 0;\
if (interpolator == 0)\
\{\
    i0 = new LinearInterpolator();\
    if (i0 == 0)\
        throw GeoUtilsError("Could not allocate object.");\
    interpolator = i0;\
\}\
interpolator->setValues(x, other.x);\
result.setX((*interpolator)(t));\
interpolator->setValues(y, other.y);\
result.setY((*interpolator)(t));\
if (i0 != 0)\
    delete i0;
    return = {
        value = result
        desc = Interpolated vertex
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = eq
	shortDesc = Comparison (with tolerance): equal
	longDesc = Compare the vector with another vector using the specified tolerance.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex2&
		name = other
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = if (!(Ionflux::GeoUtils::eq(x, other.x, t) \
    && Ionflux::GeoUtils::eq(y, other.y, t)))\
        return false;
    return = {
        value = true
        desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex2&
		name = other
		desc = Vertex2
	}
    impl = if (!((x == other.x) && (y == other.y)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex2&
		name = other
		desc = Vertex
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = double
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Subscript operator.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = if ((index < 0) || (index > 2))\
\{\
    ostringstream message;\
    message << "Index out of range: " << index;\
    throw GeoUtilsError(message.str());\
\}\
double result = 0;\
if (index == 0)\
    result = x;\
if (index == 1)\
    result = y;
	return = {
        value = result
        desc = Element at specified index
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << x << ", " << y << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

