# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Rotate.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
        '"ifmapping/utils.hpp"'
#        '"geoutils/Clock.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Rotate
	shortDesc = Transform node: Rotate
	title = Transform node: Rotate
longDesc = Rotate elements from the input group around an axis. The rotation angle is the sum of the constant rotation angle and the rotation angles resulting from the input mappings, if specified. The index mapping maps the interval [0...1] to the interval [0...1] and controls the angle of rotation depending on the index of the input element, where the indices are mapped to the interval depending on the total number of elements. The distance mapping maps an interval of distances to the interval [0...1] and controls the angle of rotation depending on distance of the element barycenter from the coordinate origin. For both mappings, the resulting value in the range [0...1] is translated to an angle in the range specified for that mapping, where a mapping output value of 0 corresponds to the lower bound of the corresponding range and a mapping output value of 1 corresponds to the upper bound of that range. The optional delta angle is multiplied by the update counter of the node and added to the angle of rotation on each update. The centering method determines the center of rotation. If \c CENTER_ORIGIN is used, all elements are rotated around the origin. For \c CENTER_BARYCENTER and \c CENTER_BOUNDS, elements are rotated around individual element centers determined using the specified method.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
        'param'
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = Param
        notExistsError = GeoUtilsError(std::string("Parameter '") \
        + paramID + "' does not exist.")
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::AxisID
	setFromType = Ionflux::GeoUtils::AxisID
	name = axis
	desc = Axis of rotation
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = angle
	desc = Angle
}
property.protected[] = {
	type = Ionflux::Mapping::MappingValue
	setFromType = Ionflux::Mapping::MappingValue
	name = deltaAngle
	desc = Delta angle
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = indexFunc
	desc = Index mapping function
	managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Mapping*
	setFromType = Ionflux::Mapping::Mapping*
	name = distanceFunc
	desc = Distance mapping function
	managed = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Range
	setFromType = const Ionflux::GeoUtils::Range&
	name = indexRange
	desc = Index angle range
}
property.protected[] = {
	type = Ionflux::GeoUtils::Range
	setFromType = const Ionflux::GeoUtils::Range&
	name = distanceRange
	desc = Distance angle range
}
property.protected[] = {
	type = Ionflux::GeoUtils::CenteringMethod
	setFromType = Ionflux::GeoUtils::CenteringMethod
	name = centeringMethod
	desc = Centering method
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::Range
    name = DEFAULT_ANGLE_RANGE
    desc = Default angle range
    value = Ionflux::GeoUtils::Range(0., 2 * M_PI)
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = axis
        value = Ionflux::GeoUtils::AXIS_Z
    }
    initializer[] = {
        name = angle
        value = 0.
    }
    initializer[] = {
        name = deltaAngle
        value = 0.
    }
    initializer[] = {
        name = indexFunc
        value = 0
    }
    initializer[] = {
        name = distanceFunc
        value = 0
    }
    initializer[] = {
        name = indexRange
        value = DEFAULT_ANGLE_RANGE
    }
    initializer[] = {
        name = distanceRange
        value = DEFAULT_ANGLE_RANGE
    }
    initializer[] = {
        name = centeringMethod
        value = CENTER_ORIGIN
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = axis
        value = initAxis
    }
    initializer[] = {
        name = angle
        value = initAngle
    }
    initializer[] = {
        name = deltaAngle
        value = deltaAngle
    }
    initializer[] = {
        name = indexFunc
        value = 0
    }
    initializer[] = {
        name = distanceFunc
        value = 0
    }
    initializer[] = {
        name = indexRange
        value = initIndexRange
    }
    initializer[] = {
        name = distanceRange
        value = initDistanceRange
    }
    initializer[] = {
        name = centeringMethod
        value = initCenteringMethod
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = initAxis
        desc = Axis
    }
    param[] = {
        type = double
        name = initAngle
        desc = Angle
        default = 0.
    }
    param[] = {
        type = double
        name = deltaAngle
        desc = Delta angle
        default = 0.
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initIndexFunc
        desc = Index mapping function
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initDistanceFunc
        desc = Distance mapping function
        default = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Range
        name = initIndexRange
        desc = Index angle range
        default = DEFAULT_ANGLE_RANGE
    }
    param[] = {
        type = Ionflux::GeoUtils::Range
        name = initDistanceRange
        desc = Distance angle range
        default = DEFAULT_ANGLE_RANGE
    }
    param[] = {
        type = Ionflux::GeoUtils::CenteringMethod
        name = initCenteringMethod
        desc = Centering method
        default = CENTER_ORIGIN
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = setIndexFunc(initIndexFunc);\
setDistanceFunc(initDistanceFunc);
}

# Destructor.
#destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
axis = other.axis;\
angle = other.angle;\
setIndexFunc(other.indexFunc);\
setDistanceFunc(other.distanceFunc);
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; " \
    << Ionflux::GeoUtils::axisToString(axis) << ", " << angle;\
if (indexFunc != 0)\
    status << ", " << indexFunc->getString();\
else\
    status << ", <none>";\
if (distanceFunc != 0)\
    status << ", " << distanceFunc->getString();\
else\
    status << ", <none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
if ((centeringMethod == CENTER_ORIGIN) \
    && (indexFunc == 0) \
    && (distanceFunc == 0))\
    // All elements are rotated uniformly.\
    g0->rotate(angle + updateCounter * deltaAngle, axis);\
else\
\{\
    /* Since we are going to manipulate the individual elements, \
       any existing group transformations must be applied first. */\
    g0->applyTransform();\
    Vector3 c0;\
    // Rotate elements individually according to the mappings.\
    unsigned int numSourceItems = g0->getNumItems();\
    for (unsigned int i = 0; i < numSourceItems; i++)\
    \{\
        TransformableObject* o0 = g0->getItem(i);\
        // Calculate the total angle for the element.\
        double phi = angle + updateCounter * deltaAngle;\
        if (indexFunc != 0)\
            // Add angle according to index mapping.\
            phi += indexRange.getClampedValue(\
                (*indexFunc)(static_cast<double>(i) \
                    / (numSourceItems - 1)));\
        if (distanceFunc != 0)\
        \{\
            // Add angle according to distance mapping.\
            double r0 = o0->getBarycenter().norm();\
            phi += distanceRange.getClampedValue((*distanceFunc)(r0));\
        \}\
        // Determine the center vector.\
        if (centeringMethod == CENTER_BOUNDS)\
            c0 = o0->getBounds().getCenter();\
        else\
        if (centeringMethod == CENTER_BARYCENTER)\
            c0 = o0->getBarycenter();\
        else\
            c0 = Vector3::ZERO;\
        // Rotate the object around the center.\
        /* <---- DEBUG ----- //\
        std::ostringstream message;\
        message << "phi[" << i << "] = " << phi;\
        log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
        // <---- DEBUG ----- */\
        o0->translate(c0.flip());\
        o0->rotate(phi, axis);\
        o0->translate(c0);\
    \}\
\}\
/* <---- DEBUG ----- //\
c0.stop();\
transformTime = c0.getElapsedTime();\
std::ostringstream message;\
message << "duplicateTime = " << duplicateTime \
    << " secs, transformTime = " << transformTime \
    << " secs";\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */\
addOutput(g0);
}

# Pure virtual member functions.

# operations

# Global functions.

