# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Polygon3CompareAxis.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Polygon3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Polygon3CompareAxis
	shortDesc = Polygon comparison function object: Axis coordinate
	title = Polygon comparison function object: Axis coordinate
	longDesc = A function object that compares polygons based on a coordinate of their barycenter.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::Polygon3Compare
            include = geoutils/Polygon3Compare.hpp
        }
	}
    features = {
        #'logmessage'
        'classinfo'
        'copy'
        'upcast'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::AxisID
    setFromType = Ionflux::GeoUtils::AxisID
    name = axis
    desc = Axis
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = Ionflux::GeoUtils::Polygon3Compare
        value = true
    }
    initializer[] = {
        name = axis
        value = Ionflux::GeoUtils::AXIS_Z
    }
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::GeoUtils::Polygon3Compare
        value = initInvert
    }
    initializer[] = {
        name = axis
        value = initAxis
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = initAxis
        desc = Axis
    }
    param[] = {
        type = bool
        name = initInvert
        desc = Invert order
        default = true
    }
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = Polygon3Compare::operator=(other);\
axis = other.axis;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << axisToString(axis) << ", " \
    << invert << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = compare
	shortDesc = Compare polygons
	longDesc = Compare two polygons.
	param[] = {
		type = Ionflux::GeoUtils::Polygon3&
		name = p0
		desc = Polygon (0)
	}
	param[] = {
		type = Ionflux::GeoUtils::Polygon3&
		name = p1
		desc = Polygon (1)
	}
    impl = Vector3 b0 = p0.getBarycenter();\
Vector3 b1 = p1.getBarycenter();
    return = {
        value = b0.getElement(axis) < b1.getElement(axis)
        desc = \c true if the polygon p0 goes before the polygon p1, \c false otherwise
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Polygon3CompareAxis*
	name = create
	shortDesc = Create comparison function
	longDesc = Create a comparison function object.
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = initAxis
        desc = Axis
    }
    param[] = {
        type = bool
        name = initInvert
        desc = Invert order
        default = true
    }
    impl = Polygon3CompareAxis* c0 = create();\
c0->setAxis(initAxis);\
c0->setInvert(initInvert);
    return = {
        value = c0
        desc = New comparison function object
    }
}

# operations

# Global functions.

