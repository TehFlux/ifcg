# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix2.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector2.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Matrix2
	shortDesc = Matrix (2x2)
	title = Matrix (2x2)
	longDesc = A 2x2 matrix.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        other[] = {
			name = Ionflux::GeoUtils::Matrix
            include = geoutils/Matrix.hpp
            xml = {
                enabled = true
                getFunc = getMatrix
                include = geoutils/Matrix
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = m2
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector2
	setFromType = const Ionflux::GeoUtils::Vector2&
	name = r0
	desc = Row vector (0)
    proxy = true
    impl = {
        get = return Vector2(elements[0], elements[1]);
        set = elements[0] = newR0.getX0();\
elements[1] = newR0.getX1();
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector2
	setFromType = const Ionflux::GeoUtils::Vector2&
	name = r1
	desc = Row vector (1)
    proxy = true
    impl = {
        get = return Vector2(elements[2], elements[3]);
        set = elements[2] = newR1.getX0();\
elements[3] = newR1.getX1();
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector2
	setFromType = const Ionflux::GeoUtils::Vector2&
	name = c0
	desc = Column vector (0)
    proxy = true
    impl = {
        get = return Vector2(elements[0], elements[2]);
        set = elements[0] = newC0.getX0();\
elements[2] = newC0.getX1();
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector2
	setFromType = const Ionflux::GeoUtils::Vector2&
	name = c1
	desc = Column vector (1)
    proxy = true
    impl = {
        get = return Vector2(elements[1], elements[3]);
        set = elements[1] = newC1.getX0();\
elements[3] = newC1.getX1();
    }
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 4
}
constant.public[] = {
	type = unsigned int
	name = NUM_ROWS
	desc = Number of rows
	value = 2
}
constant.public[] = {
	type = unsigned int
	name = NUM_COLS
	desc = Number of columns
	value = 2
}
constant.public[] = {
    desc = Zero matrix
    type = Ionflux::GeoUtils::Matrix2
    name = ZERO
    value = Ionflux::GeoUtils::Matrix2(0., 0., 0., 0.)
}
constant.public[] = {
    desc = Unit matrix
    type = Ionflux::GeoUtils::Matrix2
    name = UNIT
    value = Ionflux::GeoUtils::Matrix2(1., 0., 0., 1.)
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = zero();
}
constructor.public[] = {
    param[] = {
        name = initX00
        type = double
        desc = Element x00
    }
    param[] = {
        name = initX01
        type = double
        desc = Element x01
    }
    param[] = {
        name = initX10
        type = double
        desc = Element x10
    }
    param[] = {
        name = initX11
        type = double
        desc = Element x11
    }
    impl = <<<
initElements();
elements[0] = initX00;
elements[1] = initX01;
elements[2] = initX10;
elements[3] = initX11;
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Element vector
    }
    impl = <<<
initElements();
Vector::setElements(initElements0);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = transpose
	const = true
	shortDesc = Transpose
	longDesc = Transpose the matrix.
	impl = 
	return = {
        value = Matrix2(elements[0], elements[2], elements[1], elements[3])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = swapColumns
	const = true
	shortDesc = Swap columns
	longDesc = Swap the columns.
    impl = 
	return = {
        value = Matrix2(elements[1], elements[0], elements[3], elements[2])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = solve
	const = true
	shortDesc = Solve matrix equation
	longDesc = Solve the matrix equation Mx = v.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = v
		desc = Vector
	}
    impl = <<<
double y11 = elements[0];
double y12 = elements[1];
double y21 = elements[2];
double y22 = elements[3];
double d = v.getElement(0);
double e = v.getElement(1);
Vector2 result;
if ((y11 != 0.0)
    && ((y22 * y11 - y12 * y21) != 0.0))
{
    double y = (e * y11 - d * y21) / (y22 * y11 - y12 * y21);
    result.setElement(0, (d - y * y12) / y11);
    result.setElement(1, y);
} else
if ((y12 != 0)
    && ((y21 * y12 - y11 * y22) != 0.0))
    result = swapColumns().solve(v).swap();
else
if ((y11 != 0.) && (y12 == 0.) && (y21 == 0.) 
    && (y22 == 0.) && (e == 0))
{
    result.setElement(0, d / y11);
    result.setElement(1, 0.);
}
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = invert
	const = true
	shortDesc = Invert matrix
	longDesc = Invert the matrix.
    impl = <<<
Vector2 x = solve(Vector2::E_X);
Vector2 y = solve(Vector2::E_Y);
Matrix2 result;
result.setC0(x);
result.setC1(y);
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = operator*
	const = true
	shortDesc = Multiply matrices
	longDesc = Multiply matrices.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix2&
		name = other
		desc = Matrix
	}
    impl = <<<
Matrix2 result;
for (unsigned int i = 0; i < 2; i++)
    for (unsigned int j = 0; j < 2; j++)
    {
        double s = 0.0;
        for (unsigned int k = 0; k < 2; k++)
            s += elements[2 * i + k] * other.elements[2 * k + j];
        result.elements[2 * i + j] = s;
    }
>>>
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = operator*
	const = true
	shortDesc = Transform vector
	longDesc = Transform a vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = v
		desc = Vector
	}
    impl = <<<
double result[2];
for (unsigned int i = 0; i < 2; i++)
{
    double s = 0.0;
    for (unsigned int k = 0; k < 2; k++)
        s += elements[2 * i + k] * v.getElement(k);
    result[i] = s;
}
>>>
	return = {
        value = Vector2(result[0], result[1])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = operator*
	const = true
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix2 result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix2
	name = operator/
	const = true
	shortDesc = Divide matrix by scalar
	longDesc = Divide matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Matrix2 result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumRows
	const = true
	shortDesc = Get number of rows
	longDesc = Get the number of rows in the matrix
	impl = 
    return = {
        value = NUM_ROWS
        desc = Number of rows
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumCols
	const = true
	shortDesc = Get number of columns
	longDesc = Get the number of columns in the matrix
	impl = 
    return = {
        value = NUM_COLS
        desc = Number of columns
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix2
	name = scale
	shortDesc = Create scale matrix
	longDesc = Create a scale matrix.
	param[] = {
		type = double
		name = sx
		desc = Scale factor (x)
        default = 1.
	}
	param[] = {
		type = double
		name = sy
		desc = Scale factor (y)
        default = 1.
	}
	impl = 
    return = {
        value = Matrix2(sx, 0., 0., sy)
        desc = Scale matrix
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Matrix2
	name = rotate
	shortDesc = Create rotation matrix
	longDesc = Create a rotation matrix.
	param[] = {
		type = double
		name = phi
		desc = Angle
        default = 0.
	}
	impl = 
    return = {
        value = Matrix2(::cos(phi), -::sin(phi), ::sin(phi), ::cos(phi));
        desc = Rotation matrix
    }
}

# Pure virtual member functions.

# operations

# Global functions.
function.global[] = {
	type = Ionflux::GeoUtils::Matrix2
	name = operator*
	shortDesc = Multiply matrix by scalar
	longDesc = Multiply matrix by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix2&
		name = m
		desc = Matrix
	}
    impl = 
	return = {
        value = m * c
	    desc = Result of the calculation
    }
}

