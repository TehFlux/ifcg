# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Accept3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = Mapping

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Accept3
	shortDesc = Vector mapping: Accept
	title = Vector mapping: Accept
	longDesc = Abstract base class for vector mappings that obtain a 3-element vector from a source mapping by using the accept method to make sure the vector satisfies some condition. This means the source mapping is called up to \c maxIters times to provide a vector that satisfies the condition. If the method does not yield a suitable vector, an exception is thrown.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::Mapping::Vector3Mapping
            include = geoutils/Vector3Mapping.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
    }
}

## Member variables.
#variable.protected[] = {
#    type = unsigned int*
#    name = numCalls
#    desc = Number of calls (for debugging)
#}
#variable.protected[] = {
#    type = unsigned int*
#    name = numIterations
#    desc = Number of iterations (for debugging)
#}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = maxIters
    desc = Maximum iterations
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = source
	desc = Source mapping
	managed = true
}
#property.protected[] = {
#    type = double
#    setFromType = double
#    name = averageIters
#    desc = Average number of iterations (for debugging)
#    readOnly = true
#    proxy = true
#    impl.get = return static_cast<double>(*numIterations) / (*numCalls);
#}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = maxIters
        value = Ionflux::Mapping::MAX_ITERATIONS
    }
#    initializer[] = {
#        name = numCalls
#        value = 0
#    }
#    initializer[] = {
#        name = numIterations
#        value = 0
#    }
    initializer[] = {
        name = source
        value = 0
    }
    impl = /* <---- DEBUG ----- //\
numCalls = new unsigned int(0);\
numIterations = new unsigned int(0);\
// ----- DEBUG ----> */
}
constructor.public[] = {
    initializer[] = {
        name = maxIters
        value = Ionflux::Mapping::MAX_ITERATIONS
    }
#    initializer[] = {
#        name = numCalls
#        value = 0
#    }
#    initializer[] = {
#        name = numIterations
#        value = 0
#    }
    initializer[] = {
        name = source
        value = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initSource
        desc = Source mapping
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = initMaxIters
        desc = Maximum iterations
        default = Ionflux::Mapping::MAX_ITERATIONS
    }
    impl = setSource(initSource);\
/* <---- DEBUG ----- //\
numCalls = new unsigned int(0);\
numIterations = new unsigned int(0);\
// ----- DEBUG ----> */
}

# Destructor.
destructor.impl = /* <---- DEBUG ----- //\
delete numCalls;\
delete numIterations;\
// ----- DEBUG ----> */

# Protected member functions.

# Public member functions.
function.copy.impl = Vector3Mapping::operator=(other);\
setSource(other.source);
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = call
    const = true
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = if (source == 0)\
    throw GeoUtilsError("Source function not defined.");\
Ionflux::GeoUtils::Vector3 v0 = (*source)(value);\
unsigned int i = 0;\
while (!checkCondition(v0) \
    && (i <= maxIters))\
\{\
    v0 = (*source)(value);\
    i++;\
\}\
/* <---- DEBUG ----- //\
(*numIterations) += i;\
(*numCalls)++;\
// ----- DEBUG ----> */\
if (i > maxIters)\
    throw GeoUtilsError("Maximum number of iterations exceeded.");
    return = {
        value = v0
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (source != 0)\
    status << source->getString();\
else\
    status << "<none>";\
status << ", " << maxIters << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = bool
	name = checkCondition
    const = true
    pureVirtual = true
	shortDesc = Check condition
	longDesc = Check whether the condition of acceptance is satisfied for the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = v
		desc = Vector
	}
    impl = 
    return = {
        value = 
        desc = \c true if the vector satisfies the condition, \c false otherwise
    }
}

# operations

# Global functions.

