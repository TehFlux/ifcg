# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vertex3Set.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Matrix4.hpp"'
        '"geoutils/Plane3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/gslutils.hpp"'
    }
}

# forward declarations
forward = {
    'class Vertex3'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vertex3Set
	shortDesc = Vertex set (3D)
	title = Vertex set (3D)
	longDesc = A set of vertices in three-dimensional space.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        #'logmessage'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initVertices
        type = Ionflux::GeoUtils::Vertex3Vector&
        desc = Vertices
    }
    impl = addVertices(initVertices);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = vertices
    desc = Vertex vector
    element = {
        type = Ionflux::GeoUtils::Vertex3*
        name = Vertex
        plural = Vertices
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = Recalculate bounds
	longDesc = Recalculate the bounds for the face.
	impl = TransformableObject::recalculateBounds();\
Ionflux::GeoUtils::Vertex3Vector::const_iterator i;\
bool e0 = true;\
for (i = vertices.begin(); i < vertices.end(); i++)\
\{\
    Vertex3 v0(*(*i));\
    if (useTransform)\
        // Adjust for transformation.\
        v0.transform(transformMatrix);\
    if (useVI)\
        // Adjust for view/image matrix.\
        v0.transformVI(viewMatrix, &imageMatrix);\
    if (e0)\
    \{\
        boundsCache->setBounds(v0.getVector());\
        e0 = false;\
    \} else\
        boundsCache->extend(v0.getVector());\
\}
}

# Public member functions.
function.copy.impl = TransformableObject::operator=(other);\
Vertex3Vector v0;\
for (Vertex3Vector::const_iterator i = other.vertices.begin(); \
    i != other.vertices.end(); i++)\
    v0.push_back(&((*i)->duplicate()));\
clearVertices();\
addVertices(v0);
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3*
	name = addVertex
	shortDesc = Create vertex
	longDesc = Create a new vertex which is managed by the vertex set.
    impl = Vertex3* v0 = new Vertex3();\
if (v0 == 0)\
    throw GeoUtilsError("Could not allocate object.");\
addVertex(v0);
    return = {
        value = v0
        desc = New vertex
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = addVertices
	shortDesc = Add vertices
	longDesc = Add vertices from a vertex vector.
	param[] = {
		type = Ionflux::GeoUtils::Vertex3Vector&
		name = newVerts
		desc = Vertices
	}
    impl = for (Vertex3Vector::iterator i = newVerts.begin(); \
    i != newVerts.end(); i++)\
    addVertex(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = addVertices
	shortDesc = Add vertices
	longDesc = Add vertices from a vertex set.
	param[] = {
		type = Ionflux::GeoUtils::Vertex3Set&
		name = newVerts
		desc = Vertices
	}
    impl = for (unsigned int i = 0; i < newVerts.getNumVertices(); i++)\
    addVertex(newVerts.getVertex(i));
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
bool e0 = true;\
for (Vertex3Vector::const_iterator i = vertices.begin(); \
    i != vertices.end(); i++)\
\{\
    if (!e0)\
        status << ", ";\
    else\
        e0 = false;\
    status << (*i)->getString();\
\}\
if (!useTransform && !useVI)\
\{\
    status << "]";\
    return status.str();\
\}\
status << "; ";\
if (useTransform)\
    status << transformMatrix;\
if (useVI)\
\{\
    if (useTransform)\
        status << ", ";\
    status << viewMatrix << ", " << imageMatrix;\
\}\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the vertices in the set.
	impl = Vector3 vSum;\
Ionflux::GeoUtils::Vertex3Vector::const_iterator i;\
for (i = vertices.begin(); i < vertices.end(); i++)\
    vSum = vSum + (*i)->getVector();\
vSum = vSum / vertices.size();\
// Adjust for transformation.\
Vertex3 v0(vSum);\
if (useTransform)\
    v0.transform(transformMatrix);\
if (useVI)\
    v0.transformVI(viewMatrix, &imageMatrix);\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "barycenter = " << v0;\
log(IFLogMessage(message.str(), VL_DEBUG, this, "getBarycenter"));\
// <---- DEBUG ----- */
    return = {
        value = v0.getVector()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformations
	longDesc = Apply transformations that have been accumulated in the transformation matrices.
	param[] = {
	    type = bool
	    name = recursive
	    desc = Apply transformations recursively
	    default = false
	}
    impl = if (!useTransform \
    && !useVI)\
    // Nothing to be done.\
    return;\
for (Vertex3Vector::iterator i = vertices.begin(); \
    i != vertices.end(); i++)\
\{\
    if (useTransform)\
        (*i)->transform(transformMatrix);\
    if (useVI)\
        (*i)->transformVI(viewMatrix, &imageMatrix);\
    if (recursive)\
        (*i)->applyTransform(recursive);\
\}\
if (useTransform)\
\{\
    transformMatrix = Matrix4::UNIT;\
    useTransform = false;\
\}\
if (useVI)\
\{\
    viewMatrix = Matrix4::UNIT;\
    imageMatrix = Matrix4::UNIT;\
    useVI = false;\
\}
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = TransformableObject::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = TransformableObject::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = TransformableObject::transformVI(view, image);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Set&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = getCovariance
	shortDesc = Get covariance matrix
	longDesc = Calculate the covariance matrix for vertices in the set.
    impl = Matrix3 result;\
Ionflux::GeoUtils::covariance(*this, result);
    return = {
        value = result
        desc = covariance matrix
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = getPCABase
	shortDesc = Get PCA base
	longDesc = Calculate the PCA base matrix. This is obtained by calculating the primary component analysis of the vertices in the set.
    impl = Vertex3Set* vs = copy();\
vs->center(CENTER_BARYCENTER);\
vs->applyTransform();\
Matrix3 cov = vs->getCovariance();\
Matrix3 u;\
Vector3 s;\
Matrix3 v;\
cov.svd(u, s, v);\
delete vs;
    return = {
        value = v
        desc = PCA base matrix
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Plane3
	name = getPlaneFit
	shortDesc = Get plane fit
	longDesc = Fit a plane to the vertices in the set.
    impl = Vector3 bc = getBarycenter();\
Matrix3 pcaBase = getPCABase();
    return = {
        value = Plane3::createFromNormal(pcaBase.getC2(), pcaBase.getC1(), bc)
        desc = Plane
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getXMLData
	const = true
	shortDesc = Get XML data representation
	longDesc = Get a representation of the object suitable for use in an XML data attribute.
	impl = ostringstream d0;\
bool first = true;\
for (Vertex3Vector::const_iterator i = vertices.begin(); \
    i != vertices.end(); i++)\
\{\
    if (!first)\
        d0 << " ";\
    else\
        first = false;\
    d0 << (*i)->getXMLData();\
\}
    return = {
        value = d0.str()
        desc = XML data representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getXML
	const = true
	shortDesc = Get XML representation
	longDesc = Get an XML representation of the object.
	impl = ostringstream d0;\
d0 << "<vertex3set d=\"" << getXMLData() << "\" />";
    return = {
        value = d0.str()
        desc = XML representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

