# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Cache.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
#        '"geoutils/Clock.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Cache
	shortDesc = Transform node: Cache
	title = Transform node: Cache
	longDesc = Provides a copy of the input group as its output group until the inputCache is cleared by an explicit call (cleanup() does not clean the input cache for a Cache node).
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}

# Public constructors.
constructor.copy.impl = *this = other;
#constructor.default = {
#    impl = 
#}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
    }
    impl = 
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
addOutput(&(g0->duplicate()));
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up resources created by the node during an update operation.
    impl = 
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the outputs of the node. This updates all inputs and checks the loop counter to make sure the maximum number of loop iterations is not exceeded. It clears the output groups and calls process() to do the actual processing of the inputs. Note that a transform node does not have outputs unless update() has been called and finished processing at least once. Outputs are considered a cache rather than state of the object (they are also not copied when using an assignment or copy constructor). See the spec for details.
    impl = if (loopCounter >= loopMax)\
    throw GeoUtilsError("Maximum number of loop iterations exceeded.");\
loopCounter++;\
if (inputCache.size() == 0)\
\{\
    /* Do not update the source node unless the input cache has been \
       cleared. */\
    updateInputs();\
    clearInputGroups();\
\}\
/* <---- DEBUG ----- //\
Ionflux::GeoUtils::Clock c0;\
c0.start();\
// ----- DEBUG ----> */\
process();\
/* <---- DEBUG ----- //\
c0.stop();\
std::ostringstream message;\
message << "processing time: " << c0.getElapsedTime() << " secs";\
log(IFLogMessage(message.str(), VL_DEBUG, this, "update"));\
// ----- DEBUG ----> */\
cleanup();\
updateCounter++;\
loopCounter = 0;\
if (debugMode)\
    log(IFLogMessage(getDebugInfo(debugExpand), VL_DEBUG, \
        this, "update"));
}

# operations

# Global functions.

