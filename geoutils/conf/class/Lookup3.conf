# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Lookup3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = Mapping

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::GeoUtils::Vector3'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
        '"ifmapping/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Lookup3
	shortDesc = Vector mapping: Lookup
	title = Vector mapping: Lookup
	longDesc = A vector mapping that returns a value from a lookup table. The value of the parameter is used to select an entry from the table by scaling the parameter range [0...1] to the number of entries in the table. The table can be either filled from a vector of values or from another mapping, which will be queried with values in the range [0...1] to obtain the values used to populate the table. If another lookup table is used as the source mapping with the exact same number of entries as the table to be populated, the lookup table will become a copy of the source.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::Mapping::Vector3Mapping
            include = geoutils/Vector3Mapping.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = entries
    desc = Vector of entries
    element = {
        name = Entry
        type = Ionflux::GeoUtils::Vector3*
        plural = Entries
        managed = true
    }
}
property.protected[] = {
	type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	setFromType = Ionflux::GeoUtils::Mapping::Vector3Mapping*
	name = source
	desc = Source mapping
	managed = true
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = DEFAULT_NUM_ENTRIES
    desc = Default number of entries
    value = 100
}
constant.public[] = {
    type = Ionflux::Mapping::Range
    name = CLAMP_RANGE
    desc = Clamp range
    value = \{ 0., 1. \}
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = source
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = source
        value = 0
    }
    param[] = {
        type = Ionflux::GeoUtils::Mapping::Vector3Mapping*
        name = initSource
        desc = Source mapping
    }
    param[] = {
        type = unsigned int
        name = initNumEntries
        desc = Number of entries
        default = DEFAULT_NUM_ENTRIES
    }
    impl = setSource(initSource);\
update(initNumEntries);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = Vector3Mapping::operator=(other);\
setSource(other.source);\
Ionflux::GeoUtils::Vector3Vector v0;\
for (Ionflux::GeoUtils::Vector3Vector::const_iterator i = \
    other.entries.begin(); i != other.entries.end(); i++)\
\{\
    addLocalRef(*i);\
    v0.push_back(*i);\
\}\
clearEntries();\
for (Ionflux::GeoUtils::Vector3Vector::iterator i = v0.begin(); \
    i != v0.end(); i++)\
\{\
    addEntry(*i);\
    removeLocalRef(*i);\
\}
function.public[] = {
    spec = virtual
    type = void
    name = update
    shortDesc = Update entries
    longDesc = Update the entries from the source function. The source function is called with evenly spaced parameters across the range [0...1] to generate the specified number of entries for the lookup table. All previously defined entries are removed.
	param[] = {
		type = unsigned int
		name = numEntries
		desc = Number of Entries
        default = DEFAULT_NUM_ENTRIES
	}
    impl = clearEntries();\
if (source == 0)\
    throw GeoUtilsError("Source mapping not defined.");\
if (numEntries == 0)\
    return;\
if (numEntries == 1)\
    addEntry(new Vector3((*source)(0.5)));\
Ionflux::Mapping::MappingValue d = 1. / (numEntries - 1);\
for (unsigned int i = 0; i < numEntries; i++)\
    addEntry(new Vector3((*source)(i * d)));
}
function.public[] = {
    spec = virtual
    type = void
    name = addEntries
    shortDesc = Add entries
    longDesc = Add a number of entries from the specified vector. If there are not enough entries in the vector, reading entries resumes from the beginning of the vector. If the number of entries specified as a parameter is 0, the number of entries added will be equal to the number of elements in the vector.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3Vector&
        name = newEntries
        desc = Entries
    }
	param[] = {
		type = unsigned int
		name = numEntries
		desc = Number of Entries
        default = 0
	}
    impl = if (numEntries == 0)\
    numEntries = newEntries.size();\
unsigned int sourceNumEntries = newEntries.size();\
for (unsigned int i = 0; i < numEntries; i++)\
\{\
    Vector3* v0 = newEntries[i % sourceNumEntries];\
    if (v0 == 0)\
        throw GeoUtilsError("Source vector is null.");\
    addEntry(new Vector3(*v0));\
\}
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = call
    const = true
	shortDesc = Evaluate the mapping
	longDesc = Evaluate the mapping with the specified parameter.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = if (entries.size() == 0)\
    throw GeoUtilsError("Lookup table is empty.");\
unsigned int i = static_cast<unsigned int>(\
    Ionflux::Mapping::clamp(value, CLAMP_RANGE) * entries.size());\
if (i >= entries.size())\
    i = entries.size() - 1;\
Vector3* result = entries[i];\
if (result == 0)\
    throw GeoUtilsError("Result vector is null.");
    return = {
        value = *result
        desc = Mapped value
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (source != 0)\
    status << source->getString();\
else\
    status << "<none>";\
status << ", " << entries.size() << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

