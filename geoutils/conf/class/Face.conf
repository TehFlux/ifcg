# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Face.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/Matrix3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3Set.hpp"'
        '"geoutils/VectorSetSet.hpp"'
        '"geoutils/FaceData.hpp"'
        '"geoutils/NFaceSet.hpp"'
    }
}

# forward declarations
forward = {
    'class VectorSetSet'
    'class FaceData'
    'class NFaceSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Face
	shortDesc = Mesh face
	title = Mesh face
	longDesc = A mesh face.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::NFace
            include = geoutils/NFace.hpp
            xml = {
                enabled = true
                #getFunc = getNFace
                include = geoutils/NFace
            }
		}
	}
    features = {
        'logmessage'
        'classinfo'
        'copy'
        'upcast'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = face
}

# Protected variables.
variable.protected[] = {
       type = Ionflux::GeoUtils::Vector3*
       name = tangent
       desc = Tangent vector
}
variable.protected[] = {
       type = Ionflux::GeoUtils::Vector3*
       name = normal
       desc = Normal vector
}
variable.protected[] = {
       type = Ionflux::GeoUtils::Vector3*
       name = binormal
       desc = Binormal vector
}
# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = tangent
        value = 0
    }
    initializer[] = {
        name = normal
        value = 0
    }
    initializer[] = {
        name = binormal
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = tangent
        value = 0
    }
    initializer[] = {
        name = normal
        value = 0
    }
    initializer[] = {
        name = binormal
        value = 0
    }
    param[] = {
        name = initVerts
        type = const Ionflux::ObjectBase::UIntVector*
        desc = Vertex index vector
    }
    param[] = {
        name = initVertexSource
        type = Ionflux::GeoUtils::Vertex3Set*
        desc = Vertex source
        default = 0
    }
    param[] = {
        name = initUV
        type = Ionflux::GeoUtils::FaceData*
        desc = Texture coordinates
        default = 0
    }
    param[] = {
        name = initVertexColors
        type = Ionflux::GeoUtils::FaceData*
        desc = Vertex colors
        default = 0
    }
    impl = <<<
if (initVerts != 0)
    addVertices(*initVerts);
if (initVertexSource != 0)
    setVertexSource(initVertexSource);
if (initUV != 0)
    addFaceData(initUV);
if (initVertexColors != 0)
    addFaceData(initVertexColors);
update();
>>>
}
constructor.public[] = {
    initializer[] = {
        name = tangent
        value = 0
    }
    initializer[] = {
        name = normal
        value = 0
    }
    initializer[] = {
        name = binormal
        value = 0
    }
	param[] = {
		type = unsigned int
		name = v0
		desc = Vertex index (0)
	}
	param[] = {
		type = unsigned int
		name = v1
		desc = Vertex index (1)
	}
	param[] = {
		type = unsigned int
		name = v2
		desc = Vertex index (2)
	}
	param[] = {
		type = unsigned int
		name = v3
		desc = Vertex index (3)
		default = Ionflux::GeoUtils::NFace::VERTEX_INDEX_NONE
	}
    param[] = {
        name = initVertexSource
        type = Ionflux::GeoUtils::Vertex3Set*
        desc = Vertex source
        default = 0
    }
    param[] = {
        name = initUV
        type = Ionflux::GeoUtils::FaceData*
        desc = Texture coordinates
        default = 0
    }
    param[] = {
        name = initVertexColors
        type = Ionflux::GeoUtils::FaceData*
        desc = Vertex colors
        default = 0
    }
    impl = <<<
addVertices(v0, v1, v2, v3);
if (initVertexSource != 0)
    setVertexSource(initVertexSource);
if (initUV != 0)
    addFaceData(initUV);
if (initVertexColors != 0)
    addFaceData(initVertexColors);
update();
>>>
}

# Destructor.
destructor.impl = clear();

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
clear();
for (UIntVector::const_iterator i = other.vertices.begin(); 
    i != other.vertices.end(); i++)
    vertices.push_back(*i);
NFace::operator=(other);
update();
>>>
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update all state according to the vertices of the face.
    impl = <<<
NFace::update();
clearTangentSpace();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearTangentSpace
	shortDesc = Clear tangent space
	longDesc = Clear the tangent space vectors.
    impl = <<<
if (tangent != 0)
    removeLocalRef(tangent);
tangent = 0;
if (normal != 0)
    removeLocalRef(normal);
normal = 0;
if (binormal != 0)
    removeLocalRef(binormal);
binormal = 0;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Removes all items and resets state.
    impl = <<<
NFace::clear();
clearTangentSpace();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setFaceVertexNormals
	shortDesc = Set face vertex normals
	longDesc = Set the vertex normals for the face to the face normal.
    impl = <<<
Vector3 n0 = getNormal();
FaceData* vn0 = getVertexNormals0();
if (vn0 == 0)
{
    vn0 = FaceData::upcast(
        addFaceData(FaceData::TYPE_VERTEX_NORMAL));
}
vn0->clearVectors();
unsigned int numVerts = getNumVertices();
for (unsigned int i = 0; i < numVerts; i++)
    vn0->addVector(n0.copy());
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setVertexColors
	shortDesc = Set vertex colors
	longDesc = Set the vertex colors for the face to the specified color vector.
	param[] = {
	    type = const Ionflux::GeoUtils::Vector4&
	    name = color
	    desc = color vector
	}
    impl = <<<
FaceData* vc0 = getVertexColors0();
if (vc0 == 0)
{
    vc0 = FaceData::upcast(
        addFaceData(FaceData::TYPE_VERTEX_COLOR));
}
vc0->clearVectors();
unsigned int numVerts = getNumVertices();
for (unsigned int i = 0; i < numVerts; i++)
{
    vc0->addVector(color.copy());
}
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getTangent
	shortDesc = Get tangent vector
	longDesc = Get the tangent vector for the face.
    impl = <<<
if (tangent != 0)
    return *tangent;
Ionflux::ObjectBase::nullPointerCheck(vertexSource, this, 
    "getTangent", "Vertex source");
if (vertices.size() < 3)
    throw GeoUtilsError(getErrorString(
        "Face does not have enough vertices.", "getTangent"));
Vertex3* pv0 = vertexSource->getVertex(vertices[0]);
Vector3 p0 = pv0->getVector();
Vertex3* pv1 = vertexSource->getVertex(vertices[1]);
Vector3 p1 = pv1->getVector();
tangent = Vector3::create();
addLocalRef(tangent);
Vector3 b = getBinormal();
FaceData* uv = getTexCoords0();
if ((uv == 0) 
    || (uv->getNumVectors() < 3))
{
    *tangent = b.ortho(p1 - p0).normalize();
    return *tangent;
}
// Calculate tangent vector according to texture coordinates.
Vector* uv0 = Ionflux::ObjectBase::nullPointerCheck(
    uv->getVector(0), this, "getTangent", "Texture coordinate vector");
Vector* uv1 = Ionflux::ObjectBase::nullPointerCheck(
    uv->getVector(1), this, "getTangent", "Texture coordinate vector");
double u0 = uv0->getElement(0);
double v0 = uv0->getElement(1);
double u1 = uv1->getElement(0);
double v1 = uv1->getElement(1);
*tangent = 1. / (u1 - u0) * ((p1 - p0) - (v1 - v0) * b);
>>>
    return = {
        value = *tangent
        desc = Tangent vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBinormal
    desc = Get binormal vector
	longDesc = Get the binormal vector for the face.
    impl = <<<
if (binormal != 0)
    return *binormal;
Ionflux::ObjectBase::nullPointerCheck(vertexSource, this, 
    "getBinormal", "Vertex source");
if (vertices.size() < 3)
    throw GeoUtilsError("Face does not have enough vertices.");
binormal = Vector3::create();
addLocalRef(binormal);
Vertex3* pv0 = vertexSource->getVertex(vertices[0]);
Vector3 p0 = pv0->getVector();
Vertex3* pv1 = vertexSource->getVertex(vertices[1]);
Vector3 p1 = pv1->getVector();
Vertex3* pv2 = vertexSource->getVertex(vertices[2]);
Vector3 p2 = pv2->getVector();
FaceData* uv = getTexCoords0();
if ((uv == 0) 
    || (uv->getNumVectors() < 3))
{
    *binormal = (p2 - p0).normalize();
    return *binormal;
}
// Calculate binormal vector according to texture coordinates.
Vector* uv0 = Ionflux::ObjectBase::nullPointerCheck(
    uv->getVector(0), this, "getBinormal", "Texture coordinate vector");
Vector* uv1 = Ionflux::ObjectBase::nullPointerCheck(
    uv->getVector(1), this, "getBinormal", "Texture coordinate vector");
Vector* uv2 = Ionflux::ObjectBase::nullPointerCheck(
    uv->getVector(2), this, "getBinormal", "Texture coordinate vector");
double u0 = uv0->getElement(0);
double v0 = uv0->getElement(1);
double u1 = uv1->getElement(0);
double v1 = uv1->getElement(1);
double u2 = uv2->getElement(0);
double v2 = uv2->getElement(1);
*binormal = 1. / ((v2 - v0) * (u1 - u0) 
    - (v1 - v0) * (u2 - u0)) 
    * ((u1 - u0) * (p2 - p0) - (u2 - u0) * (p1 - p0));
>>>
    return = {
        value = *binormal
        desc = Binormal vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getNormal
    desc = Get normal vector
	longDesc = Get the normal vector for the face.
    impl = <<<
if (normal != 0)
    return *normal;
Vector3 t = getTangent();
Vector3 b = getBinormal();
normal = Vector3::create();
addLocalRef(normal);
*normal = t.cross(b).normalize();
>>>
    return = {
        value = *normal
        desc = Normal vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix3
	name = getTangentBase
    desc = Get tangent base matrix
	longDesc = Calculates the base matrix of the tangent space for the face.
    impl = <<<
Matrix3 m;
m.setC0(getTangent());
m.setC1(getBinormal());
m.setC2(getNormal());
>>>
    return = {
        value = m
        desc = Tangent space base matrix
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = makePlanar
	shortDesc = Make face planar
	longDesc = Make the face planar. If the optional parameter is specified, vertices will be moved only by the specified fraction of the offset required to make the face planar. The transformations (if any) are applied immediately to the vertices.
	param[] = {
	    type = double
	    name = p
	    desc = Parameter
	    default = 1.
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
if (isPlanar(t))
    return;
if (vertexSource == 0)
    throw GeoUtilsError(getErrorString("Vertex source is not set.", 
        "makePlanar"));
if (vertices.size() < 3)
    throw GeoUtilsError(getErrorString(
        "Face does not have enough vertices.", "makePlanar"));
Vertex3Set vs;
for (UIntVector::iterator i = vertices.begin(); i != vertices.end(); i++)
    vs.addVertex(vertexSource->getVertex(*i)->copy());
Plane3 pl = vs.getPlaneFit();
Vector3 n0 = pl.getNormal();
for (UIntVector::iterator i = vertices.begin(); i != vertices.end(); i++)
{
    Vertex3* v0 = vertexSource->getVertex(*i);
    double d0 = v0->distanceToPlane(pl);
    Vector3 offset = n0 * (-d0 * p);
    v0->translate(offset);
    v0->applyTransform();
}
update();
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = isBackface
	shortDesc = Backface check
	longDesc = Check whether the face faces backwards relative to the specified front vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = front
		desc = Front vector
	}
    impl = <<<
if (normal == 0)
    getNormal();
if (normal->angle(front) > (0.5 * M_PI))
    return true;
>>>
    return = {
        value = false
        desc = The duplicated object
    }
}

# public member functions overridden from NFace
function.public[] = {
	spec = virtual
	type = void
	name = getTris
	shortDesc = Get triangle faces
	longDesc = Create triangles for a triangle or quad N-face. The new faces are not referenced and must be managed by the caller.
	param[] = {
	    type = Ionflux::GeoUtils::FaceVector&
	    name = target
	    desc = where to store the triangles
	}
    impl = <<<
Ionflux::ObjectBase::nullPointerCheck(vertexSource, this, 
    "getTris", "Vertex source");
if (isTri())
{
    target.push_back(copy());
    return;
}
if (!isQuad())
{
    throw GeoUtilsError(getErrorString(
        "Face is not a quad.", "getTris"));
}
FaceVector result;
UIntVector v0;
v0.push_back(vertices[0]);
v0.push_back(vertices[1]);
v0.push_back(vertices[2]);
UIntVector v1;
v1.push_back(vertices[0]);
v1.push_back(vertices[2]);
v1.push_back(vertices[3]);
UIntVector iv0;
iv0.push_back(0);
iv0.push_back(1);
iv0.push_back(2);
UIntVector iv1;
iv1.push_back(0);
iv1.push_back(2);
iv1.push_back(3);
Face* f0 = Face::create(&v0, vertexSource);
Face* f1 = Face::create(&v1, vertexSource);
if (faceData != 0)
{
    // copy face data
    VectorSetSet* nfd0 = VectorSetSet::create();
    VectorSetSet* nfd1 = VectorSetSet::create();
    getFaceDataByVertex(iv0, *nfd0);
    getFaceDataByVertex(iv1, *nfd1);
    f0->setFaceData(nfd0);
    f1->setFaceData(nfd1);
}
target.push_back(f0);
target.push_back(f1);
>>>
}

# public member functions overridden from TransformableObject
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = TransformableObject::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = TransformableObject::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = <<<
log(IFLogMessage("Transforming face.", VL_WARNING, this, 
    "transform"));
TransformableObject::transform(matrix);
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Face&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}


# Legacy functions.

# Pure virtual member functions.

# operations

# Global functions.

