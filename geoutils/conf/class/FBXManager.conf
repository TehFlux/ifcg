# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# FBXManager.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/fbxtypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fbxsdk.h>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = FBXManager
	shortDesc = FBX Manager
	title = FBX Manager
	longDesc = A wrapper for the FBX manager, which is used to manage the memory for FBX objects.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        ## other base classes
        #other[] = {
		#}
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    bindings.disable = true
    type = FBXSDK_NAMESPACE::FbxManager*
    setFromType = FBXSDK_NAMESPACE::FbxManager*
    name = impl
    desc = FBX manager implementation
    impl.set = <<<
if (newImpl == impl)
    return;
if (impl != 0)
    impl->Destroy();
impl = newImpl;
>>>
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = impl
        value = 0
    }
    impl = <<<
initImpl();
>>>
}

# Destructor.
destructor.impl = <<<
if (impl != 0)
{
    impl->Destroy();
    impl = 0;
}
>>>

# Protected member functions.
function.protected[] = {
    spec = virtual
    type = void
    name = initImpl
    shortDesc = Initialize the FBX manager implementation
    longDesc = Initialize the FBX manager implementation.
    impl = <<<
FbxManager* fbxm = FbxManager::Create();
if (fbxm == 0)
    throw GeoUtilsError(getErrorString(
        "Could not create FBX manager.", "initFBXManager"));
FbxIOSettings* ios = FbxIOSettings::Create(fbxm, IOSROOT);
fbxm->SetIOSettings(ios);
setImpl(fbxm);
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setImpl(other.impl);
>>>
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = 
    return = {
        value = ""
        desc = String representation
    }
}

# static member functions

# Pure virtual member functions.

# operations

# Global functions.

