# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TransformGraph.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/TransformableGroup.hpp"'
        '"geoutils/TransformNode.hpp"'
        '"geoutils/Connection.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<climits>'
        '<sstream>'
        '<iomanip>'
        '<algorithm>'
        '<set>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TransformGraph
	shortDesc = Transform graph
	title = Transform graph
	longDesc = A transform graph is a network of transform nodes that is itself a transform node. The graph identifies a source node to which inputs can be added and a drain node which can be queried for output groups. The graph also provides a simple interface to manage connections between nodes that are part of the graph.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'classinfo'
        'copy'
        'logmessage'
        'upcast'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = inputs
    desc = Vector of input node specifications
    element = {
        type = Ionflux::GeoUtils::TransformNodes::InputNodeSpec
        addType = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
        removeType = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
        name = Input
        defaultValue = DEFAULT_INPUT_NODE_SPEC
        #plural = Inputs
        ## Inputs are not managed. See the spec for an explanation.
        #managed = true
    }
    proxy = {
        target = source
        nullError = GeoUtilsError("Source node not set.")
    }
}
property.protected[] = {
    style = vector
    name = outputs
    desc = Vector of output groups
    element = {
        type = Ionflux::GeoUtils::TransformableGroup*
        name = Output
        #plural = Outputs
        managed = true
    }
    proxy = {
        target = drain
        nullError = GeoUtilsError("Drain node not set.")
    }
}
property.protected[] = {
    style = vector
    name = connections
    desc = Vector of connections
    element = {
        type = Ionflux::GeoUtils::TransformNodes::Connection*
        name = Connection
        #plural = Connections
        managed = true
    }
}
property.protected[] = {
    style = vector
    name = nodes
    desc = Vector of nodes
    element = {
        type = Ionflux::GeoUtils::TransformNodes::TransformNode*
        name = Node
        #plural = Nodes
        managed = true
    }
}
property.protected[] = {
    type = Ionflux::GeoUtils::TransformNodes::TransformNode*
    setFromType = Ionflux::GeoUtils::TransformNodes::TransformNode*
    name = source
    desc = Source node
    impl.set = if (newSource != 0)\
\{\
    // Make sure the new source node is part of the graph.\
    Ionflux::GeoUtils::TransformNodeVector::iterator i = \
    find(nodes.begin(), nodes.end(), newSource);\
    if (i == nodes.end())\
        addNode(newSource);\
\}\
source = newSource;
}
property.protected[] = {
    type = Ionflux::GeoUtils::TransformNodes::TransformNode*
    setFromType = Ionflux::GeoUtils::TransformNodes::TransformNode*
    name = drain
    desc = Drain node
    impl.set = if (newDrain != 0)\
\{\
    // Make sure the new drain node is part of the graph.\
    Ionflux::GeoUtils::TransformNodeVector::iterator i = \
    find(nodes.begin(), nodes.end(), newDrain);\
    if (i == nodes.end())\
        addNode(newDrain);\
\}\
drain = newDrain;
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = NODE_INDEX_LAST
    desc = Index of the last node
    value = UINT_MAX
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = drain
        value = 0
    }
}

## Destructor.
#destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs.
    impl = /* Nothing to be done here, all processing is done \
       by the drain node. */
}


# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
TransformNodeVector v0;\
source = other.source;\
drain = other.drain;\
for (TransformNodeVector::const_iterator i = other.nodes.begin(); \
    i != other.nodes.end(); i++)\
\{\
    addLocalRef(*i);\
    v0.push_back(*i);\
\}\
clearNodes();\
addNodes(v0);\
for (TransformNodeVector::const_iterator i = v0.begin(); \
    i != v0.end(); i++)\
    removeLocalRef(*i);
function.public[] = {
	spec = virtual
	type = void
	name = addLinked
	shortDesc = Add linked nodes
	longDesc = Add the specified node and all nodes that are linked, via some path starting at the node, to its inputs. Nodes will not be added if they already exist within the graph.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = newNode
		desc = Node
	}
    impl = addNode(newNode);\
std::set<TransformNode*> exclude;\
for (TransformNodeVector::iterator i = nodes.begin(); \
    i != nodes.end(); i++)\
    exclude.insert(*i);\
TransformNodeVector v0;\
newNode->getLinkedInputs(v0);\
for (TransformNodeVector::iterator i = nodes.begin(); \
    i != nodes.end(); i++)\
\{\
    if (exclude.find(*i) == exclude.end())\
    \{\
        // Node does not yet exist with the graph, add it.\
        exclude.insert(*i);\
        addNode(*i);\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear graph
	longDesc = Clear the transform graph. This removes all nodes and connections.
    impl = source = 0;\
drain = 0;\
for (ConnectionVector::iterator i = connections.begin(); \
    i != connections.end(); i++)\
    if (*i != 0)\
        removeLocalRef(*i);\
connections.clear();\
for (TransformNodeVector::iterator i = nodes.begin(); \
    i != nodes.end(); i++)\
    if (*i != 0)\
        removeLocalRef(*i);\
nodes.clear();
}
function.public[] = {
	spec = virtual
	type = void
	name = addNodes
	shortDesc = Add nodes
	longDesc = Add nodes.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodeVector&
		name = newNodes
		desc = Nodes
	}
    impl = for (TransformNodeVector::iterator i = newNodes.begin(); \
    i != newNodes.end(); i++)\
    addNode(*i);
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformNodes::Connection*
	name = findConnection
	shortDesc = Find connection
	longDesc = Find a connection within the graph.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = source
		desc = Source node
		default = 0
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = target
		desc = Target node
		default = 0
	}
    param[] = {
        type = unsigned int
        name = outputID
        desc = Output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = inputID
        desc = Input ID
        default = 0
    }
    param[] = {
        type = bool
        name = connectLater
        desc = Connect later
        default = false
    }
    impl = if (source == 0)\
    throw GeoUtilsError("Source node is null.");\
if (target == 0)\
    throw GeoUtilsError("Target node is null.");\
TransformNodeVector::iterator i = find(nodes.begin(), \
    nodes.end(), source);\
if (i == nodes.end())\
    throw GeoUtilsError("Source node is not part of the graph.");\
i = find(nodes.begin(), nodes.end(), target);\
if (i == nodes.end())\
    throw GeoUtilsError("Target node is not part of the graph.");\
Connection* result = 0;\
// This connection is used for comparison.\
Connection c0(source, target, outputID, inputID, true);\
unsigned int k = 0;\
while ((result == 0) \
    && (k < connections.size()))\
\{\
    Connection* c1 = connections[k];\
    if ((c1 != 0) \
        && ((*c1) == c0))\
        result = c1;\
    k++;\
\}
    return = {
        value = result
        desc = Connection, or \c 0 if the connection does not exist
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = connect
	shortDesc = Connect
	longDesc = Establish a connection from the specified output slot of the source node to the specified input slot of the target node. If \c connectLater is \c true, the internal state will be set up but the connection will not be established immediately.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = source
		desc = Source node
		default = 0
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = target
		desc = Target node
		default = 0
	}
    param[] = {
        type = unsigned int
        name = outputID
        desc = Output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = inputID
        desc = Input ID
        default = INPUT_NEXT_FREE
    }
    param[] = {
        type = bool
        name = connectLater
        desc = Connect later
        default = false
    }
    impl = if (source == 0)\
    throw GeoUtilsError("Source node is null.");\
if (target == 0)\
    throw GeoUtilsError("Target node is null.");\
TransformNodeVector::iterator i = find(nodes.begin(), \
    nodes.end(), source);\
if (i == nodes.end())\
    throw GeoUtilsError("Source node is not part of the graph.");\
i = find(nodes.begin(), nodes.end(), target);\
if (i == nodes.end())\
    throw GeoUtilsError("Target node is not part of the graph.");\
Connection* c0 = 0;\
if (inputID == INPUT_NEXT_FREE)\
    // The connection certainly does not exist yet.\
    inputID = target->getNumInputs();\
else\
    // The connection may exist already.\
    c0 = findConnection(source, target, outputID, inputID);\
if (c0 == 0)\
\{\
    // Connection does not exist, create it.\
    c0 = new Connection(source, target, outputID, \
        inputID, true);\
    if (c0 == 0)\
        throw GeoUtilsError("Could not allocate object");\
    /* <---- DEBUG ----- //\
    std::ostringstream message;\
    message << "Adding connection: " << *c0;\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "connect"));\
    // ----- DEBUG ----> */\
    addConnection(c0);\
\}\
if (!c0->isConnected())\
    c0->connect();
    return = {
        value = true
        desc = \c true if a connection has been established, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = disconnect
	shortDesc = Disconnect
	longDesc = Disconnect a connection between nodes.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = source
		desc = Source node
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = target
		desc = Target node
	}
    param[] = {
        type = unsigned int
        name = outputID
        desc = Output ID
        default = 0
    }
    param[] = {
        type = unsigned int
        name = inputID
        desc = Input ID
        default = 0
    }
    impl = Connection* c0 = findConnection(source, target, outputID, \
    inputID);\
if (c0 == 0)\
    return false;\
c0->disconnect();
    return = {
        value = true
        desc = \c true if the connection has been discarded, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = chain
	shortDesc = Chain nodes
	longDesc = Establish connections between the specified nodes using default parameters. This can be used to conveniently establish a chain of nodes within the graph. If the index of the last node is \c NODE_INDEX_LAST, the maximum possible index will be used as the index of the last node.
	param[] = {
		type = unsigned int
		name = first
		desc = Index of first node
		default = 0
	}
	param[] = {
		type = unsigned int
		name = last
		desc = Index of last node
		default = NODE_INDEX_LAST
	}
    impl = if (last == NODE_INDEX_LAST)\
    last = nodes.size() - 1;\
for (unsigned int i = first; i < last; i++)\
    connect(nodes[i], nodes[i + 1]);
}
function.public[] = {
	spec = virtual
	type = void
	name = connectRange
	shortDesc = Connect a range of outputs
	longDesc = Connect the specified number of output slots of the source node starting from the specified first output slot to the range of input slots of the target node starting at the specified first input slot.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = source
		desc = Source node
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = target
		desc = Target node
	}
	param[] = {
		type = unsigned int
		name = numOutputSlots
		desc = Number of output slots to connect
	}
	param[] = {
		type = unsigned int
		name = firstOutputID
		desc = ID of first output to connect
		default = 0
	}
	param[] = {
		type = unsigned int
		name = firstInputID
		desc = ID of first input to connect
		default = INPUT_NEXT_FREE
	}
    impl = if (source == 0)\
    throw GeoUtilsError("Source node is null.");\
if (target == 0)\
    throw GeoUtilsError("Target node is null.");\
unsigned int inputID = firstInputID;\
unsigned int lastOutputID = firstOutputID + numOutputSlots - 1;\
for (unsigned int i = firstOutputID; i <= lastOutputID; i++)\
\{\
    connect(source, target, i, inputID, false);\
    if (inputID != INPUT_NEXT_FREE)\
        inputID++;\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = connectFan
	shortDesc = Connect one output to a range of inputs
	longDesc = Connect the specified output slot of the source node to the range of input slots of the target node starting at the specified first input slot.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = source
		desc = Source node
	}
	param[] = {
		type = Ionflux::GeoUtils::TransformNodes::TransformNode*
		name = target
		desc = Target node
	}
	param[] = {
		type = unsigned int
		name = numInputSlots
		desc = Number of input slots to connect
	}
	param[] = {
		type = unsigned int
		name = outputID
		desc = ID of output to connect
		default = 0
	}
	param[] = {
		type = unsigned int
		name = firstInputID
		desc = ID of first input to connect
		default = INPUT_NEXT_FREE
	}
    impl = if (source == 0)\
    throw GeoUtilsError("Source node is null.");\
if (target == 0)\
    throw GeoUtilsError("Target node is null.");\
unsigned int inputID = firstInputID;\
for (unsigned int i = 0; i < numInputSlots; i++)\
\{\
    connect(source, target, outputID, inputID, false);\
    if (inputID != INPUT_NEXT_FREE)\
        inputID++;\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = setIO
	shortDesc = Set input/output nodes
	longDesc = Set the source and drain nodes to the nodes with the specified indices.
	param[] = {
		type = unsigned int
		name = sourceIndex
		desc = Index of source node
		default = 0
	}
	param[] = {
		type = unsigned int
		name = drainIndex
		desc = Index of drain node
		default = NODE_INDEX_LAST
	}
    impl = if (sourceIndex == NODE_INDEX_LAST)\
    sourceIndex = nodes.size() - 1;\
if (drainIndex == NODE_INDEX_LAST)\
    drainIndex = nodes.size() - 1;\
if (sourceIndex >= nodes.size())\
\{\
    std::ostringstream message;\
    message << "Source node index out of range: " << sourceIndex;\
    throw GeoUtilsError(message.str());\
\}\
if (drainIndex >= nodes.size())\
\{\
    std::ostringstream message;\
    message << "Drain node index out of range: " << drainIndex;\
    throw GeoUtilsError(message.str());\
\}\
source = nodes[sourceIndex];\
drain = nodes[drainIndex];
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (source != 0)\
    status << source->getString();\
else\
    status << "<none>";\
status << ", ";\
if (drain != 0)\
    status << drain->getString();\
else\
    status << "<none>";\
status << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Functions overridden from TransformNode.
function.public[] = {
	spec = virtual
	type = void
	name = addInputs
	shortDesc = Add inputs
	longDesc = Add input nodes.
	param[] = {
		type = const Ionflux::GeoUtils::InputNodeSpecVector&
		name = newInputs
		desc = Input node specifications
	}
    impl = if (source == 0)\
    throw GeoUtilsError("Source node not set.");\
source->addInputs(newInputs);
}
function.public[] = {
	spec = virtual
	type = void
	name = getLinkedInputs
	shortDesc = Get linked inputs
	longDesc = Get all input nodes that, via some path starting from this node, are linked to the inputs of this node.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodeVector&
		name = target
		desc = Target vector
	}
    impl = if (visited)\
    // There is some loop, return immediately.\
    return;\
if (source == 0)\
    throw GeoUtilsError("Source node not set.");\
source->getLinkedInputs(target);\
visited = false;
}
function.public[] = {
	spec = virtual
	type = void
	name = setInput
	shortDesc = Set input
	longDesc = Set the input with the specified ID.
	param[] = {
		type = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
		name = newInput
		desc = Input node specification
	}
	param[] = {
		type = unsigned int
		name = inputID
		desc = Input ID
		default = INPUT_NEXT_FREE
	}
    impl = if (source == 0)\
    throw GeoUtilsError("Source node not set.");\
source->setInput(newInput, inputID);
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the outputs of the node. This updates all inputs and checks the loop counter to make sure the maximum number of loop iterations is not exceeded. It clears the output groups and calls process() to do the actual processing of the inputs. Note that a transform node does not have outputs unless update() has been called and finished processing at least once. Outputs are considered a cache rather than state of the object (they are also not copied when using an assignment or copy constructor). See the spec for details.
    impl = if (loopCounter >= loopMax)\
    throw GeoUtilsError("[TransformGraph.update] " \
        "Maximum number of loop iterations exceeded.");\
loopCounter++;\
if (drain == 0)\
    throw GeoUtilsError("[TransformGraph.update] "\
        "Drain node not set.");\
drain->update();\
updateCounter++;\
loopCounter = 0;\
if (debugMode)\
    log(IFLogMessage(drain->getDebugInfo(debugExpand), VL_DEBUG, \
        this, "update"));
}

# Pure virtual member functions.

# operations

# Global functions.

