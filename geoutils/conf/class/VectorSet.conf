# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# VectorSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vector.hpp"'
        '"geoutils/MatrixMN.hpp"'
    }
}

# forward declarations
forward = {
    'class Vector'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VectorSet
	shortDesc = Vector set
	title = Vector set
	longDesc = A set of vectors.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml = {
        elementName = vectorset
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initVectors
        type = Ionflux::GeoUtils::VectorVector&
        desc = Vectors
    }
    impl = addVectors(initVectors);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = vectors
    desc = Vector of vectors
    element = {
        type = Ionflux::GeoUtils::Vector*
        name = Vector
        #plural = Vectors
        managed = true
        valueType = object
        createExpr = Vector::create()
    }
    xml.child = {
        name = vectors
        elementName = vectorvec
    }
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
VectorVector v0;
for (VectorVector::const_iterator i = other.vectors.begin(); 
    i != other.vectors.end(); i++)
    v0.push_back((*i)->copy());
clearVectors();
addVectors(v0);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = makeOrientationsConsistent
	shortDesc = Make vector orientations consistent
	longDesc = Make vector orientations consistent. This function flips vectors as necessary to make neighbouring vectors consistently oriented, with the minimum amount of flips necessary. If the optional \c flipData argument is specified, information about which elements have been flipped will be stored in that vector.
	param[] = {
		type = Ionflux::GeoUtils::Vector*
		name = flipData
		desc = Where to store flip data
        default = 0
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
unsigned int numVecs0 = getNumVectors();
/* Calculate flipping cost for both cases.
   Cost matrix:
     column 0: cost if first vector is flipped
     column 1: cost if first vector is not flipped
 */
MatrixMN m0(numVecs0, 2);
// Total cost for both cases.
double tc0 = 0.;
double tc1 = 0.;
for (unsigned int i = 0; i < numVecs0; i++)
{
    Vector* v0 = getVector(i);
    if (i == 0)
    {
        // first vector
        m0.setElement(i, 0, 0.);
        m0.setElement(i, 1, 1.);
        tc1 += 1.;
    } else 
    {
        Vector* v1 = getVector(i - 1);
        double o0 = v0->dot(*v1);
        double c0 = m0.getElement(i - 1, 0);
        double c1 = m0.getElement(i - 1, 1);
        double vv0 = 0.;
        double vv1 = 0.;
        if (lt(o0, 0., t))
        {
            /* Default orientation is inconsistent: 
               either one of the vectors needs to be flipped. */
            if (c0 == 0.)
                vv0 = 1.;
            else
                vv0 = 0.;
            if (c1 == 0.)
                vv1 = 1.;
            else
                vv1 = 0.;
        } else
        {
            /* Default orientation is consistent: 
               flip both of the vectors, or none of them. */
            if (c0 == 0.)
                vv0 = 0.;
            else
                vv0 = 1.;
            if (c1 == 0.)
                vv1 = 0.;
            else
                vv1 = 1.;
        }
        m0.setElement(i, 0, vv0);
        m0.setElement(i, 1, vv1);
        if (vv0 == 1.)
            tc0 += 1.;
        if (vv1 == 1.)
            tc1 += 1.;
    }
}
// Flip vectors according to best case.
unsigned int col0 = 0;
if (tc1 < tc0)
    col0 = 1;
for (unsigned int i = 0; i < numVecs0; i++)
{
    Vector* v0 = getVector(i);
    if (m0.getElement(i, col0) == 1.)
        v0->flipIP();
}
if (flipData != 0)
    m0.getCol(col0, *flipData);
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::VectorSet&
		name = other
		desc = Vector set
	}
    impl = <<<
if (vectors.size() != other.vectors.size())
    return false;
for (unsigned int i = 0; i < vectors.size(); i++)
{
    Vector* v0 = vectors[i];
    Vector* v1 = other.vectors[i];
    if ((v0 != 0) && (v1 != 0))
    {
        if (*v0 != *v1)
            return false;
    } else
        return false;
}
>>>
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::VectorSet&
		name = other
		desc = Vector set
	}
	return = {
	    value = !(*this == other);
	    desc = Result of the comparison
	}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
bool e0 = true;
for (VectorVector::const_iterator i = vectors.begin(); 
    i != vectors.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "(" << (*i)->getValueString() << ")";
}
if (vectors.size() == 0)
    status << "<none>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

