# =================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# -----------------------------------------------------------------
# Vector.conf              Class configuration.
# =================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# =================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vector
	shortDesc = Vector
	title = Vector
	longDesc = A numeric vector.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    xml = {
        elementName = v
    }
}

# Member variables.
variable.protected[] = {
	type = double*
	name = elements
	desc = Elements
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 0
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = elements
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
if (elements != 0)
    delete[] elements;
elements = 0;
>>>

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = initElements
	shortDesc = Initialize elements
	longDesc = Initialize the element array.
    impl = <<<
if (elements == 0)
{
    unsigned int tNumElements = getNumElements();
    /* <---- DEBUG ----- //
    std::cerr << "[Vector::initElements] "
        "Allocating " << tNumElements << " elements." << std::endl;
    // ----- DEBUG ----> */
    elements = new double[tNumElements];
    if (elements == 0)
        throw GeoUtilsError(getErrorString(
            "Could not allocate element vector.", "initElements"));
}
>>>
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
unsigned int tNumElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
/* <---- DEBUG ----- //
std::cerr << "[Vector::operator=] "
    "tNumElements = " << tNumElements << ", oNumElements = " 
    << oNumElements << std::endl;
// ----- DEBUG ----> */
initElements();
unsigned int i = 0;
while (i < tNumElements)
{
    if (i < oNumElements)
        elements[i] = other.elements[i];
    else
        elements[i] = 0.;
    i++;
}
>>>
function.xml = {
    attributeData.impl = <<<
std::string a0(Ionflux::ObjectBase::IFObject::getXMLAttributeData());
std::ostringstream d0;
if (a0.size() > 0)
    d0 << a0 << " ";
d0 << "d=\\"";
unsigned int numElements = getNumElements();
bool e0 = true;
for (unsigned int i = 0; i < numElements; i++)
{
    if (!e0)
        d0 << Ionflux::ObjectBase::DEFAULT_COORD_SEPARATOR;
    else
        e0 = false;
    d0 << elements[i];
}
d0 << "\\"";
return d0.str();
>>>
    fromXML.impl = <<<
Ionflux::ObjectBase::XMLUtils::checkElementNameOrError(e0, 
    elementName, "getVector");
Ionflux::ObjectBase::XMLUtils::getObject(e0, target);
// Get element attribute data.
std::string a0;
a0 = Ionflux::ObjectBase::XMLUtils::getAttributeValue(
    e0, "d", true);
Ionflux::ObjectBase::DoubleVector dv0;
Ionflux::ObjectBase::vectorFromList(a0, dv0);
target.setElements(dv0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = zero
	shortDesc = Zero elements
	longDesc = Set elements to zero.
    impl = <<<
if (elements == 0)
    initElements();
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = 0.;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a vector of doubles. If the vector contains fewer than the required number of elements, the remaining elements will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector&
		name = newElements
		desc = Element vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
unsigned int i = 0;
while ((i < numElements) 
    && (i < newElements.size()))
{
    elements[i] = newElements[i];
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements of the vector. This is a convenience function that can be used to set up to 12 elements of the vector at once.
    param[] = {
        type = double
        name = x0
        desc = element (0)
    }
    param[] = {
        type = double
        name = x1
        desc = element (1)
        default = 0.
    }
    param[] = {
        type = double
        name = x2
        desc = element (2)
        default = 0.
    }
    param[] = {
        type = double
        name = x3
        desc = element (3)
        default = 0.
    }
    param[] = {
        type = double
        name = x4
        desc = element (4)
        default = 0.
    }
    param[] = {
        type = double
        name = x5
        desc = element (5)
        default = 0.
    }
    param[] = {
        type = double
        name = x6
        desc = element (6)
        default = 0.
    }
    param[] = {
        type = double
        name = x7
        desc = element (7)
        default = 0.
    }
    param[] = {
        type = double
        name = x8
        desc = element (8)
        default = 0.
    }
    param[] = {
        type = double
        name = x9
        desc = element (9)
        default = 0.
    }
    param[] = {
        type = double
        name = x10
        desc = element (10)
        default = 0.
    }
    param[] = {
        type = double
        name = x11
        desc = element (11)
        default = 0.
    }
    param[] = {
        type = double
        name = x12
        desc = element (12)
        default = 0.
    }
    impl = <<<
unsigned int ne0 = getNumElements();
if (ne0 > 0)
    setElement(0, x0);
else
    return;
if (ne0 > 1)
    setElement(1, x1);
else
    return;
if (ne0 > 2)
    setElement(2, x2);
else
    return;
if (ne0 > 3)
    setElement(3, x3);
else
    return;
if (ne0 > 4)
    setElement(4, x4);
else
    return;
if (ne0 > 5)
    setElement(5, x5);
else
    return;
if (ne0 > 6)
    setElement(6, x6);
else
    return;
if (ne0 > 7)
    setElement(7, x7);
else
    return;
if (ne0 > 8)
    setElement(8, x8);
else
    return;
if (ne0 > 9)
    setElement(9, x9);
else
    return;
if (ne0 > 10)
    setElement(10, x10);
else
    return;
if (ne0 > 11)
    setElement(11, x11);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getElements
    const = true
	shortDesc = Get elements
	longDesc = Store the elements of the vector in a vector of doubles.
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = <<<
target.clear();
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    target.push_back(elements[i]);
>>>
}
function.public[] = {
	spec = virtual
	type = double
	name = getElement
    const = true
	shortDesc = Get element
	longDesc = Get the element at the specified index.
	param[] = {
		type = unsigned int
		name = index
		desc = Index
	}
    impl = 
    return = {
        value = (*this)[index];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setElement
	shortDesc = Set element
	longDesc = Set the element at the specified index.
	param[] = {
		type = unsigned int
		name = index
		desc = Index
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = <<<
unsigned int numElements = getNumElements();
if (index >= numElements)
{
    std::ostringstream status;
    status << "Index out of range: " << index;
    throw GeoUtilsError(getErrorString(status.str(), "setElement"));
}
elements[index] = value;
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = eq
    const = true
	shortDesc = Comparison (with tolerance): equal
	longDesc = Compare the vector with another vector using the specified tolerance.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    if (!Ionflux::GeoUtils::eq(elements[i], other.elements[i], t))
        return false;
>>>
    return = {
        value = true
        desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = dot
	const = true
	shortDesc = Dot product
	longDesc = Calculate the dot product of this vector and another vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
if (numElements != oNumElements)
{
    std::ostringstream status;
    status << "Vector size mismatch (numElements = " << numElements 
        << ", other.numElements = " << oNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "dot"));
}
double result = 0.;
for (unsigned int i = 0; i < numElements; i++)
    result += (elements[i] * other.elements[i]);
>>>
    return = {
        value = result
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = norm
    const = true
	shortDesc = Norm
	longDesc = Calculate the norm of this vector.
    impl = <<<
unsigned int numElements = getNumElements();
double result = 0.;
for (unsigned int i = 0; i < numElements; i++)
    result += (elements[i] * elements[i]);
>>>
    return = {
        value = ::sqrt(result)
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = normalizeIP
	shortDesc = Normalize (in-place)
	longDesc = Normalize the vector (in-place).
    impl = 
    return = {
        value = divideIP(norm())
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = multiplyIP
	shortDesc = Multiply (in-place)
	longDesc = Multiply the vector by a scalar (in-place).
	param[] = {
		type = double
		name = c
		desc = Value
	}
    impl = <<<
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = c * elements[i];
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = divideIP
	shortDesc = Divide (in-place)
	longDesc = Divide the vector by a scalar (in-place).
	param[] = {
		type = double
		name = c
		desc = Value
	}
    impl = <<<
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = elements[i] / c;
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = flipIP
	shortDesc = Flip (in-place)
	longDesc = Flip the vector (in-place).
    impl = <<<
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = -elements[i];
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = multiplyIP
	shortDesc = Multiply (in-place)
	longDesc = Multiply the elements in this vector by the elements from another vector (in-place).
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
if (numElements != oNumElements)
{
    std::ostringstream status;
    status << "Vector size mismatch (numElements = " << numElements 
        << ", other.numElements = " << oNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "multiplyIP"));
}
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = elements[i] * other.elements[i];
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = subtractIP
	shortDesc = Subtract (in-place)
	longDesc = Subtract the elements from another vector from the elements in this vector (in-place).
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
if (numElements != oNumElements)
{
    std::ostringstream status;
    status << "Vector size mismatch (numElements = " << numElements 
        << ", other.numElements = " << oNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "subtractIP"));
}
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = elements[i] - other.elements[i];
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector&
	name = addIP
	shortDesc = Add (in-place)
	longDesc = Add the elements from another vector to the elements in this vector (in-place).
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
unsigned int oNumElements = other.getNumElements();
if (numElements != oNumElements)
{
    std::ostringstream status;
    status << "Vector size mismatch (numElements = " << numElements 
        << ", other.numElements = " << oNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "addIP"));
}
for (unsigned int i = 0; i < numElements; i++)
    elements[i] = elements[i] + other.elements[i];
>>>
    return = {
        value = *this
        desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = <<<
unsigned int numElements = getNumElements();
for (unsigned int i = 0; i < numElements; i++)
{
    if (elements[i] != other.elements[i])
        return false;
}
>>>
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
	return = {
	    value = !(*this == other);
	    desc = Result of the comparison
	}
}
function.public[] = {
	spec = virtual
	type = double
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Subscript operator.
	param[] = {
		type = unsigned int
		name = index
		desc = Index
	}
    impl = <<<
unsigned int numElements = getNumElements();
if ((index < 0) 
    || (index > numElements))
{
    std::ostringstream status;
    status << "Index out of range: " << index;
    throw GeoUtilsError(getErrorString(status.str(), "setElement"));
}
>>>
	return = {
        value = elements[index]
        desc = Element at specified index
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = operator*
	const = true
	shortDesc = Multiply vectors (dot product)
	longDesc = Multiply vectors (dot product).
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = other
		desc = Vector
	}
    impl = 
	return = {
        value = dot(other)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
std::ostringstream status;
unsigned int numElements = getNumElements();
bool e0 = true;
for (unsigned int i = 0; i < numElements; i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << elements[i];
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}

# Pure virtual member functions.

# operations

# Global functions.

