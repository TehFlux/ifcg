# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# FaceData.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/VectorSet.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = FaceData
	shortDesc = Face data
	title = Face data
	longDesc = Data associated with a mesh face.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        other[] = {
			name = Ionflux::GeoUtils::VectorSet
            include = geoutils/VectorSet.hpp
            xml = {
                enabled = true
                #getFunc = getVectorSet
                include = geoutils/VectorSet
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = facedata
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::FaceDataTypeID
    setFromType = Ionflux::GeoUtils::FaceDataTypeID
    name = dataType
    valueType = integer
    xml.attribute.name = datatype
}

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::FaceDataTypeID
    name = TYPE_UNDEFINED
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::FaceDataTypeID
    name = TYPE_TEX_COORD
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::FaceDataTypeID
    name = TYPE_VERTEX_COLOR
    value = 2
}
constant.public[] = {
    type = Ionflux::GeoUtils::FaceDataTypeID
    name = TYPE_VERTEX_NORMAL
    value = 3
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = dataType
        value = TYPE_UNDEFINED
    }
}
constructor.public[] = {
    initializer[] = {
        name = dataType
        value = initDataType
    }
    param[] = {
        type = Ionflux::GeoUtils::VectorVector&
        name = initVectors
        desc = Vectors
    }
    param[] = {
        type = Ionflux::GeoUtils::FaceDataTypeID
        name = initDataType
        desc = Data type
        default = TYPE_UNDEFINED
    }
    impl = addVectors(initVectors);
}
constructor.public[] = {
    initializer[] = {
        name = dataType
        value = initDataType
    }
    param[] = {
        type = Ionflux::GeoUtils::FaceDataTypeID
        name = initDataType
        desc = Data type
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
VectorSet::operator=(other);
dataType = other.dataType;
>>>
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << getTypeIDString(dataType) << "; [" 
    << VectorSet::getValueString() << "]";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = hasType
	shortDesc = Type check
	longDesc = Check the data type of the face data object.
	param[] = {
		type = Ionflux::GeoUtils::FaceDataTypeID
		name = typeID
		desc = Face data type ID
	}
    impl = 
    return = {
        value = dataType == typeID
        desc = \c true if the face data object has the specified data type, \c false otherwise
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = std::string
	name = getTypeIDString
	shortDesc = Get face data type ID string representation
	longDesc = Get a string representation for a face data type ID.
	param[] = {
		type = Ionflux::GeoUtils::FaceDataTypeID
		name = typeID
		desc = Face data type ID
	}
    impl = <<<
if (typeID == TYPE_UNDEFINED)
    return "undefined";
else
if (typeID == TYPE_TEX_COORD)
    return "tex_coord";
else
if (typeID == TYPE_VERTEX_COLOR)
    return "vertex_color";
else
if (typeID == TYPE_VERTEX_NORMAL)
    return "vertex_normal";
>>>
    return = {
        value = "<unknown>"
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

