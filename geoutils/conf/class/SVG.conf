# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SVG.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Vector3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<cmath>'
        '<sstream>'
        '<iomanip>'
        '<librsvg/rsvg.h>'
        '<librsvg/rsvg-cairo.h>'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = SVG
	shortDesc = SVG
	title = Scalable Vector Graphic
	longDesc = A Scalable Vector Graphic that can be rendered using Image or transform nodes.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
            hasClassInfo = true
		}
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = source
    desc = SVG data source
}
property.protected[] = {
    type = Ionflux::GeoUtils::SVGType
    setFromType = Ionflux::GeoUtils::SVGType
    name = type
    desc = Type of the data source
}

# Public static constants.
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = TYPE_UNDEFINED
    desc = SVG type: undefined
    value = 0
}
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = TYPE_FILE
    desc = SVG type: file
    value = 1
}
constant.public[] = {
    type = Ionflux::GeoUtils::SVGType
    name = TYPE_DATA
    desc = SVG type: data
    value = 2
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = type
        value = TYPE_UNDEFINED
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = source
        value = initSource
    }
    initializer[] = {
        name = type
        value = initType
    }
	param[] = {
		type = const std::string&
		name = initSource
		desc = Data source (file name or SVG data)
	}
	param[] = {
		type = Ionflux::GeoUtils::SVGType
		name = initType
		desc = Data type
	}
    impl = 
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range3
	name = getSVGBounds
	shortDesc = Get SVG bounds
	longDesc = Get the bounds of the (untransformed) SVG data.
	impl = Range3 result;\
result.setBounds(Vector3::ZERO);\
if (type == TYPE_UNDEFINED)\
    throw GeoUtilsError("[SVG::getSVGBounds] "\
        "Cannot determine bounds for undefined SVG source!");\
rsvg_init();\
RsvgHandle* rsvg0 = 0;\
if (type == TYPE_DATA)\
    rsvg0 = rsvg_handle_new_from_data(\
        reinterpret_cast<const guint8*>(source.c_str()), \
        source.size(), 0);\
else\
if (type == TYPE_FILE)\
    rsvg0 = rsvg_handle_new_from_file(\
        reinterpret_cast<const gchar*>(source.c_str()), 0);\
else\
\{\
    std::ostringstream status;\
    status << "[SVG::getSVGBounds] Unknown SVG source type (" \
        << type << ")!";\
    throw GeoUtilsError(status.str());\
\}\
if (rsvg0 == 0)\
\{\
    throw GeoUtilsError("[SVG::getSVGBounds] "\
        "Could not create RSVG handle!");\
\}\
RsvgDimensionData dd0;\
rsvg_handle_get_dimensions(rsvg0, &dd0);\
result.extend(Vector3(dd0.width, dd0.height, 0.));\
g_object_unref(rsvg0);
	return = {
	    value = result
	    desc = Bounds of the SVG data
	}
}
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = Recalculate bounds
	longDesc = Recalculate the bounds for the SVG object.
	impl = TransformableObject::recalculateBounds();\
if (!useTransform && !useVI)\
\{\
    *boundsCache = getSVGBounds();\
    return;\
\}\
// Adjust for transformation.\
/* TODO: Set bounds cache to transformed SVG bounds.\
         (This is unfortunately not trivial. For now, we just use \
          a box polygon and apply the transformation. \) */\
Range3 b0 = getSVGBounds();\
Polygon3* p0 = Polygon3::square();\
/* The polygon is created in the XZ-plane by default, but we need it \
   to be in the XY-plane. */\
p0->rotate(0.5 * M_PI, AXIS_X);\
// Transform the polygon to match the bounds of the SVG.\
p0->scale(Vector3(2. * b0.getX().getRadius(), \
    2. * b0.getY().getRadius(), 1.));\
p0->translate(b0.getCenter());\
// Apply the transformations.\
if (useTransform)\
    p0->transform(transformMatrix);\
// NOTE: VI transform is not supported for SVG objects.\
p0->applyTransform();\
*boundsCache = p0->getBounds();\
delete p0;
}

# Public member functions.
function.copy.impl = TransformableObject::operator=(other);\
source = other.source;\
type = other.type;
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the SVG object.
	impl = if (boundsCache == 0)\
    recalculateBounds();
    return = {
        value = boundsCache->getCenter()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::SVG&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName();\
if (type == TYPE_FILE)\
    status << "[" << source << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

