# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Hexagon2.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Hexagon2
	shortDesc = Hexagon (2D)
	title = Hexagon (2D)
	longDesc = A hexagon in two-dimensional space.
	group.name = geoutils
	base = {
		# other base classes
		other[] = {
            include = geoutils/Polygon2.hpp
			name = Ionflux::GeoUtils::Polygon2
		}
	}
    features = {
        'classinfo'
        'copy'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = baseLength
        value = 1.0
    }
    impl = createVertices();\
createEdges();
}
constructor.public[] = {
    initializer[] = {
        name = baseLength
        value = initBaseLength
    }
    param[] = {
        name = initBaseLength
        type = double
        desc = Base length
    }
    impl = createVertices();\
createEdges();
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = double
    setFromType = double
    name = baseLength
    desc = Base length
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = clearVertices();\
clearEdges();\
baseLength = other.baseLength;\
createVertices();\
createEdges();
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << baseLength << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = createVertices
	shortDesc = Create vertices
	longDesc = Create the vertices of the hexagon.
    impl = double c = baseLength / 4.;\
double b = c * ::tan(M_PI / 3.);\
addVertex(new Vertex2(-baseLength / 4., -b));\
addVertex(new Vertex2(baseLength / 4., -b));\
addVertex(new Vertex2(baseLength / 2., 0.));\
addVertex(new Vertex2(baseLength / 4., b));\
addVertex(new Vertex2(-baseLength / 4., b));\
addVertex(new Vertex2(-baseLength / 2., 0.));
}

# Pure virtual member functions.

# operations

# Global functions.

