# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Center.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vector3Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Center
	shortDesc = Transform node: Center
	title = Transform node: Center
	longDesc = Center elements from the input group using the specified centering method and origin vector.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        #'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = origin
	desc = Origin vector
}
property.protected[] = {
	type = Ionflux::GeoUtils::CenteringMethod
	setFromType = Ionflux::GeoUtils::CenteringMethod
	name = method
	desc = Centering method
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_TARGET
    desc = Output ID: target
    value = 0
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = origin
        value = GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = method
        value = Ionflux::GeoUtils::CENTER_BARYCENTER
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = origin
        value = initOrigin
    }
    initializer[] = {
        name = method
        value = initMethod
    }
    param[] = {
        type = Ionflux::GeoUtils::CenteringMethod
        name = initMethod
        desc = Centering method
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOrigin
        desc = Origin vector
        default = GeoUtils::Vector3::ZERO
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
origin = other.origin;\
method = other.method;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; " \
    << origin.getString() << ", " \
    << Ionflux::GeoUtils::centeringMethodToString(method) << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
/* Since we are going to manipulate the individual elements, \
   any existing group transformations must be applied first. */\
g0->applyTransform();\
unsigned int numSourceItems = g0->getNumItems();\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "numSourceItems = " << numSourceItems;\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// <---- DEBUG ----- */\
/* <---- DEBUG ----- //\
std::ostringstream message;\
message << "Group: barycenter = " << g0->getBarycenter() \
    << ", bounds.center = " << g0->getBounds().getCenter() \
    << ", bounds = " << g0->getBounds();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// <---- DEBUG ----- */\
for (unsigned int i = 0; i < numSourceItems; i++)\
\{\
    TransformableObject* o0 = g0->getItem(i);\
    // Center the object.\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Item #" << i << ": " << o0->getString();\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // <---- DEBUG ----- */\
    o0->center(method, &origin);\
\}\
addOutput(g0);
}

# Pure virtual member functions.

# operations

# Global functions.

