# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Sphere3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/Matrix4.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Sphere3
	shortDesc = Sphere (3D)
	title = Sphere (3D)
	longDesc = A sphere in three-dimensional space.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::Object3
            include = geoutils/Object3.hpp
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = p
	desc = Position vector
}
property.protected[] = {
	type = double
	setFromType = double
	name = r
	desc = Radius
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = p
        value = Ionflux::GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = r
        value = 1.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = p
        value = initP
    }
    initializer[] = {
        name = r
        value = initR
    }
    param[] = {
        name = initP
        type = const Ionflux::GeoUtils::Vector3&
        desc = Position vector
    }
    param[] = {
        name = initR
        type = double
        desc = Radius
    }
    impl = 
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = Object3::operator=(other);\
p = other.p;\
r = other.r;
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	const = true
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the sphere.
	impl = 
    return = {
        value = p
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range3
	name = getBounds
	const = true
	shortDesc = Get bounds
	longDesc = Get the bounds for the sphere.
	impl = Vector3 r0(r, r, r);\
Range3 result(p, &r0);
    return = {
        value = result
        desc = Bounds
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkVertex
	const = true
	shortDesc = Check vertex
	longDesc = Check whether the specified vertex lies within the sphere.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex3&
		name = v
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = double d0 = 0.;\
if (!useTransform)\
\{\
    Vector3 v0(v.getVector());\
    d0 = (v0 - p).norm();\
\} else\
\{\
    /* Transform the vertex into the transformed sphere coordinate \
       system. */\
    Vertex3 v1(v);\
    v1.transform(transformMatrix.invert());\
    d0 = (v1.getVector() - p).norm();\
\}
	return = {
        value = ltOrEq(d0, r, t)
	    desc = Result of the check
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Sphere3&
		name = other
		desc = Sphere
	}
    impl = if (!((p == other.p) && (r == other.r)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Sphere3&
		name = other
		desc = Sphere
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
ostringstream status;
status << "p = (" << p.getValueString() << "), " << r;
if (!useTransform && !useVI)
    return status.str();
status << "; ";
if (useTransform)
    status << transformMatrix;
if (useVI)
{
    if (useTransform)
        status << ", ";
    status << viewMatrix << ", " << imageMatrix;
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = Object3::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = Object3::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = Object3::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = Object3::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = Object3::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = Object3::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = Object3::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = Object3::transformVI(view, image);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Sphere3&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}

# static member functions
function.public[] = {
	spec = static
	type = const Ionflux::GeoUtils::Sphere3&
	name = unit
	shortDesc = Get unit sphere
	longDesc = Get a sphere corresponding to the unit sphere.
	impl = <<<
static const Sphere3 s0(Ionflux::GeoUtils::Vector3::ZERO, 1.);
>>>
    return = {
        value = s0
        desc = Line
    }
}

# Pure virtual member functions.

# operations

# Global functions.

