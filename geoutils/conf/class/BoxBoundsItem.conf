# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BoxBoundsItem.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '<set>'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Vertex3.hpp"'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Plane3.hpp"'
        '"geoutils/Sphere3.hpp"'
        '"geoutils/Line3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
forward = {
    'class BoxBoundsItem'
}

# undefine macros

# typedefs
#typedef = {
#    'std::set<Ionflux::GeoUtils::BoxBoundsItem*> BoxBoundsItemSet'
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BoxBoundsItem
	shortDesc = Item with box bounds
	title = Item with box bounds
	longDesc = This class already supplies much of the bounding box functionality, but does not deal with other items that may be contained inside the bounding box.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = center
        value = Ionflux::GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = rVec
        value = Ionflux::GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = itemID
        value = ""
    }
    initializer[] = {
        name = radius
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = center
        value = initCenter
    }
    initializer[] = {
        name = rVec
        value = initRVec
    }
    initializer[] = {
        name = itemID
        value = initItemID
    }
    param[] = {
        name = initCenter
        type = const Ionflux::GeoUtils::Vector3&
        desc = Center vector
    }
    param[] = {
        name = initRVec
        type = const Ionflux::GeoUtils::Vector3&
        desc = Radius vector
        default = Ionflux::GeoUtils::Vector3::ZERO
    }
    param[] = {
        name = initItemID
        type = const std::string&
        desc = Item ID
        default = ""
    }
    impl = updateBounds();
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = center
	desc = Center vector
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = rVec
	desc = Radius vector
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = std::string
	setFromType = const std::string&
	name = itemID
	desc = Item ID
#    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Range3
	setFromType = const Ionflux::GeoUtils::Range3&
	name = bounds
	desc = Bounds
#    copy = true
#    readOnly = true
#    proxy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = radius
	desc = Radius
#    copy = true
#    readOnly = true
#    proxy = true
}
property.protected[] = {
    style = vector
    name = bVerts
    desc = Vertex vector
    hideImpl = true
    element = {
        type = Ionflux::GeoUtils::Vertex3*
        name = BoxVertex
        plural = BoxVertices
        managed = true
    }
}
property.protected[] = {
    style = vector
    name = bFaces
    desc = Face vector
    hideImpl = true
    element = {
        type = Ionflux::GeoUtils::Polygon3*
        name = BoxFace
#        plural = 
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = clear();\
center = other.center;\
rVec = other.rVec;

function.public[] = {
	spec = virtual
	type = void
	name = updateBounds
	shortDesc = Update bounds
	longDesc = After changes to the radius vector and center, this method should be called to update the bounds of the object. This will also update the scalar radius value.
    impl = bounds = Range3(center);\
bounds.extend(center + rVec);\
bounds.extend(center - rVec);\
radius = rVec.norm();\
clearBoxVertices();\
clearBoxFaces();
}
function.public[] = {
	spec = virtual
	type = void
	name = updateRadiusAndCenter
	shortDesc = Update radius and center
	longDesc = After changes to the bounds of the object, this method should be called to update the radius and center of the object.
    impl = center = bounds.getCenter();\
rVec = bounds.getRadius();\
radius = rVec.norm();\
clearBoxVertices();\
clearBoxFaces();
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear item
	longDesc = Clears the bounds data of the item.
    impl = center = Vector3::ZERO;\
rVec = Vector3::ZERO;\
clearBoxVertices();\
clearBoxFaces();\
updateBounds();
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3Vector
	name = getBoxVertices
	shortDesc = Get vertices
	longDesc = Get the vertices of the bounding box in the global coordinate system. Returns a list of vertices.
    impl = if (bVerts.size() > 0)\
    return bVerts;\
Vertex3Vector tVerts;\
// Top vertices.\
tVerts.push_back(new Vertex3(rVec[0], rVec[1], rVec[2]));\
tVerts.push_back(new Vertex3(-rVec[0], rVec[1], rVec[2]));\
tVerts.push_back(new Vertex3(-rVec[0], -rVec[1], rVec[2]));\
tVerts.push_back(new Vertex3(rVec[0], -rVec[1], rVec[2]));\
// Bottom vertices.\
tVerts.push_back(new Vertex3(rVec[0], rVec[1], -rVec[2]));\
tVerts.push_back(new Vertex3(-rVec[0], rVec[1], -rVec[2]));\
tVerts.push_back(new Vertex3(-rVec[0], -rVec[1], -rVec[2]));\
tVerts.push_back(new Vertex3(rVec[0], -rVec[1], -rVec[2]));\
clearBoxVertices();\
for (Vertex3Vector::iterator i = tVerts.begin(); i < tVerts.end(); i++)\
\{\
    addBoxVertex(new Vertex3(center + (*i)->getVector()));\
    delete *i;\
\}
    return = {
        desc = Bounding box vertices.
        value = bVerts
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Polygon3Vector
	name = getBoxFaces
	shortDesc = Get faces
	longDesc = Get the faces of the bounding box in the global coordinate system. Returns a list of polygons.
    impl = if (bFaces.size() > 0)\
    return bFaces;\
if (bVerts.size() < 8)\
    getBoxVertices();\
Polygon3Vector tFaces;\
tFaces.push_back(new Polygon3(bVerts[0], bVerts[1], bVerts[2], bVerts[3]));\
tFaces.push_back(new Polygon3(bVerts[4], bVerts[7], bVerts[6], bVerts[5]));\
tFaces.push_back(new Polygon3(bVerts[0], bVerts[3], bVerts[7], bVerts[4]));\
tFaces.push_back(new Polygon3(bVerts[1], bVerts[5], bVerts[6], bVerts[2]));\
tFaces.push_back(new Polygon3(bVerts[2], bVerts[6], bVerts[7], bVerts[3]));\
tFaces.push_back(new Polygon3(bVerts[0], bVerts[4], bVerts[5], bVerts[1]));\
clearBoxFaces();\
for (Polygon3Vector::iterator i = tFaces.begin(); i < tFaces.end(); i++)\
    addBoxFace(*i);
    return = {
        desc = Bounding box faces.
        value = bFaces
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkPlane
	shortDesc = Check position relative to plane
	longDesc = Check the bounding box position relative to a plane. Returns 1 if the bounding box is above the plane (in direction of the normal of the plane), 0 if the box intersects the plane, and -1 if the bounding box is below the plane.
    param[] = {
        type = const Ionflux::GeoUtils::Plane3&
        name = plane
        desc = Plane
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = double d = plane.getNormal() * (center - plane.getP());\
if (gt(d, radius, t))\
    return 1;\
if (lt(d, -radius, t))\
    return -1;\
/* The bounding box may intersect the plane, we have to check \
   individual vertices. If all of them are above or below the plane, \
   so is the bounding box. Otherwise, there is an intersection. */\
// Reference value.\
int c = 0;\
// Current vertex result.\
int s = 0;\
getBoxVertices();\
for (Vertex3Vector::const_iterator i = bVerts.begin(); \
    i != bVerts.end(); i++) \
\{\
    d = plane.getNormal() * ((*i)->getVector() - plane.getP());\
    if (eq(d, 0., t))\
        // Vertex lies on plane.\
        return 0;\
    else \
    if (gt(d, 0., t))\
        // Vertex is above the plane.\
        s = 1;\
    else \
    if (lt(d, 0., t))\
        // Vertex is below the plane.\
        s = -1;\
    if (c == 0)\
        // First vertex initializes the reference.\
        c = s;\
    else \
    if (c != s)\
        // Some are above, some below.\
        return 0;\
\}
    return = {
        desc = Result of the test
        value = c
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkPlaneInner
	shortDesc = Check position relative to plane
	longDesc = Check the object position relative to a plane. Unlike checkPlane(), this function considers the inner structure of the object, not just its bounding box. This should be used by derived classes to provide more accurate information about plane intersection. Returns 1 if the object is above the plane (in direction of the normal of the plane), 0 if the object intersects the plane, and -1 if the object is below the plane.
    param[] = {
        type = const Ionflux::GeoUtils::Plane3&
        name = plane
        desc = Plane
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the test
        value = checkPlane(plane, t)
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkSphere
	shortDesc = Check position relative to sphere
	longDesc = Check the bounding box position relative to a sphere. Returns 1 if the bounding box is inside the sphere, 0 if the box intersects the sphere, and -1 if the bounding box is outside the sphere.
    param[] = {
        type = const Ionflux::GeoUtils::Sphere3&
        name = sphere
        desc = Sphere
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = double d = (center - sphere.getP()).norm();\
if (gt(d, radius + sphere.getR(), t))\
    return -1;\
if (lt(d + radius, sphere.getR(), t))\
    return 1;
    return = {
        desc = Result of the test
        value = 0
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkSphereInner
	shortDesc = Check position relative to sphere
	longDesc = Check the object position relative to a sphere. Unlike checkSphere(), this function considers the inner structure of the object, not just its bounding box. This should be used by derived classes to provide more accurate information about sphere intersection. Returns 1 if the object is inside the sphere, 0 if the object intersects the sphere, and -1 if the object is outside the sphere.
    param[] = {
        type = const Ionflux::GeoUtils::Sphere3&
        name = sphere
        desc = Sphere
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the test
        value = checkSphere(sphere, t)
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkLine
#    const = true
	shortDesc = Check line intersection
	longDesc = Check whether the specified line intersects the bounding box. Returns \c true if the line intersects the bounding box, \c false otherwise.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = line
        desc = Line
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = Polygon3Vector faces = getBoxFaces();\
for (Polygon3Vector::iterator i = faces.begin(); i != faces.end(); i++)\
\{\
    Polygon3* p0 = *i;\
    if (line.intersectionInPoly(*p0, t))\
    \{\
        /* <---- DEBUG ----- //\
        std::cerr << "[BoxBoundsItem::checkLine] "\
        << "intersection: " << p0->getString() << std::endl;\
        // ----- DEBUG ----> */\
        return true;\
    \}\
\}\
clearBoxVertices();\
clearBoxFaces();
    return = {
        desc = Result of the test
        value = false
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkLineInner
#    const = true
	shortDesc = Check line intersection
	longDesc = Check whether the specified line intersects the object. Unlike checkLine(), this function considers the inner structure of the object, not just its bounding box. This should be used by derived classes to provide more accurate information about line intersection. Returns \c true if the line intersects the object, \c false otherwise.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = line
        desc = Line
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the test
        value = checkLine(line, t)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::RangeCompResult3
	name = compare3
    const = true
	shortDesc = Compare ranges (per axis)
	longDesc = Compares the ranges on each axis separately. See Range3::compare() for details on the return values.
    param[] = {
        type = const Ionflux::GeoUtils::BoxBoundsItem&
        name = other
        desc = Box bounds item
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the comparison
        value = bounds.compare3(other.bounds, t)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::RangeCompResult
	name = compare
    const = true
	shortDesc = Compare bounding boxes.
	longDesc = Returns RANGE_EQUAL if the ranges are equal within the tolerance, i.e. they have the same rMin and rMax values in each dimension. Returns RANGE_OTHER_CONTAINS if the range on which the method is called is contained within the other range, and RANGE_FIRST_CONTAINS if the other range is contained within the range on which the method is called. Returns RANGE_OVERLAP if the ranges overlap in some dimension. Returns RANGE_DISJOINT if the ranges are disjoint.
    param[] = {
        type = const Ionflux::GeoUtils::BoxBoundsItem&
        name = other
        desc = Box bounds item
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the comparison
        value = bounds.compare(other.getBounds(), t)
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkBox
	shortDesc = Check box intersection.
	longDesc = Check whether the specified box intersects the bounding box. Returns 1 if the bounding box is inside the other box, 0 if the bounding box intersects the other box, and -1 if the bounding box is outside the other box.
    param[] = {
        type = const Ionflux::GeoUtils::BoxBoundsItem&
        name = other
        desc = Box bounds item
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = RangeCompResult r = compare(other, t);\
if (r == RANGE_DISJOINT)\
    return -1;\
if (r == RANGE_OTHER_CONTAINS)\
    return 1;
    return = {
        desc = Result of the comparison
        value = 0
    }
}
function.public[] = {
	spec = virtual
	type = int
	name = checkBoxInner
	shortDesc = Check box intersection.
	longDesc = Check whether the specified box intersects the object. Unlike checkBox(), this function considers the inner structure of the object, not just its bounding box. Returns 1 if the object is inside the other box, 0 if the object intersects the other box, and -1 if the object is outside the other box.
    param[] = {
        type = const Ionflux::GeoUtils::BoxBoundsItem&
        name = other
        desc = Box bounds item
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the comparison
        value = checkBox(other, t)
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkRay
#    const = true
	shortDesc = Check ray intersection
	longDesc = Check whether the specified ray intersects the bounding box. Returns \c true if the ray intersects the bounding box, \c false otherwise. The ray is specified as a line, where the ray is supposed to start at point \c P and have direction \c U.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = ray
        desc = Ray
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = /* Do a plane check first to see if the item is in the \
   same half space as the ray. */\
// TODO: Use a ray class to avoid creating a new plane for each check.\
Plane3 p = Plane3::createFromNormal(ray.getU(), Vector3::E_X, \
    ray.getP());\
if (checkPlane(p, t) == -1)\
    return false;
    return = {
        desc = Result of the test
        value = checkLine(ray, t)
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkRayInner
#    const = true
	shortDesc = Check ray intersection
	longDesc = Check whether the specified ray intersects the object. Unlike checkRay(), this function considers the inner structure of the object, not just its bounding box. This should be used by derived classes to provide more accurate information about line intersection. Returns \c true if the ray intersects the object, \c false otherwise. The ray is specified as a line, where the ray is supposed to start at point \c P and have direction \c U.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = ray
        desc = Ray
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = Result of the test
        value = checkRay(ray, t)
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::BoxBoundsItem&
		name = other
		desc = Box bounds item
	}
    impl = if (!((center == other.center) && (rVec == other.rVec)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::BoxBoundsItem&
		name = other
		desc = Box bounds item
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getXML
	const = true
	shortDesc = Get XML representation
	longDesc = Get an XML representation of the object.
	impl = ostringstream d0;\
if (itemID.size() == 0)\
    throw GeoUtilsError("Item ID not set.");\
d0 << "<bbitem id=\"" << itemID << "\" center=\"" << center[0] << "," \
    << center[1] << "," << center[2] << "\" rvec=\"" << rVec[0] << "," \
    << rVec[1] << "," << rVec[2] << "\" />";
    return = {
        value = d0.str()
        desc = XML representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << center.getString() \
    << ", " << rVec.getString() << ", '" << itemID << "']";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

