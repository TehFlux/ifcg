# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vector2.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vector2
	shortDesc = Vector (2 elements)
	title = Vector (2 elements)
	longDesc = A vector in two-dimensional space.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
		# other base classes
        other[] = {
			name = Ionflux::GeoUtils::Vector
            include = geoutils/Vector.hpp
            xml = {
                enabled = true
                getFunc = getVector
                include = geoutils/Vector
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml.elementName = v2
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = x0
	desc = Element x0
    copy = true
    proxy = true
    impl = {
        set = elements[0] = newX0;
        get = return elements[0];
    }
}
property.protected[] = {
	type = double
	setFromType = double
	name = x1
	desc = Element x1
    copy = true
    proxy = true
    impl = {
        set = elements[1] = newX1;
        get = return elements[1];
    }
}

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ELEMENTS
	desc = Number of elements
	value = 2
}
constant.public[] = {
    desc = Zero vector
    type = Ionflux::GeoUtils::Vector2
    name = ZERO
    value = Ionflux::GeoUtils::Vector2(0., 0.)
}
constant.public[] = {
    desc = Unit vector (X)
    type = Ionflux::GeoUtils::Vector2
    name = E_X
    value = Ionflux::GeoUtils::Vector2(1., 0.)
}
constant.public[] = {
    desc = Unit vector (Y)
    type = Ionflux::GeoUtils::Vector2
    name = E_Y
    value = Ionflux::GeoUtils::Vector2(0., 1.)
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = zero();
}
constructor.public[] = {
    param[] = {
        name = initX0
        type = double
        desc = Element (X0)
    }
    param[] = {
        name = initX1
        type = double
        desc = Element (X1)
    }
    impl = <<<
initElements();
elements[0] = initX0;
elements[1] = initX1;
>>>
}
constructor.public[] = {
    param[] = {
        name = initElements0
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Element vector
    }
    impl = <<<
initElements();
Vector::setElements(initElements0);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements of the vector.
	param[] = {
		type = double
		name = newX0
		desc = Element (x0)
	}
	param[] = {
		type = double
		name = newX1
		desc = Element (x1)
	}
    impl = <<<
elements[0] = newX0;
elements[1] = newX1;
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = flip
	const = true
	shortDesc = Flip vector
	longDesc = Create a new vector which is equal to the original vector multiplied by -1.
    impl = Vector2 result(*this);\
result.flipIP();
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = normalize
	const = true
	shortDesc = Normalize vector
	longDesc = Create a new vector which is equal to the normalized original vector.
    impl = Vector2 result(*this);\
result.normalizeIP();
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = project
	const = true
	shortDesc = Projection
	longDesc = Calculate the projection of another vector on the vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = const Vector2& v0 = *this;
	return = {
        value = ((v0 * other) * v0) / (v0 * v0)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = ortho
	const = true
	shortDesc = Orthogonalize vector
	longDesc = Rotate the other vector (v1) within the plane defined by the original vector (v0) and v1, so it is orthogonal to v0.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = const Vector2& v0 = *this;
	return = {
        value = other.norm() * (other - v0.project(other)).normalize()
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = swap
	const = true
	shortDesc = Swap elements
	longDesc = Swap the elements of the vector.
    impl = 
	return = {
        value = Vector2(elements[1], elements[0])
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = multElements
	const = true
	shortDesc = Element-wise multiplication
	longDesc = Multiply the vectors element-wise.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = Vector2 result(*this);\
result.multiplyIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = operator+
	const = true
	shortDesc = Add vectors
	longDesc = Add vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = Vector2 result(*this);\
result.addIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = operator-
	const = true
	shortDesc = Subtract vectors
	longDesc = Subtract vectors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = Vector2 result(*this);\
result.subtractIP(other);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = operator*
	const = true
	shortDesc = Multiply vector by scalar
	longDesc = Multiply vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Vector2 result(*this);\
result.multiplyIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = operator*
	const = true
	shortDesc = Multiply vectors (dot product)
	longDesc = Multiply vectors (dot product).
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = other
		desc = Vector
	}
    impl = 
	return = {
        value = dot(other)
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector2
	name = operator/
	const = true
	shortDesc = Divide vector by scalar
	longDesc = Divide vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
    impl = Vector2 result(*this);\
result.divideIP(c);
	return = {
        value = result
	    desc = Result of the calculation
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}

# static member functions
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Vector2
	name = axis
	shortDesc = Get axis direction vector
	longDesc = Get the direction vector for the specified axis.
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axisID
		desc = Axis
	}
    impl = <<<
if (axisID == AXIS_X)
    return E_X;
else
if (axisID == AXIS_Y)
    return E_Y;
else
{
    std::ostringstream status;
    status << "[Vector2::axis] "
        "Invalid axis: " << axisID;
    throw GeoUtilsError(status.str());
}
>>>
	return = {
        value = ZERO
	    desc = Axis direction vector
    }
}

# Pure virtual member functions.

# operations

# Global functions.
function.global[] = {
	type = Ionflux::GeoUtils::Vector2
	name = operator*
	shortDesc = Multiply vector by scalar
	longDesc = Multiply vector by a scalar.
	param[] = {
		type = double
		name = c
		desc = Scalar factor
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector2&
		name = v
		desc = Vector
	}
    impl = 
	return = {
        value = v * c
	    desc = Result of the calculation
    }
}

