# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2012 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Voxel.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	    '"geoutils/Vertex3Set.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

# forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Voxel
	shortDesc = Voxel
	title = Voxel
	longDesc = A voxel.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::BoxBoundsItem
            include = geoutils/BoxBoundsItem.hpp
		}
	}
    features = {
        'logmessage'
        'classinfo'
        'copy'
        'upcast'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Protected variables.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = index
	desc = index
}
property.protected[] = {
	type = double
	setFromType = double
	name = edgeLength
	desc = edge length
}
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = offset
	desc = offset
}

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = Ionflux::GeoUtils::BoxBoundsItem
        value = Ionflux::GeoUtils::Vector3::ZERO, Ionflux::GeoUtils::Vector3::ZERO, ""
    }
    initializer[] = {
        name = index
        value = Ionflux::GeoUtils::Vector3::ZERO
    }
    initializer[] = {
        name = edgeLength
        value = 1.
    }
    initializer[] = {
        name = offset
        value = Ionflux::GeoUtils::Vector3::ZERO
    }
    impl = initBounds();
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::GeoUtils::BoxBoundsItem
        value = Ionflux::GeoUtils::Vector3::ZERO, Ionflux::GeoUtils::Vector3::ZERO, ""
    }
    initializer[] = {
        name = index
        value = initIndex
    }
    initializer[] = {
        name = edgeLength
        value = initEdgeLength
    }
    initializer[] = {
        name = offset
        value = initOffset
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initIndex
        desc = index
    }
    param[] = {
        type = double
        name = initEdgeLength
        desc = edge length
        default = 1.
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffset
        desc = offset
        default = Ionflux::GeoUtils::Vector3::ZERO
    }
    impl = initBounds();
}

# Destructor.
destructor.impl = clear();

# Protected member functions.

# Public member functions.
function.copy.impl = clear();
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear item
	longDesc = Clears the bounds data of the item.
    impl = BoxBoundsItem::clear();\
index = Ionflux::GeoUtils::Vector3::ZERO;\
edgeLength = 1.;\
offset = Ionflux::GeoUtils::Vector3::ZERO;\
initBounds();
}
function.public[] = {
	spec = virtual
	type = void
	name = initBounds
	shortDesc = Initialize bounds
	longDesc = Initialize the bounds of the voxel from the index, edge length and offset properties.
    impl = Vector3 stepSize(edgeLength, edgeLength, edgeLength);\
center = stepSize.multElements(index) + offset;\
rVec.setElements(0.5 * edgeLength, 0.5 * edgeLength, 0.5 * edgeLength);\
BoxBoundsItem::updateBounds();
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream result;\
result << getClassName() << "[" << index.getString() << ", " \
    << edgeLength << ", " << offset.getString() << "]";
    return = {
        value = result.str()
        desc = String representation
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Voxel*
	name = create
	shortDesc = Create voxel
	longDesc = Create a voxel.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initIndex
        desc = index
    }
    param[] = {
        type = double
        name = initEdgeLength
        desc = edge length
        default = 1.
    }
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = initOffset
        desc = offset
        default = Ionflux::GeoUtils::Vector3::ZERO
    }
    impl = Voxel* v0 = new Voxel(initIndex, initEdgeLength, initOffset);\
if (v0 == 0)\
    throw GeoUtilsError("Could not allocate voxel.");
    return = {
        value = v0
        desc = New voxel
    }
}
function.public[] = {
	spec = static
	type = void
	name = toVertexSet
	shortDesc = Convert voxels to vertices
	longDesc = Convert voxels in the box bounds item set to vertices. The center of the voxel is taken as the vertex position..
    param[] = {
        type = Ionflux::GeoUtils::BoxBoundsItemSet&
        name = source
        desc = set of voxels
    }
    param[] = {
        type = Ionflux::GeoUtils::Vertex3Set&
        name = target
        desc = vertex set
    }
    impl = for (BoxBoundsItemSet::iterator i = source.begin(); \
    i != source.end(); i++)\
\{\
    Voxel* v0 = Voxel::upcast(*i);\
    if (v0 != 0)\
    \{\
        Vertex3* v1 = target.addVertex();\
        v1->setCoords(v0->getCenter());\
    \}\
\}
}

# Pure virtual member functions.

# operations

# Global functions.

