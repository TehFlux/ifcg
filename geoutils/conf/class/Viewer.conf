# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# Viewer.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/gltypes.hpp"'
        '"geoutils/glconstants.hpp"'
        '"altjira/Color.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/glutils.hpp"'
        '"geoutils/ViewerEvent.hpp"'
        '"geoutils/ViewerEventSet.hpp"'
    }
}

# forward declarations
forward = {
    'class ViewerEventSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Viewer
	shortDesc = Viewer
	title = Viewer
	longDesc = A viewer, used to visualize graphics in a window.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.
variable.protected[] = {
    spec = static
    type = Ionflux::GeoUtils::Viewer*
    name = instance
    desc = Global viewer instance
    value = 0
}

# Public static constants.
constant.public[] = {
    type = int
    name = DEFAULT_WINDOW_POS_X
    desc = Default window position (X)
    value = 0
}
constant.public[] = {
    type = int
    name = DEFAULT_WINDOW_POS_Y
    desc = Default window position (Y)
    value = 0
}
constant.public[] = {
    type = int
    name = DEFAULT_WINDOW_WIDTH
    desc = Default window width
    value = 1000
}
constant.public[] = {
    type = int
    name = DEFAULT_WINDOW_HEIGHT
    desc = Default window height
    value = 563
}
constant.public[] = {
    type = std::string
    name = DEFAULT_WINDOW_TITLE
    desc = Default window title
    value = "Viewer"
}
constant.public[] = {
    type = int
    name = DEFAULT_OPENGL_VERSION_MAJOR
    desc = Default OpenGL version (major)
    value = 3
}
constant.public[] = {
    type = int
    name = DEFAULT_OPENGL_VERSION_MINOR
    desc = Default OpenGL version (minor)
    value = 3
}
constant.public[] = {
    type = Ionflux::GeoUtils::OpenGLProfileID
    name = DEFAULT_OPENGL_PROFILE
    desc = Default OpenGL profile
    value = OPENGL_PROFILE_CORE
}
constant.public[] = {
    type = Ionflux::Altjira::Color
    name = DEFAULT_CLEAR_COLOR
    desc = Default clear color
    value = Ionflux::Altjira::Color::GRAY_60
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = GLFWwindow*
    setFromType = GLFWwindow*
    name = windowImpl
    desc = Window implementation (GLFW)
    bindings.disable = true
}
property.protected[] = {
    type = int
    setFromType = int
    name = windowPosX
    desc = Window position (X)
    impl.set = <<<
if (windowImpl != 0)
    glfwSetWindowPos(windowImpl, newWindowPosX, windowPosY);
windowPosX = newWindowPosX;
>>>
}
property.protected[] = {
    type = int
    setFromType = int
    name = windowPosY
    desc = Window position (Y)
    impl.set = <<<
if (windowImpl != 0)
    glfwSetWindowPos(windowImpl, windowPosX, newWindowPosY);
windowPosY = newWindowPosY;
>>>
}
property.protected[] = {
    type = int
    setFromType = int
    name = windowWidth
    desc = Window width
    impl.set = <<<
if (windowImpl != 0)
    glfwSetWindowSize(windowImpl, newWindowWidth, windowHeight);
windowWidth = newWindowWidth;
>>>
}
property.protected[] = {
    type = int
    setFromType = int
    name = windowHeight
    desc = Window height
    impl.set = <<<
if (windowImpl != 0)
    glfwSetWindowSize(windowImpl, windowWidth, newWindowHeight);
windowHeight = newWindowHeight;
}
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = windowTitle
    desc = Window title
    impl.set = <<<
if (windowImpl != 0)
    glfwSetWindowTitle(windowImpl, newWindowTitle.c_str());
windowTitle = newWindowTitle;
}
property.protected[] = {
    type = Ionflux::Altjira::Color
    setFromType = const Ionflux::Altjira::Color&
    name = clearColor
    desc = Clear color
}
property.protected[] = {
    type = int
    setFromType = int
    name = openGLVersionMajor
    desc = OpenGL version (major)
}
property.protected[] = {
    type = int
    setFromType = int
    name = openGLVersionMinor
    desc = OpenGL version (minor)
}
property.protected[] = {
    type = Ionflux::GeoUtils::OpenGLProfileID
    setFromType = Ionflux::GeoUtils::OpenGLProfileID
    name = openGLProfile
    desc = OpenGL profile
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = shutdownFlag
    desc = Shutdown flag
}
property.protected[] = {
    type = Ionflux::GeoUtils::ViewerEventSet*
    setFromType = Ionflux::GeoUtils::ViewerEventSet*
    name = events
    desc = Events
    managed = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = windowImpl
        value = 0
    }
    initializer[] = {
        name = windowPosX
        value = DEFAULT_WINDOW_POS_X
    }
    initializer[] = {
        name = windowPosY
        value = DEFAULT_WINDOW_POS_Y
    }
    initializer[] = {
        name = windowWidth
        value = DEFAULT_WINDOW_WIDTH
    }
    initializer[] = {
        name = windowHeight
        value = DEFAULT_WINDOW_HEIGHT
    }
    initializer[] = {
        name = windowTitle
        value = DEFAULT_WINDOW_TITLE
    }
    initializer[] = {
        name = clearColor
        value = DEFAULT_CLEAR_COLOR
    }
    initializer[] = {
        name = openGLVersionMajor
        value = DEFAULT_OPENGL_VERSION_MAJOR
    }
    initializer[] = {
        name = openGLVersionMinor
        value = DEFAULT_OPENGL_VERSION_MINOR
    }
    initializer[] = {
        name = openGLProfile
        value = DEFAULT_OPENGL_PROFILE
    }
    initializer[] = {
        name = shutdownFlag
        value = false
    }
    initializer[] = {
        name = events
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = windowImpl
        value = 0
    }
    initializer[] = {
        name = windowPosX
        value = initWindowPosX
    }
    initializer[] = {
        name = windowPosY
        value = initWindowPosY
    }
    initializer[] = {
        name = windowWidth
        value = initWindowWidth
    }
    initializer[] = {
        name = windowHeight
        value = initWindowHeight
    }
    initializer[] = {
        name = windowTitle
        value = initWindowTitle
    }
    initializer[] = {
        name = clearColor
        value = initClearColor
    }
    initializer[] = {
        name = openGLVersionMajor
        value = initOpenGLVersionMajor
    }
    initializer[] = {
        name = openGLVersionMinor
        value = initOpenGLVersionMinor
    }
    initializer[] = {
        name = openGLProfile
        value = initOpenGLProfile
    }
    initializer[] = {
        name = shutdownFlag
        value = false
    }
    initializer[] = {
        name = events
        value = 0
    }
    param[] = {
        type = int
        name = initWindowPosX
        desc = Window position (X)
    }
    param[] = {
        type = int
        name = initWindowPosY
        desc = Window position (Y)
    }
    param[] = {
        type = int
        name = initWindowWidth
        desc = Window width
    }
    param[] = {
        type = int
        name = initWindowHeight
        desc = Window height
    }
    param[] = {
        type = const std::string&
        name = initWindowTitle
        desc = Window title
        default = DEFAULT_WINDOW_TITLE
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initClearColor
        desc = Clear color
        default = DEFAULT_CLEAR_COLOR
    }
    param[] = {
        type = int
        name = initOpenGLVersionMajor
        desc = OpenGL version (major)
        default = DEFAULT_OPENGL_VERSION_MAJOR
    }
    param[] = {
        type = int
        name = initOpenGLVersionMinor
        desc = OpenGL version (minor)
        default = DEFAULT_OPENGL_VERSION_MINOR
    }
    param[] = {
        type = Ionflux::GeoUtils::OpenGLProfileID
        name = initOpenGLProfile
        desc = OpenGL profile
        default = DEFAULT_OPENGL_PROFILE
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
cleanup();
>>>

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the viewer.
	impl = <<<
// set up error handling
glfwSetErrorCallback(Viewer::errorHandlerGLFW);
if (!glfwInit())
{
    throw GeoUtilsError(getErrorString(
        "GLFW initialization failed.", "init"));
}
// configure window and context
glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
glfwWindowHint(GLFW_OPENGL_PROFILE, 
    getOpenGLProfileGLFW(openGLProfile));
// create the window
windowImpl = glfwCreateWindow(windowWidth, windowHeight, 
    windowTitle.c_str(), 0, 0);
if (windowImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "Could not create GLFW window.", "init"));
}
glfwSetWindowUserPointer(windowImpl, this);
glfwMakeContextCurrent(windowImpl);
// get OpenGL profile info
openGLVersionMajor = glfwGetWindowAttrib(windowImpl, 
    GLFW_CONTEXT_VERSION_MAJOR);
openGLVersionMinor = glfwGetWindowAttrib(windowImpl, 
    GLFW_CONTEXT_VERSION_MINOR);
openGLProfile = getOpenGLProfileFromGLFW(
    glfwGetWindowAttrib(windowImpl, GLFW_OPENGL_PROFILE));
// register callbacks
glfwSetKeyCallback(windowImpl, Viewer::keyHandlerGLFW);
glfwSetWindowSizeCallback(windowImpl, 
    Viewer::windowSizeHandlerGLFW);
glfwSetWindowPosCallback(windowImpl, 
    Viewer::windowPosHandlerGLFW);
glfwSetWindowCloseCallback(windowImpl, 
    Viewer::windowCloseHandlerGLFW);
gladLoadGLLoader(reinterpret_cast<GLADloadproc>(
    glfwGetProcAddress));
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up state maintained by the viewer.
	impl = <<<
if (windowImpl != 0)
{
    glfwSetWindowUserPointer(windowImpl, 0);
    glfwSetWindowShouldClose(windowImpl, GL_TRUE);
    glfwDestroyWindow(windowImpl);
}
windowImpl = 0;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = shutdown
	shortDesc = Shutdown
	longDesc = Perform a clean shutdown of the viewer. The exact behavior of this function depends on the value of the \c shutdownFlag property and the \c shutdownNow parameter. If \c shutdownNow is \c false and \c shutdownFlag is \c true, the viewer will be shut down immediately. Otherwise, \c shutdownFlag is set to \c true. If \c shutdownNow is \c true, the viewer will be shut down immediately, regardless of the current value of \c shutdownFlag.
	param[] = {
	    type = bool
	    name = shutdownNow
	    desc = Shutdown now flag
	    default = true
	}
	impl = <<<
if (shutdownFlag || shutdownNow)
{
    cleanup();
    glfwTerminate();
} else
    shutdownFlag = true;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear framebuffer
	longDesc = Clear the framebuffer.
	impl = <<<
glClearColor(clearColor.getRed(), clearColor.getGreen(), 
    clearColor.getBlue(), clearColor.getAlpha());
glClear(GL_COLOR_BUFFER_BIT);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = closeWindow
	shortDesc = Close viewer window
	longDesc = Request closing the viewer window. If \c closeFlag is set to \c false and closing the window was requested, the closing of the window will be cancelled.
	param[] = {
	    type = bool
	    name = closeFlag
	    desc = close flag
	    default = true
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(windowImpl, this, 
    "closeWindow", "Window");
glfwSetWindowShouldClose(windowImpl, closeFlag);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = initViewport
	shortDesc = Initialize viewport
	longDesc = Set the OpenGL viewport so it reflects the size of the window framebuffer.
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(windowImpl, this, 
    "initViewport", "Window");
int fw = 0;
int fh = 0;
glfwGetFramebufferSize(windowImpl, &fw, &fh);
glViewport(0, 0, fw, fh);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = swapBuffers
	shortDesc = Swap buffers
	longDesc = Swap buffers.
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(windowImpl, this, 
    "swapBuffers", "Window");
glfwSwapBuffers(windowImpl);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setDepthRange
	shortDesc = Set depth range
	longDesc = Set the depth range for rendering.
	param[] = {
	    type = double
	    name = minDepth
	    desc = minimum depth
	}
	param[] = {
	    type = double
	    name = maxDepth
	    desc = maximum depth
	}
	impl = <<<
glDepthRange(minDepth, maxDepth);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = pollEvents
	shortDesc = Poll events
	longDesc = Poll events. Any events that have occured are added to the event set of the viewer. Any previous events still in the event set when pollEvents() is called are cleared.
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(windowImpl, this, 
    "pollEvents", "Window");
if (events == 0)
    setEvents(ViewerEventSet::create());
events->clearEvents();
glfwPollEvents();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = onKey
	shortDesc = Key handler
	longDesc = Handler for key events.
    param[] = {
        type = int
        name = key
        desc = Key code
    }
    param[] = {
        type = int
        name = scancode
        desc = Scancode
    }
    param[] = {
        type = int
        name = action
        desc = Action
    }
    param[] = {
        type = int
        name = mods
        desc = Modifier keys
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(windowImpl, this, 
    "onKey", "Window");
Ionflux::ObjectBase::nullPointerCheck(events, this, 
    "onKey", "Event set");
ViewerEvent* e0 = ViewerEvent::create(this, 
    ViewerEvent::TYPE_KEY, key, scancode, action, mods);
events->addEvent(e0);
/* <---- DEBUG ----- //
if ((key == GLFW_KEY_ESCAPE)
    && (action == GLFW_PRESS))
{
    closeWindow();
    shutdown(false);
}
// ----- DEBUG ----> */
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = onWindowSize
	shortDesc = Window size handler
	longDesc = Handler for window size events.
    param[] = {
        type = int
        name = width
        desc = Width
    }
    param[] = {
        type = int
        name = height
        desc = Height
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(events, this, 
    "onWindowSize", "Event set");
ViewerEvent* e0 = ViewerEvent::create(this, 
    ViewerEvent::TYPE_WINDOW_SIZE);
events->addEvent(e0);
windowWidth = width;
windowHeight = height;
initViewport();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = onWindowPos
	shortDesc = Window position handler
	longDesc = Handler for window position events.
    param[] = {
        type = int
        name = posX
        desc = position (X)
    }
    param[] = {
        type = int
        name = posY
        desc = position (Y)
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(events, this, 
    "onWindowPos", "Event set");
ViewerEvent* e0 = ViewerEvent::create(this, 
    ViewerEvent::TYPE_WINDOW_POS);
events->addEvent(e0);
windowPosX = posX;
windowPosY = posY;
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = onWindowClose
	shortDesc = Window close handler
	longDesc = Handler for window close events.
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(events, this, 
    "onWindowClose", "Event set");
ViewerEvent* e0 = ViewerEvent::create(this, 
    ViewerEvent::TYPE_WINDOW_CLOSE);
events->addEvent(e0);
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << "OpenGL " << openGLVersionMajor << "." 
    << openGLVersionMinor << " (" 
    << getOpenGLProfileString(openGLProfile) << "); ";
status << "width = " << windowWidth << ", height = " 
    << windowHeight << ", title = '" << windowTitle << "'";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Viewer*
	name = getInstance
	shortDesc = Get global instance
	longDesc = <<<
Get the current global viewer instance. If no global viewer instance exists, a new one will be created.

\sa cleanupInstance()
>>>
	impl = <<<
if (instance != 0)
    return instance;
instance = Viewer::create();
instance->addRef();
>>>
    return = {
        value = instance
        desc = Global viewer instance
    }
}
function.public[] = {
	spec = static
	type = void
	name = setInstance
	shortDesc = Set global instance
	param[] = {
	    type = Ionflux::GeoUtils::Viewer*
	    name = viewer
	    desc = Viewer
	}
	longDesc = Set the current global viewer instance.
	impl = <<<
if (instance != 0)
    cleanupInstance();
instance = viewer;
instance->addRef();
>>>
}
function.public[] = {
	spec = static
	type = void
	name = cleanupInstance
	shortDesc = Cleanup global instance
	longDesc = <<<
Clean up the global viewer instance. This should be called to clean up the global viewer instance that can be obtained by getInstance() before exiting the application.

\sa getInstance()
>>>
    impl = <<<
if (instance == 0)
    return;
if (instance->getNumRefs() == 0)
    throw GeoUtilsError("[Viewer::cleanupInstance] "
        "Viewer has already been cleaned up.");
instance->removeRef();
if (instance->getNumRefs() == 0)
{
    delete instance;
    instance = 0;
}
>>>
}

# Static GLFW interface member functions
function.public[] = {
	bindings.disable = true
	spec = static
	type = void
	name = errorHandlerGLFW
	shortDesc = Error handler (GLFW)
	longDesc = Callback for GLFW errors.
    param[] = {
        type = int
        name = errorCode
        desc = Error code
    }
    param[] = {
        type = const char*
        name = description
        desc = error description
    }
	impl = <<<
std::ostringstream status;
status << "[Viewer::errorHandler] GLFW error: " << description;
throw GeoUtilsError(status.str());
>>>
}
function.public[] = {
	bindings.disable = true
	spec = static
	type = void
	name = keyHandlerGLFW
	shortDesc = Key handler (GLFW)
	longDesc = Callback for GLFW key events.
    param[] = {
        type = GLFWwindow*
        name = window
        desc = Window
    }
    param[] = {
        type = int
        name = key
        desc = Key code
    }
    param[] = {
        type = int
        name = scancode
        desc = Scancode
    }
    param[] = {
        type = int
        name = action
        desc = Action
    }
    param[] = {
        type = int
        name = mods
        desc = Modifier keys
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(window, 
    "Viewer::keyHandlerGLFW", "Window");
Viewer* viewer = static_cast<Viewer*>(
    glfwGetWindowUserPointer(window));
Ionflux::ObjectBase::nullPointerCheck(viewer, 
    "Viewer::keyHandlerGLFW", "Viewer");
viewer->onKey(key, scancode, action, mods);
>>>
}
function.public[] = {
	bindings.disable = true
	spec = static
	type = void
	name = windowSizeHandlerGLFW
	shortDesc = Window size handler (GLFW)
	longDesc = Callback for GLFW window size events.
    param[] = {
        type = GLFWwindow*
        name = window
        desc = Window
    }
    param[] = {
        type = int
        name = width
        desc = Width
    }
    param[] = {
        type = int
        name = height
        desc = Height
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(window, 
    "Viewer::windowSizeHandlerGLFW", "Window");
Viewer* viewer = static_cast<Viewer*>(
    glfwGetWindowUserPointer(window));
Ionflux::ObjectBase::nullPointerCheck(viewer, 
    "Viewer::windowSizeHandlerGLFW", "Viewer");
viewer->onWindowSize(width, height);
>>>
}
function.public[] = {
	bindings.disable = true
	spec = static
	type = void
	name = windowPosHandlerGLFW
	shortDesc = Window position handler (GLFW)
	longDesc = Callback for GLFW window position events.
    param[] = {
        type = GLFWwindow*
        name = window
        desc = Window
    }
    param[] = {
        type = int
        name = posX
        desc = position (X)
    }
    param[] = {
        type = int
        name = posY
        desc = position (Y)
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(window, 
    "Viewer::windowSizeHandlerGLFW", "Window");
Viewer* viewer = static_cast<Viewer*>(
    glfwGetWindowUserPointer(window));
Ionflux::ObjectBase::nullPointerCheck(viewer, 
    "Viewer::windowSizeHandlerGLFW", "Viewer");
viewer->onWindowPos(posX, posY);
>>>
}
function.public[] = {
	bindings.disable = true
	spec = static
	type = void
	name = windowCloseHandlerGLFW
	shortDesc = Window close handler (GLFW)
	longDesc = Callback for GLFW window close events.
    param[] = {
        type = GLFWwindow*
        name = window
        desc = Window
    }
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(window, 
    "Viewer::windowCloseHandlerGLFW", "Window");
Viewer* viewer = static_cast<Viewer*>(
    glfwGetWindowUserPointer(window));
Ionflux::ObjectBase::nullPointerCheck(viewer, 
    "Viewer::windowCloseHandlerGLFW", "Viewer");
viewer->onWindowClose();
>>>
}

# Pure virtual member functions.

# operations

# Global functions.

