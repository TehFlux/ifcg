# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Batch.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Source.hpp"'
        '"geoutils/ParamControl.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"geoutils/GeoUtilsError.hpp"'
        '"ifmapping/utils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Batch
	shortDesc = Transform node: Batch
	title = Transform node: Batch
	longDesc = Apply a processor transform node to all input groups in turn and add the output groups of the processor node as output groups. It is possible to add dimensions to the Batch node. If this is done, the update() function calculates the coordinates corresponding to the current index relative to the given dimensions and invokes any ParamControl objects on which a coordinate index is set with the coordinate (normalized to [0..1]) instead of the regular value. ParamControl objects on which no coordinate index is set are called with the regular (normalized) value.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.
variable.protected[] = {
	type = Ionflux::GeoUtils::TransformNodes::Source*
	name = source
	desc = Source node for the processor node
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::TransformNodes::TransformNode*
	setFromType = Ionflux::GeoUtils::TransformNodes::TransformNode*
	name = processor
	desc = Processor node
	## Not managed, this is considered equivalent to a connected node.
	# managed = true
}
property.protected[] = {
    style = vector
    name = controls
    desc = Vector of parameter controls
    element = {
        type = Ionflux::GeoUtils::TransformNodes::ParamControl*
        name = Control
        managed = true
    }
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = processorInputID
	desc = Input ID for the processor node
}
property.protected[] = {
    style = vector
    name = dimensions
    desc = Vector of dimensions
    element = {
        type = unsigned int
        name = Dimension
        notSetValue = COORDINATE_NOT_SET
    }
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_FIRST
    desc = Input ID: first
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_FIRST
    desc = Output ID: first
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_PROCESSOR_INPUT_ID
    desc = Default input ID for the processor node
    value = 0
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = processor
        value = 0
    }
    initializer[] = {
        name = processorInputID
        value = DEFAULT_PROCESSOR_INPUT_ID
    }
    impl = source = Source::create();\
addLocalRef(source);
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = source
        value = 0
    }
    initializer[] = {
        name = processor
        value = 0
    }
    initializer[] = {
        name = processorInputID
        value = initProcessorInputID
    }
    param[] = {
        type = Ionflux::GeoUtils::TransformNodes::TransformNode*
        name = initProcessor
        desc = Processor node
    }
    param[] = {
        type = unsigned int
        name = initProcessorInputID
        desc = Input ID for the processor node
        default = DEFAULT_PROCESSOR_INPUT_ID
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = source = Source::create();\
addLocalRef(source);\
setProcessor(initProcessor);
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; ";\
if (processor != 0)\
    status << (*processor);\
else\
    status << "<none>";\
status << ":" << processorInputID << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = addControls
	shortDesc = Add parameter controls
	longDesc = Add parameter controls.
	param[] = {
		type = Ionflux::GeoUtils::ParamControlVector&
		name = newControls
		desc = Parameter controls
	}
    impl = for (ParamControlVector::iterator i = newControls.begin(); \
    i != newControls.end(); i++)\
    addControl(*i);
}
function.protected[] = {
	spec = virtual
	type = void
	name = updateControls
	shortDesc = Update parameter controls
	longDesc = Update the parameter controls of this node with the specified value.
	param[] = {
	    type = Ionflux::Mapping::MappingValue
	    name = value
	    desc = Value
	}
    impl = for (ParamControlVector::const_iterator i = \
    controls.begin(); i != controls.end(); i++)\
\{\
    ParamControl* c0 = *i;\
    if (c0 == 0)\
        throw GeoUtilsError("[Batch::updateControls] "\
            "Parameter control is null!");\
    (*c0)(value);\
\}
}
function.protected[] = {
	spec = virtual
	type = void
	name = updateControls
	shortDesc = Update parameter controls
	longDesc = Update the parameter controls of this node with the specified sequence index.
	param[] = {
	    type = unsigned int
	    name = index
	    desc = Sequence index
	}
    impl = double seqR = static_cast<double>(index) \
    / (inputs.size() - 1);\
if (dimensions.size() == 0)\
\{\
    // linear mode\
    updateControls(seqR);\
    return;\
\}\
// array mode\
std::ostringstream status;\
Ionflux::ObjectBase::UIntVector coords;\
Ionflux::ObjectBase::DoubleVector coordsRel;\
seqToCoords(index, dimensions, coords);\
getCoordsRel(coords, dimensions, coordsRel);\
if (coordsRel.size() != coords.size())\
\{\
    status << "[Batch::updateControls] " \
        "Unexpected number of relative coordinates "\
        "(numCoordsRel = " << coordsRel.size() \
        << ", numCoords = " << coords.size() << ")!";\
    throw GeoUtilsError(status.str());\
\}\
for (ParamControlVector::const_iterator i = \
    controls.begin(); i != controls.end(); i++)\
\{\
    ParamControl* c0 = *i;\
    if (c0 == 0)\
        throw GeoUtilsError("[Batch::updateControls] "\
            "Parameter control is null!");\
    unsigned int ci0 = c0->getCoord();\
    if (ci0 == COORDINATE_NOT_SET)\
        // Use normalized sequence index to update parameter control.\
        (*c0)(seqR);\
    else\
    \{\
        // Use normalized coordinate to update parameter control.\
        if (ci0 >= coordsRel.size())\
        \{\
            status.str("");\
            status << "[Batch::updateControls] " \
                "Parameter control has invalid coordinate index "\
                "(index = " << ci0 << ", numCoordsRel = " \
                << coordsRel.size() << ", numDimensions = " \
                << dimensions.size() << ", numCoords = " \
                << coords.size() << ", " << (*c0) << ")!";\
            throw GeoUtilsError(status.str());\
        \}\
        (*c0)(coordsRel[ci0]);\
    \}\
\}
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (processor == 0)\
    throw GeoUtilsError("[Batch::process] Processor node not set.");\
clearInputGroups();\
// Process input groups.\
/* <---- DEBUG ----- //\
ostringstream message;\
message << "Number of inputs: " << inputs.size();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */\
unsigned int k = 0;\
for (Ionflux::GeoUtils::TransformableGroupVector::iterator i = \
    inputCache.begin(); i != inputCache.end(); i++)\
\{\
    if (controls.size() > 0)\
        updateControls(k);\
    TransformableGroup* o0 = *i;\
    /* Set up the processor node and run it. \
       No need to duplicate the input group here since Source will \
       do it. */\
    /* <---- DEBUG ----- //\
    message.str("");\
    message << "Number of elements in input group: " \
        << o0->getNumItems() << ", bounds = " << o0->getBounds();\
    log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
    // ----- DEBUG ----> */\
    if (source == 0)\
        throw GeoUtilsError("Source is null!");\
    source->setSource(o0);\
    processor->setInput(createInputNodeSpec(source, 0), \
        processorInputID);\
    processor->update();\
    for (unsigned int j = 0; j < processor->getNumOutputs(); j++)\
    \{\
        TransformableGroup* g0 = processor->getOutput(j);\
        /* <---- DEBUG ----- //\
        message.str("");\
        message << "Number of elements in output group: " \
            << g0->getNumItems() << ", bounds = " << g0->getBounds();\
        log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
        // ----- DEBUG ----> */\
        addOutput(g0);\
    \}\
    processor->clearOutputs();\
    k++;\
\}\
// Clear the link to the processor node.\
processor->setInput(createInputNodeSpec(0, 0), processorInputID);\
/* <---- DEBUG ----- //\
message.str("");\
message << "Number of outputs: " << outputs.size();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "process"));\
// ----- DEBUG ----> */
}

# Pure virtual member functions.

# operations

# Global functions.

