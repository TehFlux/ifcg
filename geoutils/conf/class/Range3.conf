# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Range3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range.hpp"'
        '"geoutils/Vector2.hpp"'
        '"geoutils/Vector3.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<cfloat>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Line3.hpp"'
    }
}

# forward declarations
forward = {
    'class Line3'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Range3
	shortDesc = Range of values (3D)
	title = Range of values (3D)
	longDesc = A range of values in three-dimensional space.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
    }
    create = {
        extendedCreate = true
        allocationError = GeoUtilsError("[Range3::create] Could not allocate object.")
    }
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Range
	setFromType = const Ionflux::GeoUtils::Range&
	name = x
	desc = Range (x)
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Range
	setFromType = const Ionflux::GeoUtils::Range&
	name = y
	desc = Range (y)
    copy = true
#    proxy = true
}
property.protected[] = {
	type = Ionflux::GeoUtils::Range
	setFromType = const Ionflux::GeoUtils::Range&
	name = z
	desc = Range (z)
    copy = true
#    proxy = true
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}
constructor.public[] = {
    param[] = {
        name = initCenter
        type = const Ionflux::GeoUtils::Vector3&
        desc = Center vector
    }
    param[] = {
        name = initRadius
        type = const Ionflux::GeoUtils::Vector3*
        desc = Radius vector
        default = 0
    }
    impl = setBounds(initCenter, initRadius);
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = initX
    }
    initializer[] = {
        name = y
        value = initY
    }
    initializer[] = {
        name = z
        value = initZ
    }
    param[] = {
        name = initX
        type = const Ionflux::GeoUtils::Range&
        desc = Range (x)
    }
    param[] = {
        name = initY
        type = const Ionflux::GeoUtils::Range&
        desc = Range (y)
    }
    param[] = {
        name = initZ
        type = const Ionflux::GeoUtils::Range&
        desc = Range (z)
    }
    impl = 
}
constructor.public[] = {
    param[] = {
        name = rx
        type = const Ionflux::GeoUtils::Vector2&
        desc = Range (x)
    }
    param[] = {
        name = ry
        type = const Ionflux::GeoUtils::Vector2&
        desc = Range (y)
    }
    param[] = {
        name = rz
        type = const Ionflux::GeoUtils::Vector2&
        desc = Range (z)
    }
    impl = x.setRMin(rx[0]);\
x.setRMax(rx[1]);\
y.setRMin(ry[0]);\
y.setRMax(ry[1]);\
z.setRMin(rz[0]);\
z.setRMax(rz[1]);
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = xMin, xMax
    }
    initializer[] = {
        name = y
        value = yMin, yMax
    }
    initializer[] = {
        name = z
        value = zMin, zMax
    }
    param[] = {
        name = xMin
        type = double
        desc = Minimum value (X)
    }
    param[] = {
        name = xMax
        type = double
        desc = Maximum value (X)
    }
    param[] = {
        name = yMin
        type = double
        desc = Minimum value (Y)
    }
    param[] = {
        name = yMax
        type = double
        desc = Maximum value (Y)
    }
    param[] = {
        name = zMin
        type = double
        desc = Minimum value (Z)
    }
    param[] = {
        name = zMax
        type = double
        desc = Maximum value (Z)
    }
    impl = 
}
constructor.public[] = {
    param[] = {
        name = initMin
        type = const Ionflux::GeoUtils::Vector3&
        desc = Minimum vector
    }
    param[] = {
        name = edgeLength
        type = double
        desc = Edge length
    }
    impl = setBounds(initMin, edgeLength);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = extend
	shortDesc = Extend range
	longDesc = Extend the range to contain the values from the specified range.
    param[] = {
        type = const Ionflux::GeoUtils::Range3&
        name = other
        desc = Range
    }
    impl = extend(other.getCenter() - other.getRadius());\
extend(other.getCenter() + other.getRadius());
}
function.public[] = {
	spec = virtual
	type = void
	name = extend
	shortDesc = Extend range
	longDesc = Extend the range to contain the values from the specified vector.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = v
        desc = Vector
    }
    impl = x.extend(v[0]);\
y.extend(v[1]);\
z.extend(v[2]);
}
function.public[] = {
	spec = virtual
	type = void
	name = extend
	shortDesc = Extend range
	longDesc = Extend the range by the specified radius delta.
    param[] = {
        type = double
        name = rd
        desc = radius delta
    }
    impl = <<<
Vector3 r(getRadius());
Vector3 c(getCenter());
double r0 = r.length();
Vector3 nr(r.normalize() * (r0 + rd));
extend(c - nr);
extend(c + nr);
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getCenter
    const = true
	shortDesc = Get center
	longDesc = Get the center vector of the range.
    impl = 
    return = {
        desc = Center of the range
        value = Vector3(x.getCenter(), y.getCenter(), z.getCenter())
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getRadius
    const = true
	shortDesc = Get radius vector
	longDesc = Get the radius vector of the range.
    impl = 
    return = {
        desc = Radius vector of the range
        value = Vector3(x.getRadius(), y.getRadius(), z.getRadius())
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getExtent
    const = true
	shortDesc = Get extent
	longDesc = Get the extent of the range.
    impl = 
    return = {
        desc = Extent of the range
        value = Vector3(x.getExtent(), y.getExtent(), z.getExtent())
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = getExtent
    const = true
	shortDesc = Get extent
	longDesc = Get the extent of the range on the specified axis.
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Axis
    }
    impl = if (axis == AXIS_X)\
    return x.getExtent();\
if (axis == AXIS_Y)\
    return y.getExtent();\
if (axis == AXIS_Z)\
    return z.getExtent();
    return = {
        desc = Extent of the range
        value = 0.
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getValue
    const = true
	shortDesc = Get value
	longDesc = Get the vector inside the range corresponding to the parameter vector. For each dimension, s = 0 returns the minimum value and s = 1 returns the maximum value for that dimension.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3
        name = v
        desc = Parameter vector
    }
    impl = 
    return = {
        desc = Value from the range
        value = Vector3(x.getValue(v.getX0()), y.getValue(v.getX1()), z.getValue(v.getX2()))
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getRMin
    const = true
	shortDesc = Get minimum value
	longDesc = Get the minimum vector contained within the range.
    impl = 
    return = {
        desc = Minimum vector
        value = getValue(Vector3::ZERO)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getRMax
    const = true
	shortDesc = Get maximum value
	longDesc = Get the maximum vector contained within the range.
    impl = 
    return = {
        desc = Maximum vector
        value = getValue(Vector3::E_SUM)
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = clamp
    const = true
	shortDesc = Clamp vector
	longDesc = Clamp the vector to the range.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3
        name = v
        desc = Vector
    }
    impl = 
    return = {
        desc = Clamped vector
        value = Vector3(x.clamp(v.getX0()), y.clamp(v.getX1()), z.clamp(v.getX2()))
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getClampedValue
    const = true
	shortDesc = Get value
	longDesc = Get the vector inside the range corresponding to the parameter vector. For each dimension, s = 0 returns the minimum value and s = 1 returns the maximum value for that dimension. The result is clamped to the range.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3
        name = v
        desc = Vector
    }
    impl = 
    return = {
        desc = Clamped value from the range
        value = clamp(getValue(v))
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range
	name = getAxisRange
    const = true
	shortDesc = Get range for specified axis
	longDesc = Get the range for the specified axis.
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Axis
    }
    impl = if (axis == AXIS_X)\
    return x;\
if (axis == AXIS_Y)\
    return y;\
if (axis != AXIS_Z)\
\{\
    ostringstream message;\
    message << "Invalid axis: " << axis;\
    throw GeoUtilsError(message.str());\
\}
    return = {
        desc = Range
        value = z
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setBounds
	shortDesc = Set bounds
	longDesc = Set bounds of the range to a single point, as specified by the vector.
    param[] = {
        name = v
        type = const Ionflux::GeoUtils::Vector3&
        desc = Vector
    }
    impl = x.setBounds(v[0], v[0]);\
y.setBounds(v[1], v[1]);\
z.setBounds(v[2], v[2]);
}
function.public[] = {
	spec = virtual
	type = void
	name = setBounds
	shortDesc = Set bounds
	longDesc = Set bounds of the range to the bounds of another range.
    param[] = {
        name = other
        type = const Ionflux::GeoUtils::Range3&
        desc = Range
    }
    impl = <<<
setBounds(other.getCenter());
extend(other);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setBounds
	shortDesc = Set bounds
	longDesc = Set bounds of the range to a single point, as specified by the vector. If the optional \c r is specified, the range will be extended using \c r as the radius vector.
    param[] = {
        name = v
        type = const Ionflux::GeoUtils::Vector3&
        desc = Vector
    }
    param[] = {
        name = r
        type = const Ionflux::GeoUtils::Vector3*
        desc = Radius vector
    }
    impl = <<<
x.setBounds(v[0], v[0]);
y.setBounds(v[1], v[1]);
z.setBounds(v[2], v[2]);
if (r != 0)
{
    extend(v + (*r));
    extend(v - (*r));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setBounds
	shortDesc = Set bounds
	longDesc = Set bounds of the range to include a box with the specified minimum vector and edge length.
    param[] = {
        name = v
        type = const Ionflux::GeoUtils::Vector3&
        desc = Minimum vector
    }
    param[] = {
        name = edgeLength
        type = double
        desc = Edge length
    }
    impl = <<<
setBounds(v);
if (edgeLength > 0)
{
    Vector3 e0(edgeLength, edgeLength, edgeLength);
    extend(v + e0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::RangeCompResult3
	name = compare3
    const = true
	shortDesc = Compare ranges (per axis)
	longDesc = Compares the ranges on each axis separately. See Range3::compare() for details on the return values.
    param[] = {
        type = const Ionflux::GeoUtils::Range3&
        name = other
        desc = Range
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = RangeCompResult3 result;\
result.x = x.compare(other.x, t);\
result.y = y.compare(other.y, t);\
result.z = z.compare(other.z, t);
    return = {
        desc = Result of the comparison
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::RangeCompResult
	name = compare
    const = true
	shortDesc = Compare ranges
	longDesc = Returns RANGE_EQUAL if the ranges are equal within the tolerance, i.e. they have the same rMin and rMax values in each dimension. Returns RANGE_OTHER_CONTAINS if the range on which the method is called is contained within the other range, and RANGE_FIRST_CONTAINS if the other range is contained within the range on which the method is called. Returns RANGE_OVERLAP if the ranges overlap in some dimension. Returns RANGE_DISJOINT if the ranges are disjoint.
    param[] = {
        type = const Ionflux::GeoUtils::Range3&
        name = other
        desc = Range
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = RangeCompResult3 c = compare3(other, t);\
if ((c.x == c.y) && (c.x == c.z))\
    // This covers the equality and disjoint on all axes cases.\
    return c.x;\
/* Check whether the first range contains the other range with equal \
   ranges in some dimension(s). */\
bool result = true;\
for (int i = 0; i < 3; i++)\
\{\
    RangeCompResult v;\
    if (i == 0)\
        v = c.x;\
    else \
    if (i == 1)\
        v = c.y;\
    else \
        v = c.z;\
    if (v == RANGE_DISJOINT)\
        // Disjoint on one axis means disjoint ranges.\
        return RANGE_DISJOINT;\
    else\
    if ((v != RANGE_FIRST_CONTAINS) \
        && (v != RANGE_EQUAL))\
        result = false;\
\}\
if (result)\
    return RANGE_FIRST_CONTAINS;\
/* Check whether the other range contains the first range with equal \
   ranges in some dimension(s). */\
result = true;\
for (int i = 0; i < 3; i++)\
\{\
    RangeCompResult v;\
    if (i == 0)\
        v = c.x;\
    else \
    if (i == 1)\
        v = c.y;\
    else \
        v = c.z;\
    if ((v != RANGE_OTHER_CONTAINS) \
        && (v != RANGE_EQUAL))\
    \{\
        result = false;\
        break;\
    \}\
\}\
if (result)\
    return RANGE_OTHER_CONTAINS;
    return = {
        desc = Result of the comparison
        value = RANGE_OVERLAP
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = isInRange
    const = true
	shortDesc = Range check
	longDesc = Check whether the vector is contained in the range.
    param[] = {
        type = const Ionflux::GeoUtils::Vector3&
        name = v
        desc = Vector
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = 
    return = {
        desc = \c true if the value is within the range, \c false otherwise
        value = (x.isInRange(v[0], t) \
    && y.isInRange(v[1], t) \
    && z.isInRange(v[2], t))
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = intersect
    const = true
	shortDesc = Intersect line
	longDesc = Calculate the intersection of the specified line with the bounding plane pair of the range along the specified axis. The result is stored in \c result.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = line
        desc = Line
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = axis
        desc = Axis
    }
    param[] = {
        type = Ionflux::GeoUtils::AAPlanePairIntersection&
        name = result
        desc = Intersection result
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
Range xr = getAxisRange(axis);
double xv = line.getU().getElement(axis);
double xp = line.getP().getElement(axis);
result.tNear = -DBL_MAX;
result.tFar = DBL_MAX;
if (eq(xv, 0., t))
{
    // Line is parallel to the planes.
    if (!xr.isInRange(xp, t))
    {
        // Line origin outside the planes.
        result.valid = false;
    } else
    {
        // Line origin between the planes.
        result.valid = true;
    }
    return result.valid;
}
double xl = xr.getRMin();
double xh = xr.getRMax();
double t1 = (xl - xp) / xv;
double t2 = (xh - xp) / xv;
if (t1 <= t2)
{
    result.tNear = t1;
    result.tFar = t2;
} else
{
    result.tFar = t1;
    result.tNear = t2;
}
result.valid = true;
>>>
    return = {
        desc = \c true if the line intersects the plane pair, \c false otherwise
        value = result.valid
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = intersect
    const = true
	shortDesc = Intersect line
	longDesc = Calculate the intersection of the specified line with the the range. The result is stored in \c result.
    param[] = {
        type = const Ionflux::GeoUtils::Line3&
        name = line
        desc = Line
    }
    param[] = {
        type = Ionflux::GeoUtils::AAPlanePairIntersection&
        name = result
        desc = Intersection result
    }
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
/* Slab algorithm.
   see http://www.siggraph.org/education/materials/HyperGraph/
     raytrace/rtinter3.htm */
AAPlanePairIntersection r0;
result.tNear = -DBL_MAX;
result.tFar = DBL_MAX;
for (int i = 0; i < 3; i++)
{
    if (!intersect(line, i, r0, t))
    {
        result.valid = false;
        return false;
    }
    if (r0.tNear > result.tNear)
        result.tNear = r0.tNear;
    if (r0.tFar < result.tFar)
        result.tFar = r0.tFar;
}
if (lt(result.tNear, result.tFar, t))
    result.valid = true;
else
    result.valid = false;
>>>
    return = {
        desc = \c true if the line intersects the plane pair, \c false otherwise
        value = result.valid
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::AxisTriple
	name = getAxisOrder
    const = true
	shortDesc = Get axis order
	longDesc = Get the order of the axes of the range. The longest axis will be the first in the triple, 
    impl = 
    return = {
        desc = Triple containing the axes ordered from longest to shortest
        value = getRadius().getAxisOrder()
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Range3&
		name = other
		desc = Range
	}
    impl = if (!((x == other.x) && (y == other.y) && (z == other.z)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Range3&
		name = other
		desc = Range
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << x.getString() << ", " << y.getString() << ", " 
    << z.getString();
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

