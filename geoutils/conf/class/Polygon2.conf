# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Polygon2.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vertex2.hpp"'
        '"geoutils/Edge.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Matrix2.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Polygon2
	shortDesc = Polygon (2D)
	title = Polygon (2D)
	longDesc = A polygon in two-dimensional space.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'logmessage'
    }
}

# Public constructors.
constructor.default = {
    impl = 
}
constructor.public[] = {
    param[] = {
        name = initVertices
        type = Ionflux::GeoUtils::Vertex2Vector*
        desc = Vertices
    }
    param[] = {
        name = initEdges
        type = Ionflux::GeoUtils::EdgeVector*
        desc = Edges
        default = 0
    }
    impl = if (initVertices != 0)\
    addVertices(*initVertices);\
if (initEdges != 0)\
    addEdges(*initEdges);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = vertices
    desc = Vertex vector
    element = {
        type = Ionflux::GeoUtils::Vertex2*
        name = Vertex
        plural = Vertices
        managed = true
    }
}
property.protected[] = {
    style = vector
    name = edges
    desc = Edge vector
    element = {
        type = Ionflux::GeoUtils::Edge*
        name = Edge
        managed = true
    }
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = Vertex2Vector v0;\
for (Vertex2Vector::const_iterator i = other.vertices.begin(); \
    i != other.vertices.end(); i++)\
    v0.push_back(new Vertex2(*(*i)));\
clearVertices();\
addVertices(v0);
function.public[] = {
	spec = virtual
	type = void
	name = addVertices
	shortDesc = Add vertices
	longDesc = Add vertices from a vector of vertices.
	param[] = {
		type = Ionflux::GeoUtils::Vertex2Vector&
		name = newVertices
		desc = Vertex vector
	}
    impl = if (newVertices.size() == 0)\
    return;\
Ionflux::GeoUtils::Vertex2Vector::iterator i;\
for (i = newVertices.begin(); i < newVertices.end(); i++)\
    addVertex(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = addEdges
	shortDesc = Add edges
	longDesc = Add edges from a vector of edges.
	param[] = {
		type = Ionflux::GeoUtils::EdgeVector&
		name = newEdges
		desc = Edge vector
	}
    impl = if (newEdges.size() == 0)\
    return;\
Ionflux::GeoUtils::EdgeVector::iterator i;\
for (i = newEdges.begin(); i < newEdges.end(); i++)\
    addEdge(*i);
}
function.public[] = {
	spec = virtual
	type = int
	name = createEdges
	shortDesc = Create edges
	longDesc = Takes two subsequent vertices from the list to create edges.
    impl = clearEdges();\
if (vertices.size() < 2)\
    return 0;\
for (unsigned int i = 1; i < vertices.size(); i++)\
    addEdge(new Edge(i - 1, 1));\
if (vertices.size() >= 3)\
    addEdge(new Edge(vertices.size() - 1, 0));
    return = {
        value = edges.size()
        desc = The number of edges created
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkVertex
	shortDesc = Vertex in polygon check
	longDesc = Check whether a vertex is inside the polygon.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex2&
		name = v
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = ostringstream status;\
int intersections = 0;\
for (unsigned int i = 0; i < edges.size(); i++)\
\{\
    Edge& e = *edges[i];\
    Vertex2& a = *vertices[e[0]];\
    Vertex2& b = *vertices[e[1]];\
    Vertex2 vt(v.getX(), v.getY());\
    /* <---- DEBUG ----- //\
    status.str("");\
    status << "v = " << v << ", a = " << a << ", b = " << b;\
    log(IFLogMessage(status.str(), VL_DEBUG, this, "checkVertex"));\
    // ----- DEBUG ----> */\
    if (vt.eq(a, t) || vt.eq(b, t))\
    \{\
        /* <---- DEBUG ----- //\
        log(IFLogMessage("Test vertex incident to poly vertex.", \
            VL_DEBUG, this, "checkVertex"));\
        // ----- DEBUG ----> */\
        return true;\
    \}\
    if (eq(vt.getY(), a.getY(), t) && eq(vt.getY(), b.getY(), t))\
    \{\
        // Horizontal edge.\
        /* <---- DEBUG ----- //\
        log(IFLogMessage("Horizontal edge.", \
            VL_DEBUG, this, "checkVertex"));\
        // ----- DEBUG ----> */\
        if (gtOrEq(vt.getX(), min(a.getX(), b.getX()), t) \
            && ltOrEq(vt.getX(), max(a.getX(), b.getX()), t))\
        \{\
            // Vertex lies on horizontal edge.\
            /* <---- DEBUG ----- //\
            log(IFLogMessage("Vertex lies on horizontal edge.", \
                VL_DEBUG, this, "checkVertex"));\
            // ----- DEBUG ----> */\
            return true;\
        \} else\
        \{\
            /* <---- DEBUG ----- //\
            log(IFLogMessage("Vertex does not lie on horizontal edge.", \
                VL_DEBUG, this, "checkVertex"));\
            // ----- DEBUG ----> */\
        \}\
    \} else\
    \{\
        /* Rather ugly: Offset the point so it will not have the same \
           coordinate as any polygon vertex as this situation makes \
           correct intersection counts difficult. */\
        if (eq(vt.getY(), a.getY(), t))\
            vt.setY(vt.getY() - 1.1 * t);\
        if (eq(vt.getY(), b.getY(), t))\
            vt.setY(vt.getY() - 1.1 * t);\
        if (!((gt(vt.getX(), a.getX(), t) \
                && gt(vt.getX(), b.getX(), t))\
            || (lt(vt.getY(), a.getY(), t) \
                && lt(vt.getY(), b.getY(), t))\
            || (gt(vt.getY(), a.getY(), t) \
                && gt(vt.getY(), b.getY(), t))))\
        \{\
            // Find intersection in vertex space.\
            Vector2 r = Matrix2(b.getX() - a.getX(), -1., \
                b.getY() - a.getY(), 0.).solve(\
                    Vector2(vt.getX() - a.getX(), vt.getY() - a.getY()));\
            Vertex2 iv(r[1], 0.);\
            /* <---- DEBUG ----- //\
            status.str("");\
            status << "intersection: iv = " << iv;\
            log(IFLogMessage("Vertex does not lie on horizontal edge.", \
                VL_DEBUG, this, "checkVertex"));\
            // ----- DEBUG ----> */\
            if (eq(iv.getX(), 0., t) && eq(iv.getY(), 0., t))\
            \{\
                // Vertex lies on an edge of the poly.\
                return true;\
            \} else\
            if (gt(iv.getX(), 0., t))\
                intersections += 1;\
        \}\
    \}\
\}\
/* <---- DEBUG ----- //\
status.str("");\
status << "intersections = " + intersections;\
log(IFLogMessage("Vertex does not lie on horizontal edge.", \
    VL_DEBUG, this, "checkVertex"));\
// ----- DEBUG ----> */\
if (intersections % 2 == 0)\
    return false;
    return = {
        value = true
        desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

