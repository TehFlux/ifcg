# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# DeferredTransform.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Matrix4.hpp"'
        '"geoutils/Vector.hpp"'
        '"geoutils/VectorSet.hpp"'
    }
}

# forward declarations
forward = {
    'class Matrix4'
    'class Vector'
    'class VectorSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = DeferredTransform
	shortDesc = Deferred matrix transformation
	title = Deferred matrix transformation
	longDesc = A deferred matrix transformation object that can be used to accumulate matrix transformations that should be applied at a later point in time, or to track changes in a transformation. The deferred transformation object supports a general transformation matrix as well as additional view and image transformation matrices.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    xml = {
        elementName = deferred_transform
    }
}

# Member variables.
variable.protected[] = {
    type = bool
    name = transformChangedFlag
    desc = Transformation matrix changed flag
}
variable.protected[] = {
    type = bool
    name = viChangedFlag
    desc = View/image transformation matrix changed flag
}
variable.protected[] = {
    type = bool
    name = useTransformFlag
    desc = Use transformation matrix flag
}
variable.protected[] = {
    type = bool
    name = useVIFlag
    desc = Use view/image transformation matrix flag
}

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = transformMatrix
    desc = Transformation matrix
    impl.postSet = checkTransform();
    valueType = object
    xml = {
        child.name = transform_matrix
        createFunc = createMatrix4
    }
}
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = viewMatrix
    desc = View matrix
    impl.postSet = checkVI();
    valueType = object
    xml = {
        child.name = view_matrix
        createFunc = createMatrix4
    }
}
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = imageMatrix
    desc = Image matrix
    impl.postSet = checkVI();
    valueType = object
    xml = {
        child.name = image_matrix
        createFunc = createMatrix4
    }
}
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = lastTransformMatrix
    desc = Transformation matrix before last change
}
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = lastViewMatrix
    desc = View matrix before last change
}
property.protected[] = {
    type = Ionflux::GeoUtils::Matrix4*
    setFromType = Ionflux::GeoUtils::Matrix4*
    name = lastImageMatrix
    desc = Image matrix before last change
}

# Protected static constants.
constant.public[] = {
    desc = Comparison tolerance
    type = double
    name = COMPARE_TOLERANCE
    value = 1e-6
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = transformChangedFlag
        value = false
    }
    initializer[] = {
        name = viChangedFlag
        value = false
    }
    initializer[] = {
        name = useTransformFlag
        value = false
    }
    initializer[] = {
        name = useVIFlag
        value = false
    }
    initializer[] = {
        name = transformMatrix
        value = 0
    }
    initializer[] = {
        name = viewMatrix
        value = 0
    }
    initializer[] = {
        name = imageMatrix
        value = 0
    }
    initializer[] = {
        name = lastTransformMatrix
        value = 0
    }
    initializer[] = {
        name = lastViewMatrix
        value = 0
    }
    initializer[] = {
        name = lastImageMatrix
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
clear();
if (other.transformMatrix != 0)
    setTransformMatrix(other.transformMatrix->copy());
if (other.viewMatrix != 0)
    setViewMatrix(other.viewMatrix->copy());
if (other.imageMatrix != 0)
    setImageMatrix(other.imageMatrix->copy());
>>>
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the transformation matrices and flags.
    impl = <<<
useTransformFlag = false;
useVIFlag = false;
transformChangedFlag = false;
viChangedFlag = false;
setTransformMatrix(0);
setViewMatrix(0);
setImageMatrix(0);
setLastTransformMatrix(0);
setLastViewMatrix(0);
setLastImageMatrix(0);
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkTransform
	shortDesc = Check transformation matrix status
	longDesc = Check the transformation matrix. If it is equal to the unit matrix within the tolerance, use of the matrix for object transformations will be disabled. If it is not equal to the unit matrix, check if the transform has changed. If it has changed, call the onTransformChanged() handler.
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = COMPARE_TOLERANCE
	}
    impl = <<<
if (transformMatrix != 0) 
{
    if (transformMatrix->eq(Matrix4::UNIT, t))
        useTransformFlag = false;
    else
        useTransformFlag = true;
    if (lastTransformMatrix != 0)
    {
        transformChangedFlag = transformMatrix->eq(
            *lastTransformMatrix, t);
    } else
        transformChangedFlag = true;
} else
{
    useTransformFlag = false;
    if (lastTransformMatrix != 0)
        transformChangedFlag = true;
    else
        transformChangedFlag = false;
}
setLastTransformMatrix(transformMatrix);
>>>
    return = {
        value = useTransformFlag
        desc = The result of the check
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkVI
	shortDesc = Check view/image transform status
	longDesc = Check the view/image transform matrices. If both are equal to the unit matrix within the tolerance, use of the matrices for object transformations will be disabled. If the matrices are not equal to the unit matrix, check if the matrices have changed. If either matrix has changed, call the onVIChanged() handler.
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = COMPARE_TOLERANCE
	}
    impl = <<<
// Check view matrix.
if (viewMatrix != 0) 
{
    if (viewMatrix->eq(Matrix4::UNIT, t))
        useVIFlag = false;
    else
        useVIFlag = true;
    if (lastViewMatrix != 0)
    {
        viChangedFlag = (!viewMatrix->eq(
            *lastViewMatrix, t));
    } else
        viChangedFlag = true;
} else
{
    useVIFlag = false;
    if (lastViewMatrix != 0)
        viChangedFlag = true;
    else
        viChangedFlag = false;
}
setLastViewMatrix(viewMatrix);
// Check image matrix.
if (imageMatrix != 0) 
{
    if (!imageMatrix->eq(Matrix4::UNIT, t))
        useVIFlag = true;
    if (lastImageMatrix != 0)
    {
        viChangedFlag = (viChangedFlag 
            || (!imageMatrix->eq(*lastImageMatrix, t)));
    } else
        viChangedFlag = true;
} else
{
    if (lastImageMatrix != 0)
        viChangedFlag = true;
}
setLastImageMatrix(imageMatrix);
>>>
    return = {
        value = useVIFlag
        desc = The result of the check
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = eq
    const = true
	shortDesc = Comparison (with tolerance): equal
	longDesc = Compare the vector with another vector using the specified tolerance.
	param[] = {
		type = const Ionflux::GeoUtils::DeferredTransform&
		name = other
		desc = Vector
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = COMPARE_TOLERANCE
	}
    impl = <<<
bool result = true;
if ((transformMatrix != 0) 
    && (other.transformMatrix != 0))
    result = transformMatrix->eq(*other.transformMatrix, t);
else
    result = false;
if (!result)
    return false;
if ((viewMatrix != 0) 
    && (other.viewMatrix != 0))
    result = viewMatrix->eq(*other.viewMatrix, t);
else
    result = false;
if (!result)
    return false;
if ((imageMatrix != 0) 
    && (other.imageMatrix != 0))
    result = imageMatrix->eq(*other.imageMatrix, t);
else
    result = false;
>>>
    return = {
        value = result
        desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::DeferredTransform&
		name = other
		desc = Deferred transformation
	}
    impl = <<<
bool result = true;
if ((transformMatrix != 0) 
    && (other.transformMatrix != 0))
    result = (*transformMatrix == *other.transformMatrix);
else
    result = false;
if (!result)
    return false;
if ((viewMatrix != 0) 
    && (other.viewMatrix != 0))
    result = (*viewMatrix == *other.viewMatrix);
else
    result = false;
if (!result)
    return false;
if ((imageMatrix != 0) 
    && (other.imageMatrix != 0))
    result = (*imageMatrix == *other.imageMatrix);
else
    result = false;
>>>
	return = {
        value = result
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::DeferredTransform&
		name = other
		desc = Deferred transformation
	}
	return = {
	    value = !(*this == other);
	    desc = Result of the comparison
	}
}
function.public[] = {
	spec = virtual
	type = bool
	name = useTransform
	const = true
	shortDesc = Get use transformation matrix flag
	longDesc = Get a boolean value that indicates whether the transformation matrix should be applied.
	impl = 
    return = {
        value = useTransformFlag
        desc = \c true if the transformation matrix should be applied, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = useVI
	const = true
	shortDesc = Get use view/image transformation matrices flag
	longDesc = Get a boolean value that indicates whether the view/image transformation matrices should be applied.
	impl = 
    return = {
        value = useVIFlag
        desc = \c true if the view/image transformation matrices should be applied, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = transformChanged
	const = true
	shortDesc = Get transformation matrix changed flag
	longDesc = Get a boolean value that indicates whether the transformation matrix has changed since it was last checked.
	impl = 
    return = {
        value = transformChangedFlag
        desc = \c true if the transformation matrix has changed since the last check, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = viChanged
	const = true
	shortDesc = Get view/image transformation matrices changed flag
	longDesc = Get a boolean value that indicates whether the view/image transformation matrices have changed since they were last checked.
	impl = 
    return = {
        value = viChangedFlag
        desc = \c true if the view/image transformation matrices have changed since the last check, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = isIdentity
	const = true
	shortDesc = Identity check
	longDesc = Check whether the deferred transformation is equivalent to the identity transformation.
	impl = <<<
if ((transformMatrix == 0) 
    && (viewMatrix == 0) 
    && (imageMatrix == 0))
    return true;
>>>
    return = {
        value = useTransformFlag || useVIFlag
        desc = \c true if the transformation is equivalent to the identity transformation, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformation matrix
	longDesc = Apply the transformation matrix to a vector. If the optional \c clearTransform argument is set to \c true, the transformation matrix and flags will be cleared after the operation.
	param[] = {
	    type = const Ionflux::GeoUtils::Vector&
	    name = v
	    desc = Vector
	}
	param[] = {
	    type = Ionflux::GeoUtils::Vector&
	    name = target
	    desc = Where to store the result
	}
	param[] = {
	    type = bool
	    name = clearTransform
	    desc = Clear transform
	    default = true
	}
	impl = <<<
if (!useTransformFlag
    || (transformMatrix == 0))
    target = v;
else
    transformMatrix->transform(v, target);
if (clearTransform)
{
    useTransformFlag = false;
    transformChangedFlag = false;
    setTransformMatrix(0);
    setLastTransformMatrix(0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = applyVI
	shortDesc = Apply view/image transformation matrix
	longDesc = Apply the view/image transformation matrices to a vector. If the optional \c clearTransform argument is set to \c true, the view/image transformation matrices and flags will be cleared after the operation.
	param[] = {
	    type = const Ionflux::GeoUtils::Vector&
	    name = v
	    desc = Vector
	}
	param[] = {
	    type = Ionflux::GeoUtils::Vector&
	    name = target
	    desc = Where to store the result
	}
	param[] = {
	    type = bool
	    name = clearTransform
	    desc = Clear transform
	    default = true
	}
	impl = <<<
if (!useVIFlag
    || ((viewMatrix == 0) 
        && (imageMatrix == 0)))
    target = v;
else
{
    if (viewMatrix != 0)
    {
        viewMatrix->transform(v, target);
        target.divideIP(target.getElement(
            target.getNumElements() - 1));
    }
    if (imageMatrix != 0)
    {
        Vector* v0 = target.copy();
        addLocalRef(v0);
        imageMatrix->transform(target, *v0);
        target = *v0;
        removeLocalRef(v0);
    }
}
if (clearTransform)
{
    useVIFlag = false;
    viChangedFlag = false;
    setViewMatrix(0);
    setLastViewMatrix(0);
    setImageMatrix(0);
    setLastImageMatrix(0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformation matrix
	longDesc = Apply the transformation matrix to a vector set. If the optional \c clearTransform argument is set to \c true, the transformation matrix and flags will be cleared after the operation.
	param[] = {
	    type = const Ionflux::GeoUtils::VectorSet&
	    name = vectors
	    desc = Vector set
	}
	param[] = {
	    type = Ionflux::GeoUtils::VectorSet&
	    name = target
	    desc = Where to store the result vectors
	}
	param[] = {
	    type = bool
	    name = clearTransform
	    desc = Clear transform
	    default = true
	}
	impl = <<<
if (!useTransformFlag
    || (transformMatrix == 0))
    target = vectors;
else
{
    unsigned int numVectors = vectors.getNumVectors();
    for (unsigned int i = 0; i < numVectors; i++)
    {
        Vector* v0 = vectors.getVector(i);
        Vector* v1 = Ionflux::ObjectBase::nullPointerCheck(v0, this, 
            "applyTransform", "Vector")->copy();
        transformMatrix->transform(*v0, *v1);
        target.addVector(v1);
    }
}
if (clearTransform)
{
    useTransformFlag = false;
    transformChangedFlag = false;
    setTransformMatrix(0);
    setLastTransformMatrix(0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = applyVI
	shortDesc = Apply view/image transformation matrix
	longDesc = Apply the view/image transformation matrices to a vector set. If the optional \c clearTransform argument is set to \c true, the view/image transformation matrices and flags will be cleared after the operation.
	param[] = {
	    type = const Ionflux::GeoUtils::VectorSet&
	    name = vectors
	    desc = Vector set
	}
	param[] = {
	    type = Ionflux::GeoUtils::VectorSet&
	    name = target
	    desc = Where to store the result
	}
	param[] = {
	    type = bool
	    name = clearTransform
	    desc = Clear transform
	    default = true
	}
	impl = <<<
if (!useVIFlag
    || ((viewMatrix == 0) 
        && (imageMatrix == 0)))
    target = vectors;
else
{
    unsigned int numVectors = vectors.getNumVectors();
    for (unsigned int i = 0; i < numVectors; i++)
    {
        Vector* v0 = vectors.getVector(i);
        Vector* v1 = Ionflux::ObjectBase::nullPointerCheck(v0, this, 
            "applyTransform", "Vector")->copy();
        if (viewMatrix != 0)
        {
            viewMatrix->transform(*v0, *v1);
            v1->divideIP(v1->getElement(
                v1->getNumElements() - 1));
        }
        if (imageMatrix != 0)
        {
            Vector* v2 = v1->copy();
            addLocalRef(v2);
            imageMatrix->transform(*v1, *v2);
            *v1 = *v2;
            removeLocalRef(v2);
        }
        target.addVector(v1);
    }
}
if (clearTransform)
{
    useVIFlag = false;
    viChangedFlag = false;
    setViewMatrix(0);
    setLastViewMatrix(0);
    setImageMatrix(0);
    setLastImageMatrix(0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
if (isIdentity())
    return "<Id>";
std::ostringstream status;
status << "T: ";
if (transformMatrix != 0)
    status << "[" << transformMatrix->getValueString() << "]";
else
    status << "<none>";
status << "; V: ";
if (viewMatrix != 0)
    status << "[" << viewMatrix->getValueString() << "]";
else
    status << "<none>";
status << "; I: ";
if (imageMatrix != 0)
    status << "[" << imageMatrix->getValueString() << "]";
else
    status << "<none>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

