# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Matrix.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/utils.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Matrix
	shortDesc = Matrix
	title = Matrix
	longDesc = A numeric matrix.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
		# other base classes
        other[] = {
			name = Ionflux::GeoUtils::Vector
            include = geoutils/Vector.hpp
            xml = {
                enabled = true
                #getFunc = getVector
                include = geoutils/Vector
            }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object.")
        extendedCreate = true
    }
    xml = {
        elementName = m
        childClass[] = {
            name = Matrix2
            getFunc = getMatrix2
        }
        childClass[] = {
            name = Matrix3
            getFunc = getMatrix3
        }
        childClass[] = {
            name = Matrix4
            getFunc = getMatrix4
        }
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.
constant.public[] = {
	type = unsigned int
	name = NUM_ROWS
	desc = Number of rows
	value = 0
}
constant.public[] = {
	type = unsigned int
	name = NUM_COLS
	desc = Number of columns
	value = 0
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Vector::operator=(other);
>>>
function.public[] = {
	spec = virtual
	type = double
	name = getElement
    const = true
	shortDesc = Get element
	longDesc = Get the element at the specified index.
	param[] = {
		type = unsigned int
		name = rowIndex
		desc = Row index
	}
	param[] = {
		type = unsigned int
		name = colIndex
		desc = Column index
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
if ((rowIndex >= numRows) 
    || (colIndex >= numCols))
{
    std::ostringstream status;
    status << "Index out of range: (" << rowIndex << ", " 
        << colIndex << ")";
    throw GeoUtilsError(getErrorString(status.str(), "getElement"));
}
>>>
    return = {
        value = (*this)[numCols * rowIndex + colIndex];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setElement
	shortDesc = Set element
	longDesc = Set the element at the specified index.
	param[] = {
		type = unsigned int
		name = index
		desc = Index
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = Vector::setElement(index, value);
}
function.public[] = {
	spec = virtual
	type = void
	name = setElement
	shortDesc = Set element
	longDesc = Set the element at the specified index.
	param[] = {
		type = unsigned int
		name = rowIndex
		desc = Row index
	}
	param[] = {
		type = unsigned int
		name = colIndex
		desc = Column index
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
if ((rowIndex >= numRows) 
    || (colIndex >= numCols))
{
    std::ostringstream status;
    status << "Index out of range: (" << rowIndex << ", " 
        << colIndex << ")";
    throw GeoUtilsError(getErrorString(status.str(), "setElement"));
}
Vector::setElement(numCols * rowIndex + colIndex, value);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a vector of doubles. If the vector contains fewer than the required number of elements, the remaining elements will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector&
		name = newElements
		desc = Element vector
	}
    impl = Vector::setElements(newElements);
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a vector. If the vector contains fewer than the required number of elements, the remaining elements will be left alone.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = newElements
		desc = Element vector
	}
	param[] = {
		type = unsigned int
		name = sourceOffset
		desc = Source offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetOffset
		desc = Target offset
		default = 0
	}
    impl = Vector::setElements(newElements, sourceOffset, targetOffset);
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements from a matrix. The dimensions of the target and source matrices may differ. In this case, only the relevant number of elements will be considered. The optional offsets may be specified to set a certain subset of elements.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix&
		name = other
		desc = Matrix
	}
	param[] = {
		type = unsigned int
		name = sourceRowOffset
		desc = Source row offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = sourceColOffset
		desc = Source column offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetRowOffset
		desc = Target row offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetColOffset
		desc = Target column offset
		default = 0
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
unsigned int numRows1 = other.getNumRows();
unsigned int numCols1 = other.getNumCols();
unsigned int i = 0;
while (((i + targetRowOffset) < numRows0) 
    && ((i + sourceRowOffset) < numRows1))
{
    unsigned int k = 0;
    while (((k + targetColOffset) < numCols0) 
        && ((k + sourceColOffset) < numCols1))
    {
        unsigned int si0 = (i + sourceRowOffset) * numCols1 
            + (k + sourceColOffset);
        unsigned int ti0 = (i + targetRowOffset) * numCols0 
            + (k + targetColOffset);
        elements[ti0] = other.elements[si0];
        k++;
    }
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setElements
	shortDesc = Set elements
	longDesc = Set elements of the matrix. This is a convenience function that can be used to set up to 12 elements of the matrix at once.
    param[] = {
        type = double
        name = x0
        desc = element (0)
    }
    param[] = {
        type = double
        name = x1
        desc = element (1)
        default = 0.
    }
    param[] = {
        type = double
        name = x2
        desc = element (2)
        default = 0.
    }
    param[] = {
        type = double
        name = x3
        desc = element (3)
        default = 0.
    }
    param[] = {
        type = double
        name = x4
        desc = element (4)
        default = 0.
    }
    param[] = {
        type = double
        name = x5
        desc = element (5)
        default = 0.
    }
    param[] = {
        type = double
        name = x6
        desc = element (6)
        default = 0.
    }
    param[] = {
        type = double
        name = x7
        desc = element (7)
        default = 0.
    }
    param[] = {
        type = double
        name = x8
        desc = element (8)
        default = 0.
    }
    param[] = {
        type = double
        name = x9
        desc = element (9)
        default = 0.
    }
    param[] = {
        type = double
        name = x10
        desc = element (10)
        default = 0.
    }
    param[] = {
        type = double
        name = x11
        desc = element (11)
        default = 0.
    }
    param[] = {
        type = double
        name = x12
        desc = element (12)
        default = 0.
    }
    impl = Vector::setElements(x0, x1, x2, x3, x4, x5, x6, \
    x7, x8, x9, x10, x11, x12);
}
function.public[] = {
	spec = virtual
	type = void
	name = getRow
    const = true
	shortDesc = Get row vector
	longDesc = Get the row vector at the specified index.
	param[] = {
		type = unsigned int
		name = rowIndex
		desc = Row index
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector&
		name = target
		desc = Where to store the vector
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
unsigned int numElements0 = target.getNumElements();
if (rowIndex >= numRows0)
{
    std::ostringstream status;
    status << "Index out of range: " << rowIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getRow"));
}
unsigned int offset = rowIndex * numCols0;
unsigned int i = 0;
while ((i < numCols0)
    && (i < numElements0))
{
    target.setElement(i, elements[offset + i]);
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getCol
    const = true
	shortDesc = Get column vector
	longDesc = Get the column vector at the specified index.
	param[] = {
		type = unsigned int
		name = colIndex
		desc = Column index
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector&
		name = target
		desc = Where to store the vector
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
unsigned int numElements0 = target.getNumElements();
if (colIndex >= numCols0)
{
    std::ostringstream status;
    status << "Index out of range: " << colIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getCol"));
}
unsigned int i = 0;
while ((i < numRows0)
    && (i < numElements0))
{
    target.setElement(i, elements[i * numCols0 + colIndex]);
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setRow
	shortDesc = Set row vector
	longDesc = Set the row vector at the specified index.
	param[] = {
		type = unsigned int
		name = rowIndex
		desc = Row index
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = v
		desc = Vector
	}
	param[] = {
		type = unsigned int
		name = sourceOffset
		desc = Source offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetOffset
		desc = Target offset
		default = 0
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
unsigned int numElements0 = v.getNumElements();
if (rowIndex >= numRows0)
{
    std::ostringstream status;
    status << "Index out of range: " << rowIndex;
    throw GeoUtilsError(getErrorString(status.str(), "setRow"));
}
unsigned int rowOffset = rowIndex * numCols0;
unsigned int i = 0;
while (((i + sourceOffset) < numElements0) 
    && ((i + targetOffset) < numCols0))
{
    elements[rowOffset + i + targetOffset] = 
        v.getElement(i + sourceOffset);
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setCol
	shortDesc = Set column vector
	longDesc = Set the column vector at the specified index.
	param[] = {
		type = unsigned int
		name = colIndex
		desc = Column index
	}
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = v
		desc = Vector
	}
	param[] = {
		type = unsigned int
		name = sourceOffset
		desc = Source offset
		default = 0
	}
	param[] = {
		type = unsigned int
		name = targetOffset
		desc = Target offset
		default = 0
	}
    impl = <<<
unsigned int numRows0 = getNumRows();
unsigned int numCols0 = getNumCols();
unsigned int numElements0 = v.getNumElements();
if (colIndex >= numCols0)
{
    std::ostringstream status;
    status << "Index out of range: " << colIndex;
    throw GeoUtilsError(getErrorString(status.str(), "getCol"));
}
unsigned int i = 0;
while (((i + sourceOffset) < numElements0) 
    && ((i + targetOffset) < numRows0))
{
    elements[(i + targetOffset) * numCols0 + colIndex] = 
        v.getElement(i + sourceOffset);
    i++;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = transposeIP
	shortDesc = Transpose (in-place)
	longDesc = Transpose the matrix (in-place).
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
if (numRows != numCols)
{
    std::ostringstream status;
    status << "Cannot transpose non-square matrix (" << numRows 
        << "x" << numCols << ").";
    throw GeoUtilsError(getErrorString(status.str(), "transposeIP"));
}
/* <---- DEBUG ----- //
std::cerr << "[Matrix::transposeIP] DEBUG: " 
    "numRows = " << numRows << ", numCols = " << numCols
    << std::endl;
// ----- DEBUG ----> */
for (unsigned int i = 0; i < numRows; i++)
{
    for (unsigned int k = 0; k < i; k++)
    {
        unsigned int i0 = i * numCols + k;
        unsigned int i1 = k * numCols + i;
        double t0 = elements[i0];
        /* <---- DEBUG ----- //
        std::cerr << "[Matrix::transposeIP] DEBUG: " 
            "swapping (" << i << ", " << k << ") <-> ("
            << k << ", " << i << "): " << t0 << " <-> " << elements[i1]
            << std::endl;
        // ----- DEBUG ----> */
        elements[i0] = elements[i1];
        elements[i1] = t0;
    }
}
>>>
}
function.public[] = {
	spec = virtual
	type = double
	name = trace
	const = true
	shortDesc = Trace
	longDesc = Calculate the trace of the matrix.
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
double result = 0.;
unsigned int k = 0;
while ((k < numRows) 
    && (k < numCols))
{
    result += elements[k * numCols + k];
    k++;
}
>>>
    return = {
        desc = Trace of the matrix
        value = result
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform
	longDesc = Transform a column vector by multiplying the matrix from the left.
	param[] = {
	    type = const Ionflux::GeoUtils::Vector&
	    name = v
	    desc = vector
	}
	param[] = {
	    type = Ionflux::GeoUtils::Vector&
	    name = target
	    desc = Where to store the result
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
unsigned int oNumElements = v.getNumElements();
unsigned int tNumElements = target.getNumElements();
if (numCols != oNumElements)
{
    std::ostringstream status;
    status << "Matrix and vector have incompatible dimensions (this: " 
        << numRows << "x" << numCols << ", other: " 
        << oNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "transform"));
}
if ((oNumElements != tNumElements) 
    || (numRows != tNumElements))
{
    std::ostringstream status;
    status << "Matrix and vectors have incompatible dimensions (this: " 
        << numRows << "x" << numCols << ", other: " 
        << oNumElements << ", target: "
        << tNumElements << ").";
    throw GeoUtilsError(getErrorString(status.str(), "transform"));
}
for (unsigned int i = 0; i < tNumElements; i++)
{
    double s = 0.;
    for (unsigned int k = 0; k < numCols; k++)
    {
        unsigned int i0 = i * numCols + k;
        s += (elements[i0] * v.getElement(k));
    }
    target.setElement(i, s);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = multiply
	shortDesc = Multiply
	longDesc = Multiply the matrix with another matrix.
	param[] = {
	    type = const Ionflux::GeoUtils::Matrix&
	    name = other
	    desc = Matrix
	}
	param[] = {
	    type = Ionflux::GeoUtils::Matrix&
	    name = target
	    desc = Where to store the result
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
unsigned int oNumRows = other.getNumRows();
unsigned int oNumCols = other.getNumCols();
unsigned int tNumRows = target.getNumRows();
unsigned int tNumCols = target.getNumCols();
if (numCols != oNumRows)
{
    std::ostringstream status;
    status << "Matrices have incompatible dimensions (this: " 
        << numRows << "x" << numCols << ", other: " 
        << oNumRows << "x" << oNumCols << ").";
    throw GeoUtilsError(getErrorString(status.str(), "multiply"));
}
if ((oNumCols != tNumCols) 
    || (numRows != tNumRows))
{
    std::ostringstream status;
    status << "Matrices have incompatible dimensions (this: " 
        << numRows << "x" << numCols << ", other: " 
        << oNumRows << "x" << oNumCols << ", target: "
        << tNumRows << "x" << tNumCols << ").";
    throw GeoUtilsError(getErrorString(status.str(), "multiply"));
}
for (unsigned int i = 0; i < tNumRows; i++)
    for (unsigned int k = 0; k < tNumCols; k++)
    {
        double s = 0.;
        for (unsigned int m = 0; m < numCols; m++)
        {
            unsigned int i0 = i * numCols + m;
            unsigned int i1 = m * numCols + k;
            s += (elements[i0] * other.elements[i1]);
        }
        unsigned int i2 = i * tNumCols + k;
        target.elements[i2] = s;
    }
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = permuteRowsIP
	shortDesc = Permute rows (in-place)
	longDesc = Permute rows in the matrix (in-place) using the specified permutation vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = p
		desc = permutation vector
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
unsigned int numP = p.getNumElements();
if (numP < numRows)
{
    std::ostringstream status;
    status << "Not enough elements in permutation vector "
        "(numElements = " << numP << ").";
    throw GeoUtilsError(getErrorString(status.str(), 
        "permuteRowsIP"));
}
Matrix* m0 = copy();
addLocalRef(m0);
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int k = 0; k < numCols; k++)
    {
        unsigned int i0 = i * numCols + k;
        unsigned int i1 = p[i] * numCols + k;
        elements[i0] = m0->elements[i1];
    }
removeLocalRef(m0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = permuteColsIP
	shortDesc = Permute columns (in-place)
	longDesc = Permute columns in the matrix (in-place) using the specified permutation vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector&
		name = p
		desc = permutation vector
	}
    impl = <<<
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
unsigned int numP = p.getNumElements();
if (numP < numCols)
{
    std::ostringstream status;
    status << "Not enough elements in permutation vector "
        "(numElements = " << numP << ").";
    throw GeoUtilsError(getErrorString(status.str(), 
        "permuteColsIP"));
}
Matrix* m0 = copy();
addLocalRef(m0);
for (unsigned int i = 0; i < numRows; i++)
    for (unsigned int k = 0; k < numCols; k++)
    {
        unsigned int i0 = i * numCols + k;
        unsigned int i1 = i * numCols + p[k];
        elements[i0] = m0->elements[i1];
    }
removeLocalRef(m0);
>>>
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
std::ostringstream status;
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
bool e0 = true;
bool e1 = true;
for (unsigned int i = 0; i < numRows; i++)
{
    if (!e0)
        status << "; ";
    else
        e0 = false;
    status << "(";
    e1 = true;
    for (unsigned int k = 0; k < numCols; k++)
    {
        if (!e1)
            status << ", ";
        else
            e1 = false;
        status << elements[i * numCols + k];
    }
    status << ")";
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueStringF
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object. This returns a string in which the numbers are formatted according to the specified parameters.
	param[] = {
	    type = unsigned int
	    name = fieldWidth
	    desc = field width
	    default = 5
	}
	param[] = {
	    type = unsigned int
	    name = precision
	    desc = decimal precision
	    default = 3
	}
	param[] = {
	    type = const std::string&
	    name = colSep
	    desc = column separator
	    default = " "
	}
	param[] = {
	    type = const std::string&
	    name = rowSep
	    desc = row separator
	    default = "\n"
	}
	param[] = {
	    type = const std::string&
	    name = rowPrefix
	    desc = row prefix
	    default = ""
	}
	impl = <<<
std::ostringstream status;
unsigned int numRows = getNumRows();
unsigned int numCols = getNumCols();
bool e0 = true;
bool e1 = true;
for (unsigned int i = 0; i < numRows; i++)
{
    if (!e0)
        status << rowSep;
    else
        e0 = false;
    e1 = true;
    if (rowPrefix != "")
        status << rowPrefix;
    for (unsigned int k = 0; k < numCols; k++)
    {
        if (!e1)
            status << colSep;
        else
            e1 = false;
        status << std::setw(fieldWidth) << std::setfill(' ') 
            << std::setprecision(precision) << right 
            << elements[i * numCols + k];
    }
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumElements
	const = true
	shortDesc = Get number of elements
	longDesc = Get the number of elements in the vector
	impl = 
    return = {
        value = NUM_ELEMENTS
        desc = Number of elements
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumRows
	const = true
	shortDesc = Get number of rows
	longDesc = Get the number of rows in the matrix
	impl = 
    return = {
        value = NUM_ROWS
        desc = Number of rows
    }
}
function.public[] = {
	spec = virtual
	type = unsigned int
	name = getNumCols
	const = true
	shortDesc = Get number of columns
	longDesc = Get the number of columns in the matrix
	impl = 
    return = {
        value = NUM_COLS
        desc = Number of columns
    }
}

# static member functions

# Pure virtual member functions.

# operations

# Global functions.

