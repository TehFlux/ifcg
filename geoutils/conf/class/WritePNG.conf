# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# WritePNG.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"altjira/Color.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/xmlutils.hpp"'
        '"geoutils/Polygon3Set.hpp"'
        '"geoutils/Polygon3.hpp"'
        '"geoutils/Image.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = WritePNG
	shortDesc = Transform node: Write PNG
	title = Transform node: Write PNG
	longDesc = Write polygons from the input groups to a PNG file. The node takes an arbitrary number of inputs and provides a flattened duplicate of the inputs as its output group.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = std::string
    setFromType = const std::string&
    name = fileName
    desc = Output file name
}
property.protected[] = {
    style = vector
    name = styles
    desc = Shape styles
    element = {
        type = Ionflux::GeoUtils::SVGShapeStyle*
        name = Style
    }
}
property.protected[] = {
    type = Ionflux::GeoUtils::AxisID
    setFromType = Ionflux::GeoUtils::AxisID
    name = axis
    desc = Projection axis
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = closePath
    desc = Close path
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = width
    desc = Image width
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = height
    desc = Image height
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = originX
    desc = Origin coordinate (X)
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = originY
    desc = Origin coordinate (Y)
}
property.protected[] = {
    type = Ionflux::Altjira::Color
    setFromType = const Ionflux::Altjira::Color&
    name = backgroundColor
    desc = Background color
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_FIRST
    desc = Input ID: first
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_COMPOSITE
    desc = Output ID: composite
    value = 0
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = fileName
        value = ""
    }
    initializer[] = {
        name = axis
        value = Ionflux::GeoUtils::AXIS_Z
    }
    initializer[] = {
        name = closePath
        value = true
    }
    initializer[] = {
        name = width
        value = 1000
    }
    initializer[] = {
        name = height
        value = 1000
    }
    initializer[] = {
        name = originX
        value = 0
    }
    initializer[] = {
        name = originY
        value = 0
    }
    initializer[] = {
        name = backgroundColor
        value = Ionflux::Altjira::Color::TRANSPARENT
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = fileName
        value = initFileName
    }
    initializer[] = {
        name = axis
        value = initAxis
    }
    initializer[] = {
        name = closePath
        value = initClosePath
    }
    initializer[] = {
        name = width
        value = initWidth
    }
    initializer[] = {
        name = height
        value = initHeight
    }
    initializer[] = {
        name = originX
        value = initOriginX
    }
    initializer[] = {
        name = originY
        value = initOriginY
    }
    initializer[] = {
        name = backgroundColor
        value = initBackgroundColor
    }
    param[] = {
        type = const std::string&
        name = initFileName
        desc = Output file name
    }
    param[] = {
        type = Ionflux::GeoUtils::AxisID
        name = initAxis
        desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
    }
    param[] = {
        type = bool
        name = initClosePath
        desc = Close path
        default = true
    }
    param[] = {
        type = const Ionflux::GeoUtils::SVGShapeStyleVector*
        name = initStyles
        desc = Styles
        default = 0
    }
    param[] = {
        type = unsigned int
        name = initWidth
        desc = Image width
        default = 1000
    }
    param[] = {
        type = unsigned int
        name = initHeight
        desc = Image height
        default = 1000
    }
    param[] = {
        type = unsigned int
        name = initOriginX
        desc = Origin coordinate (X)
        default = 0
    }
    param[] = {
        type = unsigned int
        name = initOriginY
        desc = Origin coordinate (Y)
        default = 0
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initBackgroundColor
        desc = Background color
        default = Ionflux::Altjira::Color::TRANSPARENT
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = if (initStyles != 0)\
    addStyles(*initStyles);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
fileName = other.fileName;\
styles = other.styles;\
axis = other.axis;\
closePath = other.closePath;\
width = other.width;\
height = other.height;\
originX = other.originX;\
originY = other.originY;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") \
    << "; " << defaultStr(fileName, "<none>") << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.public[] = {
	spec = virtual
	type = void
	name = addStyles
	shortDesc = Add styles
	longDesc = Add styles for rendering.
	param[] = {
		type = const Ionflux::GeoUtils::SVGShapeStyleVector&
		name = newStyles
		desc = Styles
	}
    impl = for (Ionflux::GeoUtils::SVGShapeStyleVector::const_iterator i = \
    newStyles.begin(); i != newStyles.end(); i++)\
    addStyle(*i);
}
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = clearInputGroups();\
if (fileName.size() == 0)\
    throw GeoUtilsError("Output file name not specified.");\
TransformableGroup* g0 = new TransformableGroup();\
if (g0 == 0)\
    throw GeoUtilsError("Could not allocate object.");\
// Add all input groups.\
for (Ionflux::GeoUtils::TransformableGroupVector::iterator i = \
    inputCache.begin(); i != inputCache.end(); i++)\
\{\
    TransformableGroup* o0 = *i;\
    g0->addItem(o0);\
\}\
// Get polygons.\
g0->flatten();\
Ionflux::GeoUtils::Polygon3Set ps0;\
for (unsigned int i = 0; i < g0->getNumItems(); i++)\
\{\
    Ionflux::GeoUtils::TransformableObject* it0 = g0->getItem(i);\
    Polygon3* p0 = Polygon3::upcast(it0);\
    if (p0 != 0)\
        ps0.addPolygon(p0);\
\}\
// Render polygons to image.\
Ionflux::GeoUtils::Image i0(width, height);\
i0.begin();\
if (backgroundColor.getAlpha() > 0.)\
    i0.fill(backgroundColor);\
i0.drawPolygons(ps0, &styles, axis, closePath, originX, originY);\
i0.finish();\
// Write it to file.\
i0.writeToFile(fileName);\
addOutput(g0);
}

# operations

# Global functions.

