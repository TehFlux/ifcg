# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TransformableObject.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Range3.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Matrix4.hpp"'
        '"geoutils/DeferredTransform.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/Vertex3.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TransformableObject
	shortDesc = Transformable object
	title = Transformable object
	longDesc = Base class for objects that support basic transformations and can be part of a group of such objects.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'classinfo'
        'upcast'
        'create'
        'xmlio'
    }
    xml = {
        elementName = transformable_object
        childClass[] = {
            name = Vertex3
            getFunc = getVertex3
        }
        childClass[] = {
            name = Vertex3Set
            getFunc = getVertex3Set
        }
        childClass[] = {
            name = Face
            getFunc = getFace
        }
        childClass[] = {
            name = Mesh
            getFunc = getMesh
        }
        childClass[] = {
            name = Object3
            getFunc = getObject3
        }
    }
}

# Member variables.
variable.protected[] = {
    type = Ionflux::GeoUtils::Range3*
    name = boundsCache
    desc = Bounds cache
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::DeferredTransform*
    setFromType = Ionflux::GeoUtils::DeferredTransform*
    name = deferredTransform
    desc = Deferred transformation
    managed = true
    valueType = object
    xml = { 
        child.name = deferred_transform
        createFunc = createDeferredTransform
    }
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.default = {
    initializer[] = {
        name = boundsCache
        value = 0
    }
    initializer[] = {
        name = deferredTransform
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = recalculateBounds
	shortDesc = recalculate bounds
	longDesc = Process a transform change.
	impl = <<<
if (boundsCache == 0)
{
    boundsCache = Range3::create();
    addLocalRef(boundsCache);
}
>>>
}
function.protected[] = {
	spec = virtual
	type = void
	name = processTransformChange
	shortDesc = Process transform change
	longDesc = Process a transform change.
	impl = <<<
recalculateBounds();
if (deferredTransform != 0)
    deferredTransform->reset();
>>>
    return = {
        value = 
        desc = Bounds
    }
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
copyTransform(other);
>>>
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the internal state of the transformable object.
    impl = <<<
setDeferredTransform(0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = copyTransform
	shortDesc = copy transform
	longDesc = Copy the transformation matrices from another object.
	param[] = {
		type = const Ionflux::GeoUtils::TransformableObject&
		name = other
		desc = Transformable object
	}
    impl = <<<
if (other.deferredTransform != 0)
    setDeferredTransform(other.deferredTransform->copy());
else
    setDeferredTransform(0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = onTransformChanged
	shortDesc = Transform changed handler
	longDesc = This event handler is invoked when the transform matrix changes.
    impl = 
}
function.public[] = {
	spec = virtual
	type = void
	name = onVIChanged
	shortDesc = Transform changed handler
	longDesc = This event handler is invoked when the view/image transform matrix changes.
    impl = 
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkTransform
	shortDesc = Check transform status
	longDesc = Check the transform matrix. If it is equal to the unit matrix within the tolerance, use of the matrix for object transformations will be disabled. If it is not equal to the unit matrix, check if the transform has changed. If it has changed, call the onTransformChanged() handler.
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DeferredTransform::COMPARE_TOLERANCE
	}
    impl = <<<
if (deferredTransform == 0)
    return false;
bool result = deferredTransform->checkTransform();
if (result)
    onTransformChanged();
>>>
    return = {
        value = result
        desc = The result of the check
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = checkVI
	shortDesc = Check view/image transform status
	longDesc = Check the view/image transform matrices. If both are equal to the unit matrix within the tolerance, use of the matrices for object transformations will be disabled. If the matrices are not equal to the unit matrix, check if the matrices have changed. If either matrix has changed, call the onVIChanged() handler.
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DeferredTransform::COMPARE_TOLERANCE
	}
    impl = <<<
if (deferredTransform == 0)
    return false;
bool result = deferredTransform->checkVI();
if (result)
    onVIChanged();
>>>
    return = {
        value = result
        desc = The result of the check
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = Matrix4 s0 = Matrix4::scale(s);\
transform(s0);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = Matrix4 t0 = Matrix4::translate(t);\
transform(t0);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = Matrix4 r0 = Matrix4::rotate(phi, axis);\
transform(r0);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = <<<
Range3 bounds = getBounds();
Vector3 r = bounds.getRadius();
/* Scale to half the radius vector so the object has unit size 
   for its largest cross-section. */
double s = 0.5 / r.norm();
Vector3 s0(s, s, s);
scale(s0);
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = <<<
Vector3 offset;
if (method == CENTER_BARYCENTER)
    offset = getBarycenter().flip();
else
if (method == CENTER_BOUNDS)
    offset = getBounds().getCenter().flip();
if (origin != 0)
    offset = offset + *origin;
/* <---- DEBUG ----- //
std::ostringstream message;
message << "offset = " << offset;
log(IFLogMessage(message.str(), VL_DEBUG, this, "center"));
// ----- DEBUG ----> */
Matrix4 t0 = Matrix4::translate(offset);
transform(t0);
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = transform(Matrix4(matrix));
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = <<<
if (deferredTransform == 0)
    setDeferredTransform(DeferredTransform::create());
deferredTransform->transform(matrix);
checkTransform();
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = <<<
if (deferredTransform == 0)
    setDeferredTransform(DeferredTransform::create());
deferredTransform->transformVI(view, image);
checkVI();
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformations
	longDesc = Apply transformations that have been accumulated in the transformation matrices. This can be used by derived classes that have an internal structure to apply the transformations to that internal structure.
	param[] = {
	    type = bool
	    name = recursive
	    desc = Apply transformations recursively
	    default = false
	}
    impl = clear();
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the transformable object.
	impl = <<<
if (!useTransform() && !useVI())
    return Vector3::ZERO;
Vertex3 v0;
if (useTransform())
{
    Matrix4* transformMatrix = Ionflux::ObjectBase::nullPointerCheck(
        deferredTransform->getTransformMatrix(), this, 
        "getBarycenter", "Transformation matrix");
    v0.transform(*transformMatrix);
}
if (useVI())
{
    Matrix4* viewMatrix = Ionflux::ObjectBase::nullPointerCheck(
        deferredTransform->getViewMatrix(), this, 
        "getBarycenter", "View matrix");
    Matrix4* imageMatrix = deferredTransform->getImageMatrix();
    v0.transformVI(*viewMatrix, imageMatrix);
}
>>>
    return = {
        value = v0.getVector();
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range3
	name = getBounds
	shortDesc = Get bounds
	longDesc = Get the bounds for the transformable object.
	impl = <<<
if ((boundsCache == 0) 
    || transformChanged() 
    || viChanged())
    processTransformChange();
>>>
    return = {
        value = *boundsCache
        desc = Bounds
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = useTransform
	shortDesc = Get use transformation matrix flag
	longDesc = Check whether the transformation matrix should be used.
    impl = <<<
if (deferredTransform == 0)
    return false;
>>>
    return = {
        value = deferredTransform->useTransform()
        desc = Value of the use transformation matrix flag
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = useVI
	shortDesc = Get use view/image matrices flag
	longDesc = Check whether the view/image transformation matrices should be used.
    impl = <<<
if (deferredTransform == 0)
    return false;
>>>
    return = {
        value = deferredTransform->useVI()
        desc = Value of the use view/image transformation matrices flag
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = transformChanged
	shortDesc = Get transformation matrix changed flag
	longDesc = Check whether the transformation matrix has changed since the last check.
    impl = <<<
if (deferredTransform == 0)
    return false;
>>>
    return = {
        value = deferredTransform->transformChanged()
        desc = Value of the use transformation matrix flag
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = viChanged
	shortDesc = Get view/image transformation matrix changed flag
	longDesc = Check whether the view/image transformation matrices have changed since the last check.
    impl = <<<
if (deferredTransform == 0)
    return false;
>>>
    return = {
        value = deferredTransform->viChanged()
        desc = Value of the use view/image transformation matrices flag
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::TransformableObject&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4*
	name = getTransformMatrix
	shortDesc = Get transformation matrix
	longDesc = Get the current transformation matrix. If the deferred transformation object is not set or the transformation matrix is null, an exception is thrown.
    impl = <<<
if (deferredTransform == 0)
    throw GeoUtilsError(getErrorString(
        "Deferred transformation not set.", "getTransformMatrix"));
Matrix4* m0 = Ionflux::ObjectBase::nullPointerCheck(
    deferredTransform->getTransformMatrix(), this, 
    "getTransformMatrix", "Transformation matrix");
>>>
    return = {
        value = m0
        desc = The current transformation matrix
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4*
	name = getViewMatrix
	shortDesc = Get view transformation matrix
	longDesc = Get the current view transformation matrix. If the deferred transformation object is not set or the view transformation matrix is null, an exception is thrown.
    impl = <<<
if (deferredTransform == 0)
    throw GeoUtilsError(getErrorString(
        "Deferred transformation not set.", "getViewMatrix"));
Matrix4* m0 = Ionflux::ObjectBase::nullPointerCheck(
    deferredTransform->getViewMatrix(), this, 
    "getViewMatrix", "View transformation matrix");
>>>
    return = {
        value = m0
        desc = The current view transformation matrix
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Matrix4*
	name = getImageMatrix
	shortDesc = Get image transformation matrix
	longDesc = Get the current image transformation matrix. If the deferred transformation object is not set, an exception is thrown. Since the image matrix is allowed to be zero, no exception is thrown if this is the case.
    impl = <<<
if (deferredTransform == 0)
    throw GeoUtilsError(getErrorString(
        "Deferred transformation not set.", "getImageMatrix"));
Matrix4* m0 = deferredTransform->getImageMatrix();
>>>
    return = {
        value = m0
        desc = The current view transformation matrix
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = <<<
if (!useTransform && !useVI)
    return "";
ostringstream status;
if (useTransform)
    status << transformMatrix;
if (useVI)
{
    if (useTransform)
        status << ", ";
    status << viewMatrix << ", " << imageMatrix;
}
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

