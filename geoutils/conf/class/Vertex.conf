# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vertex.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/LinearInterpolator.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vertex
	shortDesc = Mesh vertex
	title = Mesh vertex
	longDesc = A vertex which can be used in a mesh. In addition to the vertex coordinates, this vertex class also supports a normal vector.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::Vertex3
            include = geoutils/Vertex3.hpp
		}
	}
    features = {
        'classinfo'
        'copy'
        'upcast'
        'create'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = Vertex3
        value = 0., 0., 0.
    }
    initializer[] = {
        name = normal
        value = Ionflux::GeoUtils::Vector3::E_X
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Vertex3
        value = initX, initY, initZ
    }
    initializer[] = {
        name = normal
        value = initNormal
    }
    param[] = {
        name = initX
        type = double
        desc = Element (X)
    }
    param[] = {
        name = initY
        type = double
        desc = Element (Y)
    }
    param[] = {
        name = initZ
        type = double
        desc = Element (Z)
    }
    param[] = {
        name = initNormal
        type = const Ionflux::GeoUtils::Vector3&
        desc = Normal vector
        default = Ionflux::GeoUtils::Vector3::E_X
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Vertex3
        value = 0., 0., 0.
    }
    initializer[] = {
        name = normal
        value = initNormal
    }
    param[] = {
        name = initCoords
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Coordinate vector
    }
    param[] = {
        name = initNormal
        type = const Ionflux::GeoUtils::Vector3&
        desc = Normal vector
        default = Ionflux::GeoUtils::Vector3::E_X
    }
    impl = setCoords(initCoords);
}
constructor.public[] = {
    initializer[] = {
        name = Vertex3
        value = 0., 0., 0.
    }
    initializer[] = {
        name = normal
        value = initNormal
    }
    param[] = {
        name = initCoords
        type = const Ionflux::GeoUtils::Vector3&
        desc = Coordinate vector
    }
    param[] = {
        name = initNormal
        type = const Ionflux::GeoUtils::Vector3&
        desc = Normal vector
        default = Ionflux::GeoUtils::Vector3::E_X
    }
    impl = setCoords(initCoords);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::GeoUtils::Vector3
	setFromType = const Ionflux::GeoUtils::Vector3&
	name = normal
	desc = Normal vector
    copy = true
#    proxy = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = Vertex3::operator=(other);\
normal = other.normal;
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex
	name = interpolate
    const = true
	shortDesc = Interpolate vertices
	longDesc = Interpolate the vertex coordinates and the coordinates of the other vertex using the specified parameter. The normal vector is also interpolated.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex&
		name = other
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Parameter
	}
	param[] = {
		type = Ionflux::GeoUtils::Interpolator*
		name = interpolator
		desc = Interpolator
        default = 0
	}
    impl = Vertex result;\
Interpolator* i0 = 0;\
if (interpolator == 0)\
\{\
    i0 = new LinearInterpolator();\
    if (i0 == 0)\
        throw GeoUtilsError("Could not allocate object.");\
    interpolator = i0;\
\}\
interpolator->setValues(x, other.x);\
result.setX((*interpolator)(t));\
interpolator->setValues(y, other.y);\
result.setY((*interpolator)(t));\
interpolator->setValues(z, other.z);\
result.setZ((*interpolator)(t));\
Vector3 n0 = other.getNormal();\
Vector3 n1;\
interpolator->setValues(normal.getX0(), n0.getX0());\
n1.setX0((*interpolator)(t));\
interpolator->setValues(normal.getX1(), n0.getX1());\
n1.setX1((*interpolator)(t));\
interpolator->setValues(normal.getX2(), n0.getX2());\
n1.setX2((*interpolator)(t));\
result.setNormal(n1);\
if (i0 != 0)\
    delete i0;
    return = {
        value = result
        desc = Interpolated vertex
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = Vertex3::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = Vertex3::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = Vertex3::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = Vertex3::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = Vertex3::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = Vertex3::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = Vertex3::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = Vertex* result = new Vertex(*this);\
if (result == 0)\
    throw GeoUtilsError("Could not allocate object.");
    return = {
        value = *result
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << x << ", " << y << ", " << z << ", " \
    << normal.getString() << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}
function.public[] = {
	spec = static
	type = Ionflux::GeoUtils::Vertex*
	name = create
	shortDesc = Create
	longDesc = Create a new vertex.
    param[] = {
        name = newX
        type = double
        desc = Element (X)
    }
    param[] = {
        name = newY
        type = double
        desc = Element (Y)
    }
    param[] = {
        name = newZ
        type = double
        desc = Element (Z)
    }
    impl = Vertex* v0 = create();\
v0->setCoords(newX, newY, newZ);
    return = {
        value = v0
        desc = New vertex
    }
}

# Pure virtual member functions.

# operations

# Global functions.

