# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ParamControl.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/TransformNode.hpp"'
        '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ParamControl
	shortDesc = Parameter control
	title = Parameter control
	longDesc = A parameter control is used to control a parameter on a transform node. Each time the parameter control is invoked with a value, it calls its associated mapping with that value and then sets the parameter it controls on the transform node to the mapped value. A coordinate index can be set on a parameter control. If this is done, the parameter control will be passed a (normalized) coordinate value instead of the regular value by callers that support this feature (such as the Batch node).
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
        ## other base classes
        #other[] = {
        #    name = Ionflux::GeoUtils::Mapping::Accept3
        #    include = geoutils/Accept3.hpp
        #}
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::GeoUtils::TransformNodes::TransformNode*
    setFromType = Ionflux::GeoUtils::TransformNodes::TransformNode*
    name = node
    desc = Transform node
    # NOTE: Not managed, since transform nodes are managed by transform 
    #       graphs and parameter controls are managed by transform nodes.
}
property.protected[] = {
    type = Ionflux::ObjectBase::IFParamID
    setFromType = const Ionflux::ObjectBase::IFParamID&
    name = paramID
    desc = Parameter ID
}
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = func
    desc = Mapping
    managed = true
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = coord
    desc = Coordinate index
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = node
        value = 0
    }
    initializer[] = {
        name = paramID
        value = ""
    }
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = coord
        value = COORDINATE_NOT_SET
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = node
        value = initNode
    }
    initializer[] = {
        name = paramID
        value = initParamID
    }
    initializer[] = {
        name = func
        value = 0
    }
    initializer[] = {
        name = coord
        value = initCoord
    }
    param[] = {
        type = Ionflux::GeoUtils::TransformNodes::TransformNode*
        name = initNode
        desc = Transform node
    }
    param[] = {
        type = Ionflux::ObjectBase::IFParamID
        name = initParamID
        desc = Parameter ID
        default = ""
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initFunc
        desc = Mapping
        default = 0
    }
    param[] = {
        type = unsigned int
        name = initCoord
        desc = Coordinate index
        default = COORDINATE_NOT_SET
    }
    impl = setFunc(initFunc);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = node = other.node;\
setFunc(other.func);\
paramID = other.paramID;
function.public[] = {
	spec = virtual
	type = void
	name = call
    const = true
	shortDesc = Call
	longDesc = Update the parameter controlled by the object using the specified value as the input to the mapping.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = if (func == 0)\
    throw GeoUtilsError("Mapping not set.");\
if (node == 0)\
    throw GeoUtilsError("Node not set.");\
Ionflux::Mapping::MappingValue v0 = (*func)(value);\
node->setParam(paramID, v0);
}
function.public[] = {
	spec = virtual
	type = void
	name = operator()
    const = true
	shortDesc = Call
	longDesc = Update the parameter controlled by the object using the specified value as the input to the mapping.
	param[] = {
		type = Ionflux::Mapping::MappingValue
		name = value
		desc = Value
	}
    impl = call(value);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[";\
if (node != 0)\
    status << (*node);\
else\
    status << "<none>";\
if (func != 0)\
    status << ", " << (*func);\
else\
    status << ", <none>";\
status << ", " << defaultStr(paramID, "<none>") << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

