# ===================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# VertexArrayObject.conf              Class configuration.
# ===================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"ifobject/types.hpp"'
        '"altjira/ColorSet.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/gltypes.hpp"'
        '"geoutils/glconstants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<cstring>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/glutils.hpp"'
        '"geoutils/VertexAttribute.hpp"'
    }
}

# forward declarations
forward = {
    'class VertexAttribute'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = VertexArrayObject
	shortDesc = Vertex array object (OpenGL)
	title = Vertex array object (OpenGL)
	longDesc = An OpenGL vertex array object.
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = GeoUtilsError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = GLuint
    setFromType = GLuint
    name = vaoImpl
    desc = Vertex array object implementation (OpenGL)
    protectedWrite = true
}
property.protected[] = {
    style = vector
    name = attributes
    desc = Vector of vertex attributes
    element = {
        type = Ionflux::GeoUtils::VertexAttribute*
        name = Attribute
        #plural = Attributes
        managed = true
        valueType = object
        createExpr = VertexAttribute::create()
    }
    #xml.child = {
    #    name = attributes
    #    elementName = attrvec
    #}
    extendedAddFuncs = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = vaoImpl
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = <<<
cleanup();
>>>

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up state maintained by the vertex array object.
	impl = <<<
if (vaoImpl != 0)
{
    glDeleteVertexArrays(1, &vaoImpl);
    vaoImpl = 0;
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize
	longDesc = Initialize the vertex attribute.
	impl = <<<
if (vaoImpl != 0)
    glDeleteVertexArrays(1, &vaoImpl);
glGenVertexArrays(1, &vaoImpl);
if (vaoImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "Could not allocate OpenGL vertex array object.", "init"));
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = bind
	shortDesc = Bind
	longDesc = Bind the OpenGL vertex array object.
	impl = <<<
if (vaoImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL vertex array object not initialized.", "bind"));
}
glBindVertexArray(vaoImpl);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the OpenGL vertex array object with the current set of vertex attributes.
	impl = <<<
if (vaoImpl == 0)
{
    throw GeoUtilsError(getErrorString(
        "OpenGL vertex array object not initialized.", "update"));
}
bind();
int k = 0;
for (VertexAttributeVector::iterator i = attributes.begin(); 
    i != attributes.end(); i++)
{
    VertexAttribute* va = *i;
    if (va != 0)
    {
        // <---- DEBUG ----- //
        std::cerr << "[VertexArrayObject::update] "
            "Enabling vertex attribute: index = " << k << ", [" 
            << va->getValueString() << "]" << std::endl;
        // ----- DEBUG ----> //
        va->enable(k);
        k++;
    }
}
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
bool e0 = true;
for (VertexAttributeVector::const_iterator i = attributes.begin(); 
    i != attributes.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "(" << (*i)->getValueString() << ")";
}
if (attributes.size() == 0)
    status << "<none>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

