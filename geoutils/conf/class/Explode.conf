# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Explode.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::Mapping::defaultStr'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<fstream>'
        '"ifmapping/utils.hpp"'
        '"geoutils/GeoUtilsError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Explode
	shortDesc = Transform node: Explode
	title = Transform node: Explode
	longDesc = Explode the contents of the input group into several output groups.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::GeoUtils::TransformNodes::TransformNode
            include = geoutils/TransformNode.hpp
        }
	}
    features = {
        'copy'
#        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = GeoUtilsError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = elementsPerGroup
	desc = Number of elements per group
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = INPUT_SOURCE
    desc = Input ID: source
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = OUTPUT_FIRST
    desc = Output ID: first
    value = 0
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_ELEMENTS_PER_GROUP
    desc = Default number of elements per group
    value = 1
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = elementsPerGroup
        value = DEFAULT_ELEMENTS_PER_GROUP
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = TransformNode
        value = nodeID
    }
    initializer[] = {
        name = elementsPerGroup
        value = initElementsPerGroup
    }
    param[] = {
        type = unsigned int
        name = initElementsPerGroup
        desc = Number of elements per group
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
        default = ""
    }
    impl = 
}

# Destructor.
#destructor.impl = 
# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = TransformNode::operator=(other);\
elementsPerGroup = other.elementsPerGroup;
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << defaultStr(id, "<unnamed>") << "; " \
    << elementsPerGroup << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = if (inputCache.size() < 1)\
    throw GeoUtilsError("Input cache is empty.");\
clearInputGroups();\
TransformableGroup* g0 = inputCache[0];\
if (elementsPerGroup == 0)\
    throw GeoUtilsError("Elements per group must be positive.");\
TransformableGroup* g1 = new TransformableGroup();\
if (g1 == 0)\
    throw GeoUtilsError("Could not allocate object.");\
g1->copyTransform(*g0);\
unsigned int numSourceItems = g0->getNumItems();\
// Insert elements from the input group to the output groups.\
for (unsigned int j = 0; j < numSourceItems; j++)\
\{\
    Ionflux::GeoUtils::TransformableObject* it0 = \
        g0->getItem(j);\
    g1->addItem(it0);\
    if (g1->getNumItems() == elementsPerGroup)\
    \{\
        // Group has the specified number of elements.\
        if (j < (numSourceItems - 1))\
        \{\
            // Add the group and create the next one.\
            addOutput(g1);\
            g1 = new TransformableGroup();\
            if (g1 == 0)\
                throw GeoUtilsError("Could not allocate object.");\
            g1->copyTransform(*g0);\
        \} else\
        \{\
            // This was the last group, add it.\
            addOutput(g1);\
            g1 = 0;\
        \}\
    \}\
\}\
if (g1 != 0)\
    addOutput(g1);
}

# operations

# Global functions.

