# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# TransformNode.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces
namespace[].name = Ionflux
namespace[].name = GeoUtils
namespace[].name = TransformNodes

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'Ionflux::GeoUtils::TransformableGroupVector'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
	    '"ifmapping/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/TransformableGroup.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
#        '"geoutils/Clock.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = TransformNode
	shortDesc = Transform node
	title = Transform node
	longDesc = Abstract base class for a node that applies some transformation to a set of input transformable groups and provides a set of output transformable groups. The transformation is initiated by calling the update() method (or the call operator) on the node. The node then queries all of its inputs for data and updates the outputs. The outputs can then be queried using the getOutput() method.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
#       'create'
        'param'
    }
    param[] = {
        type = Ionflux::Mapping::MappingValue
        name = Param
        notExistsError = GeoUtilsError("Parameter does not exist.")
    }
#   create.allocationError = GeoUtilsError("Could not allocate object.")
}

# Member variables.
variable.protected[] = {
	type = unsigned int
	name = loopCounter
	desc = Loop counter
}
variable.protected[] = {
	type = bool
	name = visited
	desc = Visited flag
}
variable.protected[] = {
	type = bool
	name = debugMode
	desc = Debug mode flag
}
variable.protected[] = {
	type = bool
	name = debugExpand
	desc = Debug expand flag
}
variable.protected[] = {
    type = Ionflux::GeoUtils::TransformableGroupVector
    name = inputCache
    desc = Input group cache
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = inputs
    desc = Vector of input node specifications
    element = {
        type = Ionflux::GeoUtils::TransformNodes::InputNodeSpec
        addType = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
        removeType = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
        name = Input
        defaultValue = DEFAULT_INPUT_NODE_SPEC
        #plural = Inputs
        ## Inputs are not managed. See the spec for an explanation.
        #managed = true
    }
    check = {
        maxSize = maxNumInputs
        sizeError = GeoUtilsError("Maximum number of inputs exceeded.")
    }
}
property.protected[] = {
    style = vector
    name = outputs
    desc = Vector of output groups
    element = {
        type = Ionflux::GeoUtils::TransformableGroup*
        name = Output
        #plural = Outputs
        managed = true
    }
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = loopMax
    desc = Maximum loop count
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = maxNumInputs
    desc = Maximum number of inputs
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = updateCounter
    desc = Update counter
}

# Public static constants.
constant.public[] = {
    type = unsigned int
    name = DEFAULT_LOOP_MAX
    desc = Default maximum loop count
    value = 10
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = loopCounter
        value = 0
    }
    initializer[] = {
        name = visited
        value = false
    }
    initializer[] = {
        name = debugMode
        value = false
    }
    initializer[] = {
        name = debugExpand
        value = false
    }
    initializer[] = {
        name = loopMax
        value = DEFAULT_LOOP_MAX
    }
    initializer[] = {
        name = maxNumInputs
        value = DEFAULT_MAX_NUM_INPUTS
    }
    initializer[] = {
        name = updateCounter
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = loopCounter
        value = 0
    }
    initializer[] = {
        name = visited
        value = false
    }
    initializer[] = {
        name = debugMode
        value = false
    }
    initializer[] = {
        name = debugExpand
        value = false
    }
    initializer[] = {
        name = loopMax
        value = DEFAULT_LOOP_MAX
    }
    initializer[] = {
        name = maxNumInputs
        value = DEFAULT_MAX_NUM_INPUTS
    }
    initializer[] = {
        name = updateCounter
        value = 0
    }
    param[] = {
        type = const Ionflux::ObjectBase::IFObjectID&
        name = nodeID
        desc = Node ID
    }
    impl = setID(nodeID);
}

# Destructor.
#destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = InputNodeSpecVector v0;\
loopMax = other.loopMax;\
/* No local references are needed since we do not manage the \
   inputs anyway. */\
for (InputNodeSpecVector::const_iterator i = other.inputs.begin(); \
    i != other.inputs.end(); i++)\
    v0.push_back(*i);\
clearInputs();\
clearOutputs();\
addInputs(v0);
function.public[] = {
	spec = virtual
	type = void
	name = addInputs
	shortDesc = Add inputs
	longDesc = Add input nodes.
	param[] = {
		type = const Ionflux::GeoUtils::InputNodeSpecVector&
		name = newInputs
		desc = Input node specifications
	}
    impl = for (InputNodeSpecVector::const_iterator i = newInputs.begin(); \
    i != newInputs.end(); i++)\
    addInput(*i);
}
function.public[] = {
	spec = virtual
	type = void
	name = getLinkedInputs
	shortDesc = Get linked inputs
	longDesc = Get all input nodes that, via some path starting from this node, are linked to the inputs of this node.
	param[] = {
		type = Ionflux::GeoUtils::TransformNodeVector&
		name = target
		desc = Target vector
	}
    impl = if (visited)\
    // There is some loop, return immediately.\
    return;\
visited = true;\
for (InputNodeSpecVector::const_iterator i = inputs.begin(); \
    i != inputs.end(); i++)\
\{\
    TransformNode* n0 = (*i).node;\
    if (n0 != 0)\
    \{\
        target.push_back(n0);\
        n0->getLinkedInputs(target);\
    \}\
\}\
visited = false;
}
function.public[] = {
	spec = virtual
	type = void
	name = setInput
	shortDesc = Set input
	longDesc = Set the input with the specified ID.
	param[] = {
		type = const Ionflux::GeoUtils::TransformNodes::InputNodeSpec&
		name = newInput
		desc = Input node specification
	}
	param[] = {
		type = unsigned int
		name = inputID
		desc = Input ID
		default = INPUT_NEXT_FREE
	}
    impl = if (inputID == INPUT_NEXT_FREE)\
    inputID = inputs.size();\
if (inputID > maxNumInputs)\
    throw GeoUtilsError("Maximum number of inputs exceeded.");\
unsigned int numInputs = inputs.size();\
for (unsigned int i = numInputs; i <= inputID; i++)\
    inputs.push_back(DEFAULT_INPUT_NODE_SPEC);\
inputs[inputID] = newInput;
}
function.public[] = {
	spec = virtual
	type = void
	name = clearInputCache
	shortDesc = Clear input group cache
	longDesc = Clear the input group cache.
    impl = for (TransformableGroupVector::iterator i = \
    inputCache.begin(); i != inputCache.end(); i++)\
\{\
    TransformableGroup* g0 = *i;\
    if (g0 != 0)\
        removeLocalRef(g0);\
\}\
inputCache.clear();
}
function.public[] = {
	spec = virtual
	type = void
	name = updateInputs
	shortDesc = Update inputs
	longDesc = Update the inputs of the node. Each input node is updated only once, no matter how many of its outputs are connected to this node.
    impl = <<<
// Determine the set of unique input nodes.
std::set<TransformNode*> is0;
for (InputNodeSpecVector::iterator i = inputs.begin(); 
    i != inputs.end(); i++)
{
    TransformNode* n0 = (*i).node;
    if (n0 != 0)
        is0.insert(n0);
    else
        throw GeoUtilsError("Input node is null.");
}
// Update the nodes.
for (std::set<TransformNode*>::iterator j = is0.begin(); 
    j != is0.end(); j++)
{
    /* <---- DEBUG ----- //
    ostringstream message;
    message << "updating node: " << (*(*j));
    log(IFLogMessage(message.str(), VL_DEBUG, this, "updateInputs"));
    // ----- DEBUG ----> */
    (*j)->update();
}
// Populate the input cache.
clearInputCache();
for (InputNodeSpecVector::iterator k = inputs.begin(); 
    k != inputs.end(); k++)
{
    TransformNode* n0 = (*k).node;
    if (n0 == 0)
        throw GeoUtilsError("Input node not set.");
    TransformableGroup* g0 = n0->getOutput((*k).outputID);
    /* <---- DEBUG ----- //
    ostringstream message;
    message << "node: " << (*n0) << ", group #" << (*k).outputID 
        << ": ";
    if (g0 != 0)
        message << (*g0);
    else
        message << "<missing>";
    log(IFLogMessage(message.str(), VL_DEBUG, this, "updateInputs"));
    // ----- DEBUG ----> */
    if (g0 == 0)
    {
        std::ostringstream message;
        message << "[Input node does not supply the specified "
            "output (node = " << (*n0) << ", outputID = " 
            << (*k).outputID << ", numOutputs = " 
            << n0->getNumOutputs() << ").";
        throw GeoUtilsError(message.str());
    }
    addLocalRef(g0);
    inputCache.push_back(g0);
}
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = clearInputGroups
	shortDesc = Clear input Groups
	longDesc = Clear the input groups, that is the output groups of the input nodes.
    impl = std::set<TransformNode*> is0;\
for (InputNodeSpecVector::iterator i = inputs.begin(); \
    i != inputs.end(); i++)\
\{\
    TransformNode* n0 = (*i).node;\
    if (n0 != 0)\
        is0.insert(n0);\
\}\
for (std::set<TransformNode*>::iterator j = is0.begin(); \
    j != is0.end(); j++)\
    (*j)->clearOutputs();
}
function.public[] = {
	spec = virtual
	type = void
	name = cleanup
	shortDesc = Clean up
	longDesc = Clean up resources created by the node during an update operation.
    impl = clearInputCache();
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update
	longDesc = Update the outputs of the node. This updates all inputs and checks the loop counter to make sure the maximum number of loop iterations is not exceeded. It clears the output groups and calls process() to do the actual processing of the inputs. Note that a transform node does not have outputs unless update() has been called and finished processing at least once. Outputs are considered a cache rather than state of the object (they are also not copied when using an assignment or copy constructor). See the spec for details.
    impl = if (loopCounter >= loopMax)\
    throw GeoUtilsError("Maximum number of loop iterations exceeded.");\
loopCounter++;\
/* <---- DEBUG ----- //\
Ionflux::GeoUtils::Clock c0;\
double inputUpdateTime = 0.;\
double outputClearTime = 0.;\
double processingTime = 0.;\
c0.start();\
// ----- DEBUG ----> */\
updateInputs();\
// NOTE: This can be enabled when all nodes use the input cache.\
//clearInputGroups();\
/* <---- DEBUG ----- //\
c0.stop();\
inputUpdateTime = c0.getElapsedTime();\
c0.start();\
// ----- DEBUG ----> */\
clearOutputs();\
/* <---- DEBUG ----- //\
c0.stop();\
outputClearTime = c0.getElapsedTime();\
c0.start();\
// ----- DEBUG ----> */\
/* <---- DEBUG ----- //\
log(IFLogMessage("Processing...", VL_DEBUG, this, "update"));\
// ----- DEBUG ----> */\
process();\
/* <---- DEBUG ----- //\
log(IFLogMessage("Finished.", VL_DEBUG, this, "update"));\
// ----- DEBUG ----> */\
/* <---- DEBUG ----- //\
c0.stop();\
processingTime = c0.getElapsedTime();\
std::ostringstream message;\
message << "inputUpdateTime = " << inputUpdateTime \
    << ", outputClearTime = " << outputClearTime \
    << ", processingTime = " << processingTime << " secs";\
log(IFLogMessage(message.str(), VL_DEBUG, this, "update"));\
// ----- DEBUG ----> */\
updateCounter++;\
loopCounter = 0;\
if (debugMode)\
    log(IFLogMessage(getDebugInfo(debugExpand), VL_DEBUG, \
        this, "update"));\
cleanup();
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream status;\
status << getClassName() << "[" << id << "]";
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getDebugInfo
	shortDesc = Get debugging information
	longDesc = Get a representation of the node and its contents that is usable for debugging.
	param[] = {
		type = bool
		name = expand
		desc = Display information about non-group items
		default = true
	}
    impl = ostringstream result;\
result << getString() << ": numInputs = " << inputs.size() \
    << ", numOutputs = " << outputs.size() << ", loopCounter = " \
    << loopCounter << ", updateCounter = " << updateCounter << "\n";\
result << "Inputs:";\
for (Ionflux::GeoUtils::InputNodeSpecVector::iterator i = \
    inputs.begin(); i != inputs.end(); i++)\
\{\
    result << "\n";\
    TransformNode* n0 = (*i).node;\
    if (n0 != 0)\
    \{\
        result << "  " << (*n0) << "\n";\
        TransformableGroup* o0 = n0->getOutput((*i).outputID);\
        if (o0 != 0)\
            result << o0->getDebugInfo(expand, 2);\
        else\
            result << "<not available>";\
    \}\
\}\
result << "\nInputs (cached):";\
for (Ionflux::GeoUtils::TransformableGroupVector::iterator k = \
    inputCache.begin(); k != inputCache.end(); k++)\
\{\
    result << "\n";\
    TransformableGroup* o0 = *k;\
    if (o0 == 0)\
    \{\
        std::ostringstream message;\
        message << "Input group missing.";\
        throw GeoUtilsError(message.str());\
    \}\
    result << o0->getDebugInfo(expand, 2);\
\}\
result << "\nOutputs:";\
for (unsigned int j = 0; j < outputs.size(); j++)\
\{\
    result << "\n";\
    TransformableGroup* g0 = outputs[j];\
    if (g0 != 0)\
        result << g0->getDebugInfo(expand, 2);\
    else\
        result << "  <null>";\
\}
    return = {
        value = result.str()
        desc = Debugging information
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = enableDebugMode
	shortDesc = Enable debug mode
	longDesc = Enable (or disable) the debug mode, which provides useful information for debugging on an update() call.
	param[] = {
	    type = bool
	    name = newDebugMode
	    desc = Debug mode flag
	    default = true
	}
	param[] = {
	    type = bool
	    name = expand
	    desc = Show information about non-group items.
	    default = false
	}
	impl = debugMode = newDebugMode;\
debugExpand = expand;
}

# Pure virtual member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = process
    #pureVirtual = true
	shortDesc = Process inputs
	longDesc = Update the outputs of the node by processing the inputs. This should be implemented by derived classes.
    impl = 
}

# operations

# Global functions.

