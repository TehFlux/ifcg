# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2009-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Vertex3.conf              Class configuration.
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifobject/types.hpp"'
        '"geoutils/types.hpp"'
        '"geoutils/constants.hpp"'
        '"geoutils/utils.hpp"'
        '"geoutils/Vector3.hpp"'
        '"geoutils/Matrix3.hpp"'
        '"geoutils/Matrix4.hpp"'
        '"geoutils/Vertex3Set.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"geoutils/GeoUtilsError.hpp"'
        '"geoutils/LinearInterpolator.hpp"'
        '"geoutils/Plane3.hpp"'
        '"geoutils/Vector4.hpp"'
    }
}

# forward declarations
forward = {
    'class Interpolator'
    'class Plane3'
    'class Vertex3'
}

# undefine macros

## typedefs
#typedef = {
#}

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Vertex3
	shortDesc = Vertex (3D)
	title = Vertex (3D)
	longDesc = A vertex in three-dimensional space.
	group.name = geoutils
    base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
			name = Ionflux::GeoUtils::TransformableObject
            include = geoutils/TransformableObject.hpp
            xml = {
                enabled = true
                getFunc = getTransformableObject
                include = geoutils/TransformableObject
            }
		}
    }
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        'xmlio'
    }
    create = {
        extendedCreate = true
        allocationError = GeoUtilsError("Could not allocate object.")
    }
    xml.elementName = vert3
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    initializer[] = {
        name = z
        value = 0.
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = initX
    }
    initializer[] = {
        name = y
        value = initY
    }
    initializer[] = {
        name = z
        value = initZ
    }
    param[] = {
        name = initX
        type = double
        desc = Element (X)
    }
    param[] = {
        name = initY
        type = double
        desc = Element (Y)
    }
    param[] = {
        name = initZ
        type = double
        desc = Element (Z)
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    initializer[] = {
        name = z
        value = 0.
    }
    param[] = {
        name = initCoords
        type = const Ionflux::ObjectBase::DoubleVector&
        desc = Coordinate vector
    }
    impl = setCoords(initCoords);
}
constructor.public[] = {
    initializer[] = {
        name = x
        value = 0.
    }
    initializer[] = {
        name = y
        value = 0.
    }
    initializer[] = {
        name = z
        value = 0.
    }
    param[] = {
        name = initCoords
        type = const Ionflux::GeoUtils::Vector3&
        desc = Coordinate vector
    }
    impl = setCoords(initCoords);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = x
	desc = X coordinate
#    copy = true
#    proxy = true
    valueType = float
    xml.attribute.name = x
}
property.protected[] = {
	type = double
	setFromType = double
	name = y
	desc = Y coordinate
#    copy = true
#    proxy = true
    valueType = float
    xml.attribute.name = y
}
property.protected[] = {
	type = double
	setFromType = double
	name = z
	desc = Z coordinate
#    copy = true
#    proxy = true
    valueType = float
    xml.attribute.name = z
}

# Public static constants.
constant.public[] = {
    desc = Origin
    type = Ionflux::GeoUtils::Vertex3
    name = ORIGIN
    value = Ionflux::GeoUtils::Vertex3(0., 0., 0.)
}

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
TransformableObject::operator=(other);
x = other.x;
y = other.y;
z = other.z;
>>>
function.xml = {
    attributeData.impl = <<<
std::string a0(Ionflux::ObjectBase::IFObject::getXMLAttributeData());
std::ostringstream d0;
if (a0.size() > 0)
    d0 << a0 << " ";
d0 << "d=\\"" << x << "," << y << "," << z << "\\"";
return d0.str();
>>>
    fromXML.impl = <<<
Ionflux::ObjectBase::XMLUtils::checkElementNameOrError(e0, 
    elementName, "getVertex3");
getTransformableObject(e0, target, elementName);
// Get element attribute data.
std::string a0;
a0 = Ionflux::ObjectBase::XMLUtils::getAttributeValue(
    e0, "d", true);
Ionflux::ObjectBase::DoubleVector dv0;
Ionflux::ObjectBase::vectorFromList(a0, dv0);
target.setCoords(dv0);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates.
    param[] = {
        name = newX
        type = double
        desc = Element (X)
    }
    param[] = {
        name = newY
        type = double
        desc = Element (Y)
    }
    param[] = {
        name = newZ
        type = double
        desc = Element (Z)
    }
    impl = x = newX;\
y = newY;\
z = newZ;
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates from a vector of doubles. If the vector contains fewer than the required number of coordinates, the remaining coordinates will be left alone.
	param[] = {
		type = const Ionflux::ObjectBase::DoubleVector&
		name = newCoords
		desc = Coordinate vector
	}
    impl = <<<
if (newCoords.size() == 0)
    return;
if (newCoords.size() >= 3)
    z = newCoords[2];
if (newCoords.size() >= 2)
    y = newCoords[1];
x = newCoords[0];
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoords
	shortDesc = Set coordinates
	longDesc = Set coordinates from a vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = newCoords
		desc = Coordinate vector
	}
    impl = <<<
x = newCoords.getX0();
y = newCoords.getX1();
z = newCoords.getX2();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getCoords
    const = true
	shortDesc = Get coordinates
	longDesc = Store the coordinates of the vertex in a vector of doubles.
	param[] = {
		type = Ionflux::ObjectBase::DoubleVector&
		name = target
		desc = Target vector
	}
    impl = <<<
target.clear();
target.push_back(x);
target.push_back(y);
target.push_back(z);
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = getCoords
    const = true
	shortDesc = Get coordinates
	longDesc = Store the coordinates of the vertex in a vector.
	param[] = {
		type = Ionflux::GeoUtils::Vector3&
		name = target
		desc = Target vector
	}
    impl = <<<
target.setX0(x);
target.setX1(y);
target.setX2(z);
>>>
}
function.public[] = {
	spec = virtual
	type = double
	name = getCoord
    const = true
	shortDesc = Get coordinate
	longDesc = Get the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = 
    return = {
        value = (*this)[index];
        desc = Element at the specified index
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getVector
    const = true
	shortDesc = Get coordinates as vector
	longDesc = Get the coordinates of the vertex as a vector.
    impl = 
    return = {
        desc = Vector
        value = Vector3(x, y, z)
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setCoord
	shortDesc = Set coordinate
	longDesc = Set the coordinate with the specified index.
	param[] = {
		type = int
		name = index
		desc = Index
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = <<<
if ((index < 0) || (index > 3))
{
    ostringstream message;
    message << "Index out of range: " << index;
    throw GeoUtilsError(getErrorString(message.str(), "setCoord"));
}
if (index == 0)
    x = value;
else 
if (index == 1)
    y = value;
else 
if (index == 2)
    z = value;
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3
	name = interpolate
    const = true
	shortDesc = Interpolate vertices
	longDesc = Interpolate the vertex coordinates and the coordinates of the other vertex using the specified parameter.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex3&
		name = other
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Parameter
	}
	param[] = {
		type = Ionflux::GeoUtils::Interpolator*
		name = interpolator
		desc = Interpolator
        default = 0
	}
    impl = <<<
Vertex3 result;
Interpolator* i0 = 0;
if (interpolator == 0)
{
    i0 = LinearInterpolator::create();
    addLocalRef(i0);
    interpolator = i0;
}
interpolator->setValues(x, other.x);
result.setX((*interpolator)(t));
interpolator->setValues(y, other.y);
result.setY((*interpolator)(t));
interpolator->setValues(z, other.z);
result.setZ((*interpolator)(t));
if (i0 != 0)
    removeLocalRef(i0);
>>>
    return = {
        value = result
        desc = Interpolated vertex
    }
}
function.public[] = {
	spec = virtual
	type = double
	name = distanceToPlane
    const = true
	shortDesc = Calculate distance to plane
	longDesc = Returns the distance of the vertex to the specified plane.
	param[] = {
		type = const Ionflux::GeoUtils::Plane3&
		name = plane
		desc = Plane
	}
    impl = 
    return = {
        value = getVector().distanceToPlane(plane)
        desc = Distance to plane
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = eq
	shortDesc = Comparison (with tolerance): equal
	longDesc = Compare the vector with another vector using the specified tolerance.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex3&
		name = other
		desc = Vertex
	}
	param[] = {
		type = double
		name = t
		desc = Tolerance
        default = Ionflux::GeoUtils::DEFAULT_TOLERANCE
	}
    impl = <<<
if (!(Ionflux::GeoUtils::eq(x, other.x, t) 
    && Ionflux::GeoUtils::eq(y, other.y, t) 
    && Ionflux::GeoUtils::eq(z, other.z, t)))
        return false;
>>>
    return = {
        value = true
        desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex3&
		name = other
		desc = Vertex3
	}
    impl = if (!((x == other.x) && (y == other.y) && (z == other.z)))\
        return false;
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::GeoUtils::Vertex3&
		name = other
		desc = Vertex
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = double
	name = operator[]
	const = true
	shortDesc = Subscript operator
	longDesc = Subscript operator.
	param[] = {
		type = int
		name = index
		desc = Index
	}
    impl = <<<
if ((index < 0) || (index > 3))
{
    std::ostringstream message;
    message << "Index out of range: " << index;
    throw GeoUtilsError(getErrorString(message.str(), 
        "operator[]"));
}
double result = 0.;
if (index == 0)
    result = x;
if (index == 1)
    result = y;
if (index == 2)
    result = z;
>>>
	return = {
        value = result
        desc = Element at specified index
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = scale
	shortDesc = Scale
	longDesc = Scale the object by the specified scale factors.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = s
		desc = Vector of scale factors
	}
    impl = TransformableObject::scale(s);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = translate
	shortDesc = Translate
	longDesc = Translate the object by the specified vector.
	param[] = {
		type = const Ionflux::GeoUtils::Vector3&
		name = t
		desc = Translation vector
	}
    impl = TransformableObject::translate(t);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the object by the specified angle around the specified axis.
	param[] = {
		type = double
		name = phi
		desc = Angle
	}
	param[] = {
		type = Ionflux::GeoUtils::AxisID
		name = axis
		desc = Axis
        default = Ionflux::GeoUtils::AXIS_Z
	}
    impl = TransformableObject::rotate(phi, axis);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = normalize
	shortDesc = Normalize
	longDesc = Normalize the object, i.e. scale to unit size.
    impl = TransformableObject::normalize();
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = center
	shortDesc = Center
	longDesc = Center the object using the specified method and origin vector.
	param[] = {
		type = Ionflux::GeoUtils::CenteringMethod
		name = method
		desc = Centering method
        default = Ionflux::GeoUtils::CENTER_BARYCENTER
	}
	param[] = {
		type = Ionflux::GeoUtils::Vector3*
		name = origin
		desc = Origin or offset vector
        default = 0
	}
    impl = TransformableObject::center(method, origin);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object.
	param[] = {
		type = const Ionflux::GeoUtils::Matrix3&
		name = matrix
		desc = Transformation matrix
	}
    impl = TransformableObject::transform(matrix);
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vector3
	name = getBarycenter
	shortDesc = Get barycenter
	longDesc = Get the barycenter vector for the vertices in the set.
	impl = 
    return = {
        value = getVector()
        desc = Barycenter vector
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Range3
	name = getBounds
	shortDesc = Get bounds
	longDesc = Get the bounds for the vertex set.
	impl = 
    return = {
        value = Range3(getVector())
        desc = Bounds
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = applyTransform
	shortDesc = Apply transformations
	longDesc = Apply transformations that have been accumulated in the transformation matrices.
	param[] = {
	    type = bool
	    name = recursive
	    desc = Apply transformations recursively
	    default = false
	}
    impl = <<<
if (useTransform())
    transform(*getTransformMatrix());
if (useVI())
    transformVI(*getViewMatrix(), getImageMatrix());
TransformableObject::clear();
>>>
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = transform
	shortDesc = Matrix transformation
	longDesc = Apply a transformation matrix to the object. Note that this applies the transformation immediately to the vertex coordinates. For deferred transformations, use setTransformMatrix() in conjunction with applyTransform().
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = matrix
		desc = Transformation matrix
	}
    impl = <<<
Vector4 t0(getVector());
t0 = matrix * t0;
setCoords(t0.getV3());
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = transformVI
	shortDesc = View/image transformation
	longDesc = Apply a view transformation matrix and an optional image transformation matrix to the object. Note that this applies the transformation immediately to the vertex coordinates. For deferred transformations, use setViewMatrix() and setImageMatrix() in conjunction with applyTransform().
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4&
		name = view
		desc = View transformation matrix
	}
	param[] = {
		type = const Ionflux::GeoUtils::Matrix4*
		name = image
		desc = Image transformation matrix
        default = 0
	}
    impl = <<<
Vector4 t0(getVector());
t0 = view * t0;
t0 = t0 / t0[3];
if (image != 0)
    t0 = (*image) * t0;
setCoords(t0.getV3());
>>>
    return = {
        value = *this
        desc = The transformed object
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::GeoUtils::Vertex3&
	name = duplicate
	shortDesc = Duplicate
	longDesc = Create an exact duplicate of the object. The duplicate is a new object which must be managed by the caller.
    impl = 
    return = {
        value = *copy()
        desc = The duplicated object
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object
	impl = <<<
std::ostringstream status;
status << x << ", " << y << ", " << z;
// transformable object data
std::string ts0(TransformableObject::getValueString());
if (ts0.size() > 0)
    status << "; " << ts0;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Legacy functions.
function.public[] = {
	spec = virtual
	type = std::string
	name = getXMLData_legacy
	const = true
	shortDesc = Get XML data representation
	longDesc = Get a representation of the object suitable for use in an XML data attribute.
	impl = ostringstream d0;\
d0 << x << "," << y << "," << z;
    return = {
        value = d0.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getXML_legacy
	const = true
	shortDesc = Get XML representation
	longDesc = Get an XML representation of the object.
	impl = ostringstream d0;\
d0 << "<v3 d=\"" << getXMLData_legacy() << "\" />";
    return = {
        value = d0.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

