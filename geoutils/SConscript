#!/usr/bin/python
# -*- coding: utf-8 -*-
# ==========================================================================
# GeoUtils - Ionflux' Geometry Library
# Copyright © 2010-2013 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# SConscript                  SCons build script
# ==========================================================================
# 
# This file is part of GeoUtils - Ionflux' Geometry Library.
# 
# GeoUtils - Ionflux' Geometry Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# GeoUtils - Ionflux' Geometry Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GeoUtils - Ionflux' Geometry Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
 
# ==========================================================================
import os, subprocess, shutil, shlex, string, copy, re, sys

# Create a default local configuration file if it does not exist.
if (not os.path.isfile('site_scons/local_config.py')):
    shutil.copy('site_scons/local_config.py.default', 
        'site_scons/local_config.py')

import local_config as lc
from sources import *
from builders import buildSource, buildClassInterface, buildInterface
from builders import buildClassXMLFactory

Help("""
Type 'scons' to build the default targets.
Type 'scons install' to install to default location.
Type 'scons <target>' to build a specific target.

You can add local configuration to site_scons/local_config.py.

Targets:
  (default)                    Everything.
  all                          Everything
  libs                         Shared libraries.
  programs                     Programs.
  tests                        Test programs.
  sources                      Source files (requires ifclassgen).
  interfaces                   SWIG interface declarations (requires iftpl).
  xmlio                        XML I/O functions.
  pymodule                     Python module.
  install                      Install headers, libraries and programs.

Options:
  prefix=<target directory>    Installation prefix
                               (default: /usr/local)
  debug=<yes|no>               Whether to use debug compiler flags 
                               (default: yes)
""")

env0 = os.environ
env0['PATH'] += (':' + lc.PATH)

env = Environment(ENV = env0, 
    CPPPATH = ['include', 'swig/include'] + lc.CPPPATH, 
    LIBPATH = ['lib'] + lc.LIBPATH)
env.MergeFlags(['-Wall', '-Wno-deprecated', '-O2', '-std=c++11'])

if (hasattr(lc, 'debug') and lc.debug):
    debugDefault = 'yes'
else:
    debugDefault = 'no'
if (ARGUMENTS.get('debug', debugDefault) == 'yes'):
    env.Append(CCFLAGS = '-g')

geoutilsEnv = env.Clone()

if (hasattr(lc, 'prefix')):
    defaultPrefix = lc.prefix
else:
    defaultPrefix = '/usr/local'
prefix = ARGUMENTS.get('prefix', defaultPrefix)

geoutilsEnv.VariantDir('build', 'src')
geoutilsEnv.VariantDir('build/test', 'test')
geoutilsEnv.VariantDir('build/swig/wrapper', 'swig/wrapper')

def checkProgram(ctx, cmd):
    """Check for installed program."""
    ctx.Message('Checking for ' + cmd + '... ')
    try:
        subprocess.call(cmd, stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

def checkPkgConfig(ctx, pkg):
    """Check for package using pkg-config."""
    ctx.Message('Checking for ' + pkg + '... ')
    cmd = "pkg-config --cflags " + pkg
    try:
        p0 = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT)
        d = p0.stdout.read()
        if (d.find('was not found') != -1):
            result = 0
        else:
            ctx.sconf.env.MergeFlags('!' + cmd)
            result = 1
    except Exception:
        result = 0
    ctx.Result(result)
    return result

configEnv = geoutilsEnv.Clone()
configEnv.Append(LIBS = ['dl'])
configEnv.MergeFlags(['-std=c++11'])
config = configEnv.Configure(custom_tests = { 
    "CheckProgram" : checkProgram, 
    "CheckPkgConfig" : checkPkgConfig })

missingDeps = []
if (not config.CheckPkgConfig("sigc++-2.0")):
    missingDeps += ['sigc++']
else:
    geoutilsEnv.MergeFlags(['!pkg-config --cflags --libs sigc++-2.0'])
if (not config.CheckPkgConfig("gsl")):
    missingDeps += ['gsl']
if (not config.CheckLibWithHeader("ifobject", "ifobject/IFObject.hpp", 
    'C++', autoadd = 0)):
    missingDeps += ['ifobject']
if (not config.CheckLibWithHeader("ifmapping", "ifmapping/ifmapping.hpp", 
    'C++', autoadd = 0)):
    missingDeps += ['ifmapping']

if (len(missingDeps) > 0):
    print "***********************************************************"
    print "GeoUtils cannot be built because the following dependencies"
    print "were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "***********************************************************"
    Exit(1)

buildAltjiraGeoUtils = True
missingDeps = []
if (not config.CheckPkgConfig("gdk-pixbuf-2.0")):
    missingDeps += ['gdk-pixbuf-2.0']
if (not config.CheckPkgConfig("cairo")):
    missingDeps += ['cairo']
if (not config.CheckPkgConfig("librsvg-2.0")):
    missingDeps += ['rsvg']
if (not config.CheckLibWithHeader("altjira", "altjira/altjira.hpp", 'C++', 
    autoadd = 0)):
    missingDeps += ['altjira']

if (len(missingDeps) > 0):
    print "********************************************************"
    print "Altjira/GeoUtils will NOT be built because the following "
    print "dependencies were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "********************************************************"
    buildAltjiraGeoUtils = False

buildGeoUtilsFBX = True
missingDeps = []
if (not config.CheckLibWithHeader("fbxsdk", "fbxsdk.h", 
    'C++', autoadd = 0)):
    missingDeps += ['fbxsdk']

if (len(missingDeps) > 0):
    print "********************************************************"
    print "GeoUtils/FBX will NOT be built because the following "
    print "dependencies were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "********************************************************"
    buildGeoUtilsFBX = False

missingDeps = []
buildGeoUtilsGL = True
if (not config.CheckLibWithHeader("glfw", "GLFW/glfw3.h", 'C', 
    autoadd = 0)):
    missingDeps += ["GLFW"]
if (not config.CheckLibWithHeader("GL", "GL/gl.h", 'C', autoadd = 0)):
    missingDeps += ["OpenGL"]
if (not config.CheckLibWithHeader("glut", "GL/glut.h", 'C', autoadd = 0)):
    missingDeps += ["GLUT"]
if (not config.CheckLibWithHeader("glad", "glad/glad.h", 'C', autoadd = 0)):
    missingDeps += ["glad"]

if (len(missingDeps) > 0):
    print "********************************************************"
    print "GeoUtils/GL will NOT be built because the following "
    print "dependencies were not found:"
    print " "
    for it in missingDeps:
        print "  " + it
    print " "
    print "********************************************************"
    buildGeoUtilsGL = False

buildPyModule = True
if (not config.CheckLibWithHeader("python" + lc.pythonVersion, 
    "Python.h", 'C', autoadd = 0)):
    print "***************************************************"
    print "Python not found - Python modules will NOT be built!"
    print "***************************************************"
    buildPyModule = False

haveIFClassgen = True
if (not config.CheckProgram("ifclassgen0")):
    haveIFClassgen = False
haveIFTpl = True
if (not config.CheckProgram("iftpl0")):
    haveIFTpl = False
haveSWIG = True
if (not config.CheckProgram("swig")):
    print "*************************************************"
    print "SWIG not found - Python module will NOT be built!"
    print "*************************************************"
    haveSWIG = False
    buildPyModule = False

geoutilsEnv = config.Finish()

sourceBuilder = Builder(action = buildSource)
classInterfaceBuilder = Builder(action = buildClassInterface)
interfaceBuilder = Builder(action = buildInterface)
swigIncludes = ''
for it in geoutilsEnv['CPPPATH']:
    swigIncludes += ('-I' + it + ' ')
swigPythonBuilder = Builder(action = "swig -c++ -python "
    + swigIncludes + "-outdir swig/python -o $TARGET $SOURCE")
classXMLFactoryBuilder = Builder(action = buildClassXMLFactory)

geoutilsEnv.Append(BUILDERS = { 
    'Source' : sourceBuilder, 
    'ClassInterface' : classInterfaceBuilder, 
    'Interface' : interfaceBuilder, 
    'SWIGPython' : swigPythonBuilder, 
    'ClassXMLFactory' : classXMLFactoryBuilder
})

altjiraGeoUtilsEnv = geoutilsEnv.Clone()
if (buildAltjiraGeoUtils):
    altjiraGeoUtilsEnv.MergeFlags([
        '!pkg-config --cflags --libs gdk-pixbuf-2.0', 
        '!pkg-config --cflags --libs cairo', 
        '!pkg-config --cflags --libs librsvg-2.0'])

fbxGeoUtilsEnv = geoutilsEnv.Clone()
if (buildGeoUtilsFBX):
    fbxGeoUtilsEnv.Append(LIBS = ['fbxsdk'])

glGeoUtilsEnv = geoutilsEnv.Clone()
if (buildGeoUtilsGL):
    glGeoUtilsEnv.Append(LIBS = ['glfw', 'GL', 'glut', 'glad'])

allClasses = (geoutilsLibClasses + altjiraGeoUtilsLibClasses 
    + fbxGeoUtilsLibClasses + glGeoUtilsLibClasses)
allTargets = []

# Source files.
if (haveIFClassgen):
    sources = []
    for it in allClasses:
        sources += [ 
            geoutilsEnv.Source(target = [
                    'include/geoutils/' + it + '.hpp', 
                    'src/' + it + '.cpp'], 
                source = ['conf/class/' + it + '.conf'])
        ]
    allTargets += sources
else:
    print "**********************************************************"
    print "ifclassgen not found - source files will NOT be generated!"
    print "**********************************************************"

# XML object factory configuration files.
if (haveIFTpl):
    classXMLFactory = []
    # geoutils library
    for it in geoutilsLibXMLClasses:
        t0 = 'conf/class/xmlio/' + it + 'XMLFactory.conf'
        classXMLFactory += [
            geoutilsEnv.ClassXMLFactory(target = t0, 
                source = ['conf/class/' + it + '.conf']), 
        ]
    ## Altjira/GeoUtils library
    # Nothing here.
    # GeoUtils/FBX library
    for it in fbxGeoUtilsLibXMLClasses:
        t0 = 'conf/class/xmlio/' + it + 'XMLFactory.conf'
        classXMLFactory += [
            geoutilsEnv.ClassXMLFactory(target = t0, 
                source = ['conf/class/' + it + '.conf']), 
        ]
    ## GeoUtils/GL library
    # Nothing here.
    allTargets += classXMLFactory
else:
    print "***********************************************************"
    print "iftpl not found -  XML factory configuration files will NOT "
    print "be generated!"
    print "***********************************************************"

# XML object factory source files.
xmlFactoryHeaders = []
if (haveIFClassgen):
    xmlFactorySources = []
    # geoutils library
    for it in geoutilsLibXMLClasses:
        t0 = 'include/geoutils/xmlio/' + it + 'XMLFactory.hpp'
        t1 = 'src/xmlio/' + it + 'XMLFactory.cpp'
        xmlFactorySources += [ 
            geoutilsEnv.Source(target = [ t0, t1 ], 
                source = ['conf/class/xmlio/' + it + 'XMLFactory.conf'])
        ]
        xmlFactoryHeaders += [t0]
        geoutilsLibSources += [ 'build/xmlio/' + it + 'XMLFactory.cpp' ]
    # GeoUtils/FBX library
    for it in fbxGeoUtilsLibXMLClasses:
        t0 = 'include/geoutils/xmlio/' + it + 'XMLFactory.hpp'
        t1 = 'src/xmlio/' + it + 'XMLFactory.cpp'
        xmlFactorySources += [ 
            geoutilsEnv.Source(target = [ t0, t1 ], 
                source = ['conf/class/xmlio/' + it + 'XMLFactory.conf'])
        ]
        xmlFactoryHeaders += [t0]
        fbxGeoUtilsLibSources += [ 'build/xmlio/' + it + 'XMLFactory.cpp' ]
    allTargets += xmlFactorySources
else:
    print "**********************************************************"
    print "ifclassgen not found - XML factory source files will NOT "
    print "be generated!"
    print "**********************************************************"

# Interface declarations.
if (haveIFTpl):
    interfaces = []
    classInterfaces = []
    # GeoUtils library: classes
    interfaceTargets = []
    for it in geoutilsLibClasses:
        t0 = 'swig/classes/' + it + '.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            geoutilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/' + it + '.conf'])
        ]
    # GeoUtils library; XML object factories
    for it in geoutilsLibXMLClasses:
        t0 = 'swig/classes/xmlio/' + it + 'XMLFactory.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            geoutilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/xmlio/' + it + 'XMLFactory.conf'])
        ]
    interfaces += [ geoutilsEnv.Interface(target = lc.swigInterfaceFile[0], 
        source = interfaceTargets + [lc.swigInterfaceTemplateFile[0]]) ]
    # Altjira/GeoUtils library: classes
    interfaceTargets = []
    for it in altjiraGeoUtilsLibClasses:
        t0 = 'swig/classes/' + it + '.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            altjiraGeoUtilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/' + it + '.conf'])
        ]
    interfaces += [ altjiraGeoUtilsEnv.Interface(
        target = lc.swigInterfaceFile[1], 
        source = interfaceTargets + [lc.swigInterfaceTemplateFile[1]]) ]
    # GeoUtils/FBX library: classes
    interfaceTargets = []
    for it in fbxGeoUtilsLibClasses:
        t0 = 'swig/classes/' + it + '.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            fbxGeoUtilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/' + it + '.conf'])
        ]
    # GeoUtils/FBX library; XML object factories
    for it in fbxGeoUtilsLibXMLClasses:
        t0 = 'swig/classes/xmlio/' + it + 'XMLFactory.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            geoutilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/xmlio/' + it + 'XMLFactory.conf'])
        ]
    interfaces += [ fbxGeoUtilsEnv.Interface(
        target = lc.swigInterfaceFile[2], 
        source = interfaceTargets + [lc.swigInterfaceTemplateFile[2]]) ]
    # GeoUtils/GL library: classes
    interfaceTargets = []
    for it in glGeoUtilsLibClasses:
        t0 = 'swig/classes/' + it + '.i'
        interfaceTargets += [t0]
        classInterfaces += [ 
            glGeoUtilsEnv.ClassInterface(target = [ t0 ], 
                source = ['conf/class/' + it + '.conf'])
        ]
    interfaces += [ glGeoUtilsEnv.Interface(
        target = lc.swigInterfaceFile[3], 
        source = interfaceTargets + [lc.swigInterfaceTemplateFile[3]]) ]
    allTargets += (classInterfaces + interfaces)
else:
    print "****************************************************************"
    print "iftpl not found -  Interface declarations will NOT be generated!"
    print "****************************************************************"

# geoutils shared library
geoutilsLibEnv = geoutilsEnv.Clone()
geoutilsLibEnv.Append(LIBS = ['ifobject', 'tinyxml', 'ifmapping'])
geoutilsLibEnv.MergeFlags(['!pkg-config --cflags --libs gsl'])
geoutilsLib = geoutilsLibEnv.SharedLibrary(target = "lib/geoutils", 
    source = geoutilsLibSources)

# Altjira/GeoUtils shared library
altjiraGeoUtilsLibEnv = altjiraGeoUtilsEnv.Clone()
altjiraGeoUtilsLibEnv.Append(LIBS = ['ifobject', 'tinyxml', 'ifmapping', 
    'altjira', 'altjiradraw', 'geoutils'])
altjiraGeoUtilsLib = altjiraGeoUtilsLibEnv.SharedLibrary(
    target = "lib/altjirageoutils", 
    source = altjiraGeoUtilsLibSources)

# GeoUtils/FBX shared library
fbxGeoUtilsLibEnv = fbxGeoUtilsEnv.Clone()
fbxGeoUtilsLibEnv.Append(LIBS = ['ifobject', 'tinyxml', 
    'ifmapping', 'geoutils'])
fbxGeoUtilsLib = fbxGeoUtilsLibEnv.SharedLibrary(
    target = "lib/geoutilsfbx", 
    source = fbxGeoUtilsLibSources)

# GeoUtils/GL shared library
glGeoUtilsLibEnv = glGeoUtilsEnv.Clone()
glGeoUtilsLibEnv.Append(LIBS = ['ifobject', 'tinyxml', 
    'ifmapping', 'altjira', 'altjiradraw', 'geoutils', 'altjirageoutils'])
glGeoUtilsLib = glGeoUtilsLibEnv.SharedLibrary(
    target = "lib/geoutilsgl", 
    source = glGeoUtilsLibSources)

targetLibs = [geoutilsLib]
if (buildAltjiraGeoUtils):
    targetLibs += [altjiraGeoUtilsLib]
if (buildGeoUtilsFBX):
    targetLibs += [fbxGeoUtilsLib]
if (buildGeoUtilsGL):
    targetLibs += [glGeoUtilsLib]

# programs.
targetBins = []

# tests
testEnv = geoutilsEnv.Clone()
testEnv.Append(LIBS = ['ifobject', 'geoutils', 'altjirageoutils', 'tinyxml'], 
    CPPPATH = ['test/include', '.'])

cgeoutilstest14Bin = testEnv.Program('test/bin/cgeoutilstest14', 
	['build/test/cgeoutilstest14.cpp'])

targetTests = [cgeoutilstest14Bin]

# geoutils Python module.
geoutilsWrapper = geoutilsEnv.SWIGPython(target = [ 
        'swig/wrapper/geoutils_wrap.cpp', 'swig/python/CGeoUtils.py'], 
    source = lc.swigInterfaceFile[0])

geoutilsPyModuleEnv = geoutilsEnv.Clone()
geoutilsPyModuleEnv.Append(LIBS = ['geoutils', 'python' + lc.pythonVersion])
if (sys.platform == 'darwin'):
    geoutilsPyModuleEnv.Append(LIBS = ['ifobject', 'ifmapping'])

geoutilsPyModule = geoutilsPyModuleEnv.SharedLibrary(
    target = 'swig/python/_CGeoUtils', 
    source = 'build/swig/wrapper/geoutils_wrap.cpp', 
    SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

# Altjira/GeoUtils Python module.
altjiraGeoUtilsWrapper = altjiraGeoUtilsEnv.SWIGPython(target = [ 
        'swig/wrapper/altjirageoutils_wrap.cpp', 'swig/python/AltjiraGeoUtils.py'], 
    source = lc.swigInterfaceFile[1])

altjiraGeoUtilsPyModuleEnv = altjiraGeoUtilsEnv.Clone()
altjiraGeoUtilsPyModuleEnv.Append(LIBS = ['geoutils', 'altjira', 
    'altjirageoutils', 'python' + lc.pythonVersion])
if (sys.platform == 'darwin'):
    altjiraGeoUtilsPyModuleEnv.Append(LIBS = ['ifobject', 'ifmapping'])

altjiraGeoUtilsPyModule = altjiraGeoUtilsPyModuleEnv.SharedLibrary(
    target = 'swig/python/_AltjiraGeoUtils', 
    source = 'build/swig/wrapper/altjirageoutils_wrap.cpp', 
    SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

# GeoUtils/FBX Python module.
fbxGeoUtilsWrapper = fbxGeoUtilsEnv.SWIGPython(target = [ 
        'swig/wrapper/geoutilsfbx_wrap.cpp', 
        'swig/python/GeoUtilsFBX.py'], 
    source = lc.swigInterfaceFile[2])

fbxGeoUtilsPyModuleEnv = fbxGeoUtilsEnv.Clone()
fbxGeoUtilsPyModuleEnv.Append(LIBS = ['ifobject', 'ifmapping', 
    'geoutils', 'geoutilsfbx', 'python' + lc.pythonVersion])

fbxGeoUtilsPyModule = fbxGeoUtilsPyModuleEnv.SharedLibrary(
    target = 'swig/python/_GeoUtilsFBX', 
    source = 'build/swig/wrapper/geoutilsfbx_wrap.cpp', 
    SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

# GeoUtils/GL Python module.
glGeoUtilsWrapper = glGeoUtilsEnv.SWIGPython(target = [ 
        'swig/wrapper/geoutilsgl_wrap.cpp', 
        'swig/python/GeoUtilsGL.py'], 
    source = lc.swigInterfaceFile[3])

glGeoUtilsPyModuleEnv = glGeoUtilsEnv.Clone()
glGeoUtilsPyModuleEnv.Append(LIBS = ['ifobject', 'ifmapping', 'altjira', 
    'geoutils', 'geoutilsgl', 'python' + lc.pythonVersion])

glGeoUtilsPyModule = glGeoUtilsPyModuleEnv.SharedLibrary(
    target = 'swig/python/_GeoUtilsGL', 
    source = 'build/swig/wrapper/geoutilsgl_wrap.cpp', 
    SHLIBPREFIX = '', SHLIBSUFFIX = '.so')

pyWrappers = [geoutilsWrapper]
pyModules = [geoutilsPyModule]
if (buildAltjiraGeoUtils):
    pyWrappers += [altjiraGeoUtilsWrapper]
    pyModules += [altjiraGeoUtilsPyModule]
if (buildGeoUtilsFBX):
    pyWrappers += [fbxGeoUtilsWrapper]
    pyModules += [fbxGeoUtilsPyModule]
if (buildGeoUtilsGL):
    pyWrappers += [glGeoUtilsWrapper]
    pyModules += [glGeoUtilsPyModule]

allHeaders = geoutilsLibHeaders + lc.swigInterfaceFile
if (buildAltjiraGeoUtils):
    allHeaders += fbxGeoUtilsLibHeaders
if (buildGeoUtilsFBX):
    allHeaders += fbxGeoUtilsLibHeaders
if (buildGeoUtilsGL):
    allHeaders += glGeoUtilsLibHeaders

installBinTargets = [targetBins]

installHeaders = geoutilsEnv.Install(prefix + '/include/' + lc.baseName, 
    allHeaders)
installXMLFactoryHeaders = geoutilsEnv.Install(
    prefix + '/include/xmlio/' + lc.baseName, 
    xmlFactoryHeaders)
installLibs = geoutilsEnv.Install(prefix + '/lib', targetLibs)
installBins = geoutilsEnv.Install(prefix + '/bin', installBinTargets)
if (buildPyModule):
    pyModuleTargets = ['swig/python/CGeoUtils.py', geoutilsPyModule]
    if (buildAltjiraGeoUtils):
        pyModuleTargets += ['swig/python/AltjiraGeoUtils.py', 
            altjiraGeoUtilsPyModule]
    if (buildGeoUtilsFBX):
        pyModuleTargets += ['swig/python/GeoUtilsFBX.py', 
            fbxGeoUtilsPyModule]
    if (buildGeoUtilsGL):
        pyModuleTargets += ['swig/python/GeoUtilsGL.py', 
            glGeoUtilsPyModule]
    installPyModules = geoutilsEnv.Install(prefix + lc.pythonSitePackagesPath, 
        pyModuleTargets)

allTargets += (targetLibs + targetBins + targetTests)
if (buildPyModule):
    allTargets += (pyWrappers + pyModules)

installTargets = [
    installHeaders, installXMLFactoryHeaders, installLibs, installBins
]
if (buildPyModule):
    installTargets += [installPyModules]

aliasLibs = Alias('libs', targetLibs)
aliasBins = Alias('programs', targetBins)
aliasTests = Alias('tests', targetTests)
aliasAll = Alias('all', allTargets)
aliasInstall = Alias('install', installTargets)
if (haveIFClassgen):
    aliasSources = Alias('sources', sources)
if (haveIFTpl):
    aliasXMLIO = Alias('xmlio', classXMLFactory + xmlFactorySources)
    aliasInterfaces = Alias('interfaces', classInterfaces + interfaces)
if (buildPyModule):
    aliasPyModule = Alias('pymodule', pyModules)

Default('all')
