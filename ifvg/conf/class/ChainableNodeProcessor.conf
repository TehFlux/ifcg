# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeVoxelizationProcessor.conf           Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/Vector3.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Node.hpp"'
    }
}

# forward declarations
forward = {
    'class Node'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ChainableNodeProcessor
	shortDesc = Chainable node processor
	title = Chainable node processor
	longDesc = A chainable node processor. When a node is passed to this node processor, the processor first invokes its source node processor. If the processing result of the source processor does not have the \c RESULT_FINISHED flag set, the processor then proceeds with its own node processing implementation.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::NodeProcessor
            include = ifvg/NodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = Ionflux::VolGfx::NodeProcessingResultID
    name = RESULT_FINISHED
    desc = Node processing result: finished
    value = 4
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::NodeProcessor*
    setFromType = Ionflux::VolGfx::NodeProcessor*
    name = source
    desc = Source node processor
    managed = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = source
        value = 0
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setSource(other.source);
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = process
	shortDesc = Process node implementation
	longDesc = Process a node implementation.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
NodeProcessingResultID result = RESULT_UNKNOWN;
if (source != 0)
    result = source->process(nodeImpl, userData);
if (!checkFlags(result, RESULT_FINISHED))
    result = processImpl(nodeImpl, userData);
>>>
    return = {
        value = result
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = process
	shortDesc = Process node
	longDesc = Process a node.
	param[] = {
	    type = Ionflux::VolGfx::Node*
	    name = node
	    desc = Node
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(node, this, 
    "process", "Node");
>>>
    return = {
        value = process(node->getImpl(), userData)
        desc = result
    }
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << "source: ";
if (source != 0)
    status << "[" << source->getValueString() << "]";
else
    status << "<null>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

