# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeIOBWallThicknessProcessor.conf          Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/Node.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/Vector3.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Context.hpp"'
    }
}

# forward declarations
forward = {
    'class Context'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeIOBWallThicknessProcessor
	shortDesc = Node inside/outside/boundary wall thickness processor
	title = Node inside/outside/boundary wall thickness processor
	longDesc = A node processor that processes wall thickness values set on the voxel inside/outside/boundary data record. If the \c enableScanWallThickness flag is set, the node processor scans nodes for the minimum and maximum positive wall thickness values and sets the corresponding properties accordingly. Otherwise, if \c minColorIndex and \c maxColorIndex are both set (i.e. not equal to COLOR_INDEX_UNSPECIFIED), the node processor assigns a color index to the IOB data record of each node according to its minimum wall thickness value. The color index for each node will be picked from the range defined by \c minWallThickness and \c maxWallThickness, according to the magnitude of the minimum wall thickness value for the node.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::ChainableNodeProcessor
            include = ifvg/ChainableNodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::Context*
    setFromType = Ionflux::VolGfx::Context*
    name = context
    desc = Voxel tree context
    managed = true
}
property.protected[] = {
    type = Ionflux::VolGfx::ColorIndex
    setFromType = Ionflux::VolGfx::ColorIndex
    name = minColorIndex
    desc = Minimum color index
}
property.protected[] = {
    type = Ionflux::VolGfx::ColorIndex
    setFromType = Ionflux::VolGfx::ColorIndex
    name = maxColorIndex
    desc = Maximum color index
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = enableScanWallThickness
    desc = Enable scanning of wall thickness range
}
property.protected[] = {
    type = Ionflux::ObjectBase::UInt16
    setFromType = Ionflux::ObjectBase::UInt16
    name = minWallThickness
    desc = Minimum wall thickness value
}
property.protected[] = {
    type = Ionflux::ObjectBase::UInt16
    setFromType = Ionflux::ObjectBase::UInt16
    name = maxWallThickness
    desc = Maximum wall thickness value
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = minColorIndex
        value = COLOR_INDEX_UNSPECIFIED
    }
    initializer[] = {
        name = maxColorIndex
        value = COLOR_INDEX_UNSPECIFIED
    }
    initializer[] = {
        name = enableScanWallThickness
        value = true
    }
    initializer[] = {
        name = minWallThickness
        value = 0
    }
    initializer[] = {
        name = maxWallThickness
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = minColorIndex
        value = initMinColorIndex
    }
    initializer[] = {
        name = maxColorIndex
        value = initMaxColorIndex
    }
    initializer[] = {
        name = enableScanWallThickness
        value = initEnableScanWallThickness
    }
    initializer[] = {
        name = minWallThickness
        value = initMinWallThickness
    }
    initializer[] = {
        name = maxWallThickness
        value = initMaxWallThickness
    }
    param[] = {
        type = Ionflux::VolGfx::Context*
        name = initContext
        desc = Voxel tree context
    }
    param[] = {
        type = Ionflux::VolGfx::ColorIndex
        name = initMinColorIndex
        desc = Minimum color index value
        default = COLOR_INDEX_UNSPECIFIED
    }
    param[] = {
        type = Ionflux::VolGfx::ColorIndex
        name = initMaxColorIndex
        desc = Maximum color index value
        default = COLOR_INDEX_UNSPECIFIED
    }
    param[] = {
        type = bool
        name = initEnableScanWallThickness
        desc = Enable scanning of wall thickness range
        default = true
    }
    param[] = {
        type = Ionflux::ObjectBase::UInt16
        name = initMinWallThickness
        desc = Minimum wall thickness value
        default = 0
    }
    param[] = {
        type = Ionflux::ObjectBase::UInt16
        name = initMaxWallThickness
        desc = Maximum wall thickness value
        default = 0
    }
    impl = <<<
if (initContext != 0)
    setContext(initContext);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. \c userData is expected to contain a pointer to a NodeIntersection data record for \c nodeImpl.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
if (!Node::hasImplDataType(nodeImpl, Node::DATA_TYPE_VOXEL_IOB))
    // Node has incompatible type.
    return RESULT_OK;
NodeDataImpl* dp = nodeImpl->data;
VoxelDataIOB* d0 = Ionflux::ObjectBase::nullPointerCheck(
    static_cast<VoxelDataIOB*>(dp->data), this, 
    "processImpl", "Voxel inside/outside/boundary data");
Ionflux::ObjectBase::UInt16 cwt0 = getIOBDataWallThicknessMin(*d0);
/* <---- DEBUG ----- //
Ionflux::ObjectBase::nullPointerCheck(context, this, 
    "processImpl", "Context");
NodeID nid0 = Node::getImplNodeID(nodeImpl, context);
// ----- DEBUG ----> */
/* <---- DEBUG ----- //
std::cerr << "[NodeIOBWallThicknessProcessor::processImpl] DEBUG: "
    "node: [" << getNodeIDValueString(nid0, false, true, true, context) 
    << "] cwt0 = " << cwt0 << std::endl;
// ----- DEBUG ----> */
if (enableScanWallThickness)
{
    // determine minimum wall thickness range
    if ((minWallThickness == 0) 
        || ((cwt0 > 0) 
            && (cwt0 < minWallThickness)))
    {
        minWallThickness = cwt0;
    }
    if ((maxWallThickness == 0) 
        || ((cwt0 > 0) 
            && (cwt0 > maxWallThickness)))
    {
        maxWallThickness = cwt0;
    }
} else
{
    // assign color index
    ColorIndex ci = getColorIndex(cwt0, minWallThickness, 
        maxWallThickness, minColorIndex, maxColorIndex);
    /* <---- DEBUG ----- //
    std::cerr << "[NodeIOBWallThicknessProcessor::processImpl] DEBUG: "
        "node: [" << getNodeIDValueString(nid0, true, true, true, context) 
        << "] colorIndex = " << ci << std::endl;
    // ----- DEBUG ----> */
    d0->color = ci;
}
>>>
    return = {
        value = RESULT_OK
        desc = result
    }
}

# copy assignment operator
function.copy.impl = <<<
if (this == &other)
    return *this;
setMinColorIndex(other.minColorIndex);
setMaxColorIndex(other.maxColorIndex);
setEnableScanWallThickness(other.enableScanWallThickness);
setMinWallThickness(other.minWallThickness);
setMaxWallThickness(other.maxWallThickness);
>>>

# public member functions

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << "context: ";
if (context == 0)
    status << "<null>";
else
    status << "[" << context->getValueString() << "]";
status << "minColorIndex = " << minColorIndex 
    << ", maxColorIndex = " << maxColorIndex 
    << ", enableScanWallThickness = " 
        << Ionflux::ObjectBase::getBooleanValueString(
            enableScanWallThickness) 
    << ", minWallThickness = " << minWallThickness 
    << ", maxWallThickness = " << maxWallThickness;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

