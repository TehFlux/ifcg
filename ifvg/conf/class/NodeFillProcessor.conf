# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeFillProcessor.conf           Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/Node.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/Vector3.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Context.hpp"'
    }
}

# forward declarations
forward = {
    'class Context'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeFillProcessor
	shortDesc = Node fill processor
	title = Node intersection processor
	longDesc = A node processor that can be used to fill nodes, i.e. add child nodes that are not set on a node, so that the node has a full set of child nodes.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::ChainableNodeProcessor
            include = ifvg/ChainableNodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::Context*
    setFromType = Ionflux::VolGfx::Context*
    name = context
    desc = Voxel tree context
    managed = true
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = clearExisting
    desc = Clear existing child nodes
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = recursive
    desc = Fill nodes recursively
}
property.protected[] = {
    type = int
    setFromType = int
    name = maxDepth
    desc = Maximum depth
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = clearExisting
        value = false
    }
    initializer[] = {
        name = recursive
        value = false
    }
    initializer[] = {
        name = maxDepth
        value = DEPTH_UNSPECIFIED
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = clearExisting
        value = initClearExisting
    }
    initializer[] = {
        name = recursive
        value = initRecursive
    }
    initializer[] = {
        name = maxDepth
        value = initMaxDepth
    }
    param[] = {
        type = Ionflux::VolGfx::Context*
        name = initContext
        desc = Voxel tree context
    }
    param[] = {
        type = bool
        name = initClearExisting
        desc = Clear existing child nodes
        default = false
    }
    param[] = {
        type = bool
        name = initRecursive
        desc = Fill nodes recursively
        default = false
    }
    param[] = {
        type = int
        name = initMaxDepth
        desc = Maximum depth
        default = DEPTH_UNSPECIFIED
    }
    impl = <<<
if (initContext != 0)
    setContext(initContext);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. \c userData is expected to contain a pointer to a NodeIntersection data record for \c nodeImpl.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(context, this, 
    "processImpl", "Context");
/* <---- DEBUG ----- //
int depth = Node::getImplDepth(nodeImpl, context);
if (depth == 2)
{
    std::cerr << "[NodeFillProcessor::processImpl] DEBUG: " 
        "processing node: [" 
        << Node::getImplValueString(nodeImpl, context, false) << "]" 
        << std::endl;
}
// ----- DEBUG ----> */
Node::fillImpl(nodeImpl, context, clearExisting, recursive, maxDepth);
/* <---- DEBUG ----- //
if (depth == 2)
{
    std::cerr << "[NodeFillProcessor::processImpl] DEBUG: " 
        "after processing: [" 
        << Node::getImplValueString(nodeImpl, context, false) << "]" 
        << std::endl;
}
// ----- DEBUG ----> */
>>>
    return = {
        value = RESULT_OK
        desc = result
    }
}

# copy assignment operator
function.copy.impl = <<<
if (this == &other)
    return *this;
setContext(other.context);
setClearExisting(other.clearExisting);
setRecursive(other.recursive);
setMaxDepth(other.maxDepth);
>>>

# public member functions

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << "context: ";
if (context == 0)
    status << "<null>";
else
    status << "[" << context->getValueString() << "]";
status << "; clearExisting = " << clearExisting 
    << ", recursive = " << recursive
    << ", maxDepth = " << getDepthString(maxDepth);
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

