# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# Mesh.conf              Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/viewertypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"geoutils/Vertex3Set.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Mesh
	shortDesc = Mesh
	title = Mesh
	longDesc = A polygonal mesh.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
		# other base classes
		other[] = {
		    name = Ionflux::GeoUtils::Mesh
		    include = geoutils/Mesh.hpp
		    hasClassInfo = true
		    xml = {
		        enabled = true
		        include = geoutils/Mesh
		    }
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        'xmlio'
        'serialize'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml.elementName = vgmesh
    serialize = {
        errorClass = IFVGError
        magicSyllable = {
            value = 0x4d45
            desc = ME
        }
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::GeoUtils::Mesh
        value = initVerts, initFaces
    }
    param[] = {
        name = initVerts
        type = Ionflux::GeoUtils::Vertex3Vector*
        desc = Vertex vector
    }
    param[] = {
        name = initFaces
        type = const Ionflux::GeoUtils::FaceVector*
        desc = Face vector
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::GeoUtils::Mesh
        value = initVertexSource, initFaces
    }
    param[] = {
        name = initVertexSource
        type = Ionflux::GeoUtils::Vertex3Set*
        desc = Vertex source
    }
    param[] = {
        name = initFaces
        type = const Ionflux::GeoUtils::FaceVector*
        desc = Face vector
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
Ionflux::GeoUtils::Mesh::operator=(other);
>>>

# public member functions

function.serialize.stream.impl = <<<
Ionflux::ObjectBase::IFObject::serialize(target, addMagicWord);
// mesh type
Ionflux::GeoUtils::MeshTypeID t0 = getMeshType();
if ((t0 != Ionflux::GeoUtils::Mesh::TYPE_TRI) 
    && (t0 != Ionflux::GeoUtils::Mesh::TYPE_QUAD))
{
    std::ostringstream status;
    status << "Unsupported mesh type for serialization (" 
        << getMeshTypeIDString(t0) << ", " << t0 << ").";
    throw IFVGError(getErrorString(status.str(), "serialize"));
}
Ionflux::ObjectBase::pack(t0, target);
// vertices
Ionflux::ObjectBase::UInt64 numVerts = getNumVertices();
Ionflux::ObjectBase::pack(numVerts, target);
for (unsigned int i = 0; 
    i < static_cast<unsigned int>(numVerts); i++)
{
    Ionflux::GeoUtils::Vertex3* cv = 
        Ionflux::ObjectBase::nullPointerCheck(getVertex(i), 
            this, "serialize", "Vertex");
    cv->serialize(target, false);
}
// faces
Ionflux::ObjectBase::UInt64 numFaces = getNumFaces();
Ionflux::ObjectBase::pack(numFaces, target);
unsigned int nfv0 = getNumVerticesPerFace(t0);
for (unsigned int i = 0; 
    i < static_cast<unsigned int>(numFaces); i++)
{
    Ionflux::GeoUtils::Face* cf = 
        Ionflux::ObjectBase::nullPointerCheck(getFace(i), 
            this, "serialize", "Face");
    for (unsigned int k = 0; k < nfv0; k++)
    {
        Ionflux::ObjectBase::UInt64 vi = cf->getVertex(k);
        Ionflux::ObjectBase::pack(vi, target);
    }
}
>>>
function.deserialize.stream.impl = <<<
Ionflux::ObjectBase::IFObject::deserialize(source, 
    Ionflux::ObjectBase::DATA_SIZE_INVALID, checkMagicWord);
// mesh type
Ionflux::GeoUtils::MeshTypeID t0;
Ionflux::ObjectBase::unpack(source, t0);
if ((t0 != Ionflux::GeoUtils::Mesh::TYPE_TRI) 
    && (t0 != Ionflux::GeoUtils::Mesh::TYPE_QUAD))
{
    std::ostringstream status;
    status << "Unsupported mesh type for deserialization (" 
        << getMeshTypeIDString(t0) << ", " << t0 << ").";
    throw IFVGError(getErrorString(status.str(), "deserialize"));
}
unsigned int nfv0 = getNumVerticesPerFace(t0);
// vertices
Ionflux::GeoUtils::Vertex3Vector v0;
Ionflux::ObjectBase::unpackObjVec0(source, v0, 
    Ionflux::ObjectBase::DATA_SIZE_INVALID, false);
unsigned int numVerts = v0.size();
if (numVerts == 0)
    setVertexSource(0);
else
{
    setVertexSource(Ionflux::GeoUtils::Vertex3Set::create());
    addVertices(v0);
}
// faces
clearFaces();
Ionflux::ObjectBase::UInt64 numFaces;
Ionflux::ObjectBase::unpack(source, numFaces);
for (unsigned int i = 0; 
    i < static_cast<unsigned int>(numFaces); i++)
{
    Ionflux::GeoUtils::Face* cf = addFace();
    for (unsigned int k = 0; k < nfv0; k++)
    {
        Ionflux::ObjectBase::UInt64 vi;
        Ionflux::ObjectBase::unpack(source, vi);
        cf->addVertex(static_cast<unsigned int>(vi));
    }
}
update(false, false);
>>>

# public member functions overridden from IFObject

# Static member functions.

# Static GLFW interface member functions

# Pure virtual member functions.

# operations

# Global functions.

