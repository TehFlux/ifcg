# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeFilter.conf           Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/Node.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Context.hpp"'
    }
}

# forward declarations
forward = {
    'class Context'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeFilter
	shortDesc = Node filter
	title = Node filter
	longDesc = A node processor that can be used to filter nodes based on various criteria, such as depth range, data type, voxel class and leaf flag. Node filters can be used with functions such as Node::process(), Node::find(), Node::getMesh(), Node::getVertexAttributes() and Node::intersectRay() to restrict the operation to a certain subset of nodes. The filter will return \c RESULT_OK | \c RESULT_PASS if the node passes the filter and \c RESULT_OK if the node does not pass the filter. Also, the filter() member function can be used to obtain a boolean result of applying the filter to a node.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::ChainableNodeProcessor
            include = ifvg/ChainableNodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = Ionflux::VolGfx::NodeProcessingResultID
    name = RESULT_PASS
    desc = Node processing result: pass
    value = 8
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::Context*
    setFromType = Ionflux::VolGfx::Context*
    name = context
    desc = context
}
property.protected[] = {
    type = int
    setFromType = int
    name = minDepth
    desc = minimum depth
}
property.protected[] = {
    type = int
    setFromType = int
    name = maxDepth
    desc = maximum depth
}
property.protected[] = {
    type = Ionflux::VolGfx::LeafStatusID
    setFromType = Ionflux::VolGfx::LeafStatusID
    name = leafStatus
    desc = leaf status
}
property.protected[] = {
    type = Ionflux::VolGfx::NodeDataType
    setFromType = Ionflux::VolGfx::NodeDataType
    name = dataType
    desc = node data type
}
property.protected[] = {
    type = Ionflux::VolGfx::VoxelClassID
    setFromType = Ionflux::VolGfx::VoxelClassID
    name = voxelClass
    desc = voxel class mask
}
property.protected[] = {
    type = Ionflux::GeoUtils::Range3*
    setFromType = Ionflux::GeoUtils::Range3*
    name = region
    desc = region
    managed = true
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = minDepth
        value = DEPTH_UNSPECIFIED
    }
    initializer[] = {
        name = maxDepth
        value = DEPTH_UNSPECIFIED
    }
    initializer[] = {
        name = leafStatus
        value = NODE_ANY
    }
    initializer[] = {
        name = dataType
        value = Node::DATA_TYPE_UNKNOWN
    }
    initializer[] = {
        name = voxelClass
        value = VOXEL_CLASS_UNDEFINED
    }
    initializer[] = {
        name = region
        value = 0
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = minDepth
        value = initMinDepth
    }
    initializer[] = {
        name = maxDepth
        value = initMaxDepth
    }
    initializer[] = {
        name = leafStatus
        value = initLeafStatus
    }
    initializer[] = {
        name = dataType
        value = initDataType
    }
    initializer[] = {
        name = voxelClass
        value = initVoxelClass
    }
    initializer[] = {
        name = region
        value = 0
    }
    param[] = {
        type = Ionflux::VolGfx::Context*
        name = initContext
        desc = context
    }
    param[] = {
        type = int
        name = initMinDepth
        desc = minimum depth
        default = DEPTH_UNSPECIFIED
    }
    param[] = {
        type = int
        name = initMaxDepth
        desc = maximum depth
        default = DEPTH_UNSPECIFIED
    }
    param[] = {
        type = Ionflux::VolGfx::LeafStatusID
        name = initLeafStatus
        desc = leaf status
        default = NODE_ANY
    }
    param[] = {
        type = Ionflux::VolGfx::NodeDataType
        name = initDataType
        desc = node data type
        default = Node::DATA_TYPE_UNKNOWN
    }
    param[] = {
        type = Ionflux::VolGfx::VoxelClassID
        name = initVoxelClass
        desc = voxel class
        default = VOXEL_CLASS_UNDEFINED
    }
    param[] = {
        type = Ionflux::GeoUtils::Range3*
        name = initRegion
        desc = region
        default = 0
    }
    impl = <<<
if (initContext != 0)
    setContext(initContext);
if (initRegion)
    setRegion(initRegion);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. This function should be implemented by derived classes.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
if (filter(nodeImpl, userData))
    return RESULT_OK | RESULT_PASS;
>>>
    return = {
        value = RESULT_OK | RESULT_FINISHED
        desc = result
    }
}

# copy assignment operator
function.copy.impl = <<<
if (this == &other)
    return *this;
setContext(other.context);
setMinDepth(other.minDepth);
setMaxDepth(other.maxDepth);
setLeafStatus(other.leafStatus);
setDataType(other.dataType);
setVoxelClass(other.voxelClass);
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = bool
	name = filter
	shortDesc = Filter node
	longDesc = Apply the filter to a node implementation. This should be overridden by derived classes.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(nodeImpl, this, 
    "filter", "Node implementation");
if (context != 0)
{
    // depth check
    if ((minDepth != DEPTH_UNSPECIFIED)
        || (maxDepth != DEPTH_UNSPECIFIED))
    {
        int depth = Node::getImplDepth(nodeImpl, context);
        if ((minDepth != DEPTH_UNSPECIFIED) 
            && (depth < minDepth))
                return false;
        if ((maxDepth != DEPTH_UNSPECIFIED) 
            && (depth > maxDepth))
                return false;
    }
    if (region != 0)
    {
        // region check.
        Ionflux::GeoUtils::Range3 r0;
        Node::getImplRange(nodeImpl, context, r0);
        if (!region->isInRange(r0.getCenter()))
            return false;
    }
}
if (dataType != Node::DATA_TYPE_UNKNOWN)
{
    // data type check
    if (!Node::hasImplDataType(nodeImpl, dataType))
        return false;
}
if ((leafStatus != NODE_ANY) 
    && (leafStatus != Node::getImplLeafStatus(nodeImpl)))
{
    // leaf check
    return false;
}
if ((voxelClass != VOXEL_CLASS_UNDEFINED) 
    && !Node::hasImplVoxelClass(nodeImpl, voxelClass))
    // voxel class check
    return false;
>>>
    return = {
        value = true
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = filter
	shortDesc = Filter node
	longDesc = Apply the filter to a node.
	param[] = {
	    type = Ionflux::VolGfx::Node*
	    name = node
	    desc = Node
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(node, this, 
    "filter", "Node");
>>>
    return = {
        value = filter(node->getImpl())
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setDepthRange
	shortDesc = Set depth range
	longDesc = Set the allowable depth range for the filter.
    param[] = {
        type = int
        name = newMinDepth
        desc = minimum depth
        default = DEPTH_UNSPECIFIED
    }
    param[] = {
        type = int
        name = newMaxDepth
        desc = maximum depth
        default = DEPTH_UNSPECIFIED
    }
	impl = <<<
setMinDepth(newMinDepth);
setMaxDepth(newMaxDepth);
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << ChainableNodeProcessor::getValueString();
status << "; context: ";
if (context != 0)
    status << "[" << context->getValueString() << "]";
else
    status << "<null>";
status << ", minDepth = " << getDepthString(minDepth) 
    << ", maxDepth = " << getDepthString(maxDepth) 
    << ", leafStatus = " << getLeafStatusValueString(leafStatus) 
    << ", dataType = " << Node::getDataTypeString(dataType) 
    << ", voxelClass = " << getVoxelClassValueString(voxelClass);
if (region != 0)
    status << ", region = [" << region->getValueString() << "]";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

