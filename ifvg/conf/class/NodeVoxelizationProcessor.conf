# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeVoxelizationProcessor.conf           Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/Vector3.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Node.hpp"'
    }
}

# forward declarations
forward = {
    'class Node'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeVoxelizationProcessor
	shortDesc = Node voxelization processor
	title = Node voxelization processor
	longDesc = A node processor for voxelization. When used with Node::voxelizeFaces(), this processor attaches a data record to the target node according to the voxelization target that is set on the processor.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::ChainableNodeProcessor
            include = ifvg/ChainableNodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::VoxelizationTargetID
    setFromType = Ionflux::VolGfx::VoxelizationTargetID
    name = target
    desc = Voxelization target
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = target
        value = VOXELIZATION_TARGET_DENSITY
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. This function should be implemented by derived classes.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
NodeDataImpl* d0 = 0;
if (target == VOXELIZATION_TARGET_CLASS)
{
    // attach voxel class data
    d0 = Node::getImplData(nodeImpl, Node::DATA_TYPE_VOXEL_CLASS);
    VoxelClassID c0;
    unpackVoxelClass(d0->data, c0);
    setVoxelClass(VOXEL_CLASS_EMPTY, c0, false);
    setVoxelClass(VOXEL_CLASS_FILLED, c0);
    packVoxelClass(c0, d0->data);
} else
if (target == VOXELIZATION_TARGET_DENSITY)
{
    // attach density data
    d0 = Node::getImplData(nodeImpl, Node::DATA_TYPE_DENSITY);
    NodeDataValue* dv = 
        Ionflux::ObjectBase::nullPointerCheck(
            static_cast<NodeDataValue*>(d0->data), this, 
                "processImpl", "Data pointer");
    *dv = DENSITY_FILLED;
} else
if (target == VOXELIZATION_TARGET_COLOR_NORMAL)
{
    // attach color/normal data
    d0 = Node::getImplData(nodeImpl, Node::DATA_TYPE_COLOR_NORMAL);
    Ionflux::Altjira::Color ac0;
    Ionflux::GeoUtils::Vector3 an0;
    Node::getImplFaceColorNormal(nodeImpl, ac0, an0, true);
    Node::setDataImplColorNormal(d0, ac0, an0);
}
>>>
    return = {
        value = RESULT_OK
        desc = result
    }
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
setTarget(other.target);
>>>

# public member functions

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << getVoxelizationTargetValueString(target);
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

