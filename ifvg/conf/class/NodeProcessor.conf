# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeProcessor.conf              Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Node.hpp"'
    }
}

# forward declarations
forward = {
    'class Node'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeProcessor
	shortDesc = Node processor
	title = Node processor
	longDesc = A base class for objects that process nodes or node implementations. Any node processor can be used with Node::process() or Node::processImpl().
	group.name = ifvg
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = Ionflux::VolGfx::NodeProcessingResultID
    name = RESULT_UNKNOWN
    desc = Node processing result: unknown
    value = 0
}
constant.public[] = {
    type = Ionflux::VolGfx::NodeProcessingResultID
    name = RESULT_OK
    desc = Node processing result: ok
    value = 1
}
constant.public[] = {
    type = Ionflux::VolGfx::NodeProcessingResultID
    name = RESULT_FAILED
    desc = Node processing result: failed
    value = 2
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. This function should be implemented by derived classes.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
// TODO: Implementation.
>>>
    return = {
        value = RESULT_UNKNOWN
        desc = result
    }
}

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = process
	shortDesc = Process node implementation
	longDesc = Process a node implementation.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(nodeImpl, this, 
    "process", "Node implementation");
processImpl(nodeImpl, userData);
>>>
    return = {
        value = RESULT_UNKNOWN
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = process
	shortDesc = Process node
	longDesc = Process a node.
	param[] = {
	    type = Ionflux::VolGfx::Node*
	    name = node
	    desc = Node
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
Ionflux::ObjectBase::nullPointerCheck(node, this, 
    "process", "Node");
>>>
    return = {
        value = process(node->getImpl(), userData)
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = operator()
	shortDesc = Process node implementation
	longDesc = Process a node implementation.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = 
    return = {
        value = process(nodeImpl, userData)
        desc = result
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = operator()
	shortDesc = Process node
	longDesc = Process a node.
	param[] = {
	    type = Ionflux::VolGfx::Node*
	    name = node
	    desc = Node
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = 
    return = {
        value = process(node, userData)
        desc = result
    }
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
// TODO: Implementation.
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
	spec = static
	type = bool
	name = checkFlags
	shortDesc = Check processing result flags
	longDesc = Check if the specified processing result flags are set within the specified node processing result.
	param[] = {
	    type = Ionflux::VolGfx::NodeProcessingResultID
	    name = result
	    desc = node processing result
	}
	param[] = {
	    type = Ionflux::VolGfx::NodeProcessingResultID
	    name = flags
	    desc = node processing result flags
	}
	impl = <<<
if ((result & flags) == 0)
    return false;
>>>
    return = {
        value = true
        desc = \c true if the specified node processing result flags are set within the node processing result
    }
}

# Pure virtual member functions.

# operations

# Global functions.

