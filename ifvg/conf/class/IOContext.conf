# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# IOContext.conf              Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '<iostream>'
        '"ifobject/types.hpp"'
        '"ifobject/constants.hpp"'
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<fstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"ifobject/utf8.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
    }
}

# forward declarations
forward = {
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = IOContext
	shortDesc = I/O Context
	title = I/O Context
	longDesc = A context that collects data that is used for serializing and deserializing node data.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::ObjectBase::IFIOContext
            include = ifobject/IFIOContext.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeset
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::NodeID
    setFromType = Ionflux::VolGfx::NodeID
    name = rootNodeID
    desc = root node ID
}
property.protected[] = {
    type = Ionflux::VolGfx::NodeImplHierarchyHeader
    setFromType = const Ionflux::VolGfx::NodeImplHierarchyHeader&
    name = header
    desc = node implementation hierarchy header
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = <<<
rootNodeID = createNodeID();
header = createNodeImplHierarchyHeader();
>>>
}

# Destructor.
destructor.impl = clear();

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
// NOTE: IOContext should not be copied.
>>>

# public member functions
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear
	longDesc = Clear the I/O context and release all associated resources.
	impl = <<<
Ionflux::ObjectBase::IFIOContext::clear();
rootNodeID = createNodeID();
header = createNodeImplHierarchyHeader();
>>>
}
function.public[] = {
	spec = virtual
	type = void
	name = printDebugInfo
	shortDesc = Print debug information
	longDesc = Print debug information for the I/O context.
	param[] = {
	    type = bool
	    name = inputStreamVerbose
	    desc = show verbose information on input stream
	    default = false
	}
	param[] = {
	    type = bool
	    name = outputStreamVerbose
	    desc = show verbose information on output stream
	    default = false
	}
	param[] = {
	    type = bool
	    name = poMapSerializedVerbose
	    desc = show verbose information on pointer/offset map (serialized)
	    default = false
	}
	param[] = {
	    type = bool
	    name = poMapCurrentVerbose
	    desc = show verbose information on pointer/offset map (current)
	    default = false
	}
	impl = <<<
Ionflux::ObjectBase::IFIOContext::printDebugInfo(inputStreamVerbose, 
    outputStreamVerbose, poMapSerializedVerbose, poMapCurrentVerbose);
std::cout << "root node: [" << getNodeIDString(rootNodeID) << "]" 
    << std::endl;
std::cout << "header:" << std::endl 
    << "  poMapOffset = " << header.poMapOffset << std::endl
    << "  implArrayStride = " << header.implArrayStride << std::endl
    << "  implSize = " << header.implSize << std::endl
    << "  dataImplSize = " << header.dataImplSize << std::endl
    << "  dataValueSize = " 
        << static_cast<unsigned int>(header.dataValueSize) 
        << std::endl
    << "  rootNodeDepth = " 
        << static_cast<unsigned int>(header.rootNodeDepth) 
        << std::endl
    << "  rootNodePointer = " << header.rootNodePointer << std::endl;
>>>
}

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << Ionflux::ObjectBase::IFIOContext::getValueString() 
    << ", header: [" 
    << getNodeImplHierarchyHeaderValueString(header) << "]" 
    << ", root: (" << getNodeIDString(rootNodeID) << ")";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

