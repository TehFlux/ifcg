# ===================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# -------------------------------------------------------------------
# NodeIOBEvalProcessor.conf           Class configuration.
# ===================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ===================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/Node.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"altjira/Color.hpp"'
        '"geoutils/Vector3.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
        '"ifvg/Context.hpp"'
    }
}

# forward declarations
forward = {
    'class Context'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NodeIOBEvalProcessor
	shortDesc = Node inside/outside/boundary evaluation processor
	title = Node inside/outside/boundary evaluation processor
	longDesc = A node processor that evaluates inside/outside/boundary data. Nodes will be classified as inside/outside based on ray votes cast by one or more rays using NodeIntersectionProcessor::setIOBData().
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::VolGfx::ChainableNodeProcessor
            include = ifvg/ChainableNodeProcessor.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
    xml = {
        elementName = nodeproc
    }
}

# Member variables.

# Public static constants.
constant.public[] = {
    type = double
    name = DEFAULT_INSIDE_VOTE_THRESHOLD
    desc = Default fractional threshold for 'inside' vote
    value = 0.9
}
constant.public[] = {
    type = unsigned int
    name = DEFAULT_INSIDE_MIN_VOTES
    desc = Default minimum votes for 'inside' classification
    value = 1
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::VolGfx::Context*
    setFromType = Ionflux::VolGfx::Context*
    name = context
    desc = Voxel tree context
    managed = true
}
property.protected[] = {
    type = double
    setFromType = double
    name = insideVoteThreshold
    desc = Threshold for 'inside' vote (as fraction of total votes)
}
property.protected[] = {
    type = unsigned int
    setFromType = unsigned int
    name = insideMinVotes
    desc = Minimum votes for 'inside' classification
}
property.protected[] = {
    type = bool
    setFromType = bool
    name = keepExistingClassification
    desc = Keep existing voxel classification
}
property.protected[] = {
    type = Ionflux::VolGfx::VoxelClassID
    setFromType = Ionflux::VolGfx::VoxelClassID
    name = voxelClassInside
    desc = voxel class for 'inside' voxels
}
property.protected[] = {
    type = Ionflux::VolGfx::VoxelClassID
    setFromType = Ionflux::VolGfx::VoxelClassID
    name = voxelClassOutside
    desc = voxel class for 'outside' voxels
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = insideVoteThreshold
        value = DEFAULT_INSIDE_VOTE_THRESHOLD
    }
    initializer[] = {
        name = insideMinVotes
        value = DEFAULT_INSIDE_MIN_VOTES
    }
    initializer[] = {
        name = keepExistingClassification
        value = false
    }
    initializer[] = {
        name = voxelClassInside
        value = VOXEL_CLASS_INSIDE
    }
    initializer[] = {
        name = voxelClassOutside
        value = VOXEL_CLASS_OUTSIDE
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = insideVoteThreshold
        value = initInsideVoteThreshold
    }
    initializer[] = {
        name = insideMinVotes
        value = initInsideMinVotes
    }
    initializer[] = {
        name = keepExistingClassification
        value = initKeepExistingClassification
    }
    initializer[] = {
        name = voxelClassInside
        value = initVoxelClassInside
    }
    initializer[] = {
        name = voxelClassOutside
        value = initVoxelClassOutside
    }
    param[] = {
        type = Ionflux::VolGfx::Context*
        name = initContext
        desc = Voxel tree context
    }
    param[] = {
        type = double
        name = initInsideVoteThreshold
        desc = Threshold for 'inside' vote (as fraction of total votes)
        default = DEFAULT_INSIDE_VOTE_THRESHOLD
    }
    param[] = {
        type = unsigned int
        name = initInsideMinVotes
        desc = Minimum votes for 'inside' classification
        default = DEFAULT_INSIDE_MIN_VOTES
    }
    param[] = {
        type = bool
        name = initKeepExistingClassification
        desc = Keep existing voxel classification
        default = false
    }
    param[] = {
        type = Ionflux::VolGfx::VoxelClassID
        name = initVoxelClassInside
        desc = voxel class for 'inside' voxels
        default = VOXEL_CLASS_INSIDE
    }
    param[] = {
        type = Ionflux::VolGfx::VoxelClassID
        name = initVoxelClassOutside
        desc = voxel class for 'outside' voxels
        default = VOXEL_CLASS_OUTSIDE
    }
    impl = <<<
if (initContext != 0)
    setContext(initContext);
>>>
}

# Destructor.
destructor.impl = 

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = Ionflux::VolGfx::NodeProcessingResultID
	name = processImpl
	shortDesc = Process node implementation
	longDesc = Process a node implementation. \c userData is expected to contain a pointer to a NodeIntersection data record for \c nodeImpl.
	param[] = {
	    type = Ionflux::VolGfx::NodeImpl*
	    name = nodeImpl
	    desc = Node implementation
	}
	param[] = {
	    type = void*
	    name = userData
	    desc = User data
	    default = 0
	}
	impl = <<<
if (!Node::hasImplDataType(nodeImpl, Node::DATA_TYPE_VOXEL_IOB))
    // Node has incompatible type.
    return RESULT_OK;
NodeDataImpl* dp = nodeImpl->data;
VoxelDataIOB* d0 = Ionflux::ObjectBase::nullPointerCheck(
    static_cast<VoxelDataIOB*>(dp->data), this, 
    "processImpl", "Voxel inside/outside/boundary data");
unsigned int votesTotal = d0->votesInside + d0->votesOutside;
if (votesTotal == 0)
{
    // No votes at all.
    return RESULT_OK;
}
// assign inside/outside classification
double insideFrac = static_cast<double>(d0->votesInside) 
    / votesTotal;
VoxelClassID vc = d0->voxelClass;
if ((d0->votesInside >= insideMinVotes) 
    && (insideFrac >= insideVoteThreshold))
{
    if (!keepExistingClassification
        || !checkVoxelClass(vc, voxelClassOutside))
    {
        setVoxelClass(voxelClassOutside | VOXEL_CLASS_EMPTY, 
            d0->voxelClass, false);
        setVoxelClass(voxelClassInside, d0->voxelClass);
    }
} else
{
    if (!keepExistingClassification
        || !checkVoxelClass(vc, voxelClassInside))
    {
        setVoxelClass(voxelClassInside, d0->voxelClass, false);
        setVoxelClass(voxelClassOutside, d0->voxelClass);
    }
}
/* <---- DEBUG ----- //
Ionflux::ObjectBase::nullPointerCheck(context, this, 
    "processImpl", "Context");
std::cerr << "[NodeIOBEvalProcessor::processImpl] DEBUG: "
    "node: [" << Node::getImplValueString(nodeImpl, context, false) 
    << "] -> (" << getVoxelClassValueString(d0->voxelClass) << ")" 
    << std::endl;
// ----- DEBUG ----> */
>>>
    return = {
        value = RESULT_OK
        desc = result
    }
}

# copy assignment operator
function.copy.impl = <<<
if (this == &other)
    return *this;
setInsideVoteThreshold(other.insideVoteThreshold);
setInsideMinVotes(other.insideMinVotes);
setKeepExistingClassification(other.keepExistingClassification);
setVoxelClassInside(other.voxelClassInside);
setVoxelClassOutside(other.voxelClassOutside);
>>>

# public member functions

# public member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
status << "context: ";
if (context == 0)
    status << "<null>";
else
    status << "[" << context->getValueString() << "]";
status << "insideVoteThreshold = " << insideVoteThreshold 
    << ", insideMinVotes = " << insideMinVotes 
    << ", keepExistingClassification = " 
        << Ionflux::ObjectBase::getBooleanValueString(
            keepExistingClassification) 
    << ", voxelClassInside = " 
        << getVoxelClassValueString(voxelClassInside) 
    << ", voxelClassOutside = " 
        << getVoxelClassValueString(voxelClassOutside);
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Static member functions.

# Pure virtual member functions.

# operations

# Global functions.

