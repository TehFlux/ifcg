# ============================================================================
# IFVG - Ionflux' Volumetric Graphics Library
# Copyright © 2014 Jörn P. Meier
# mail@ionflux.org
# ----------------------------------------------------------------------------
# Viewer.conf              Class configuration.
# ============================================================================
# 
# This file is part of IFVG - Ionflux' Volumetric Graphics Library.
# 
# IFVG - Ionflux' Volumetric Graphics Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# IFVG - Ionflux' Volumetric Graphics Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFVG - Ionflux' Volumetric Graphics Library; if not, write to 
# the Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ============================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifvg/types.hpp"'
        '"ifvg/constants.hpp"'
        '"ifvg/viewertypes.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
	    '"glad/glad.h"'
        '<GLFW/glfw3.h>'
        '"ifobject/utils.hpp"'
        '"ifobject/objectutils.hpp"'
        '"ifvg/utils.hpp"'
        '"ifvg/IFVGError.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Viewer
	shortDesc = Viewer
	title = Viewer
	longDesc = A viewer, used to visualize graphics in a window.
	group.name = ifvg
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
		# other base classes
		other[] = {
		    name = Ionflux::GeoUtils::Viewer
		    include = geoutils/Viewer.hpp
		    hasClassInfo = true
		}
	}
    features = {
        'copy'
        'upcast'
        'create'
        'classinfo'
        #'xmlio'
    }
    create = {
        allocationError = IFVGError("Could not allocate object")
        extendedCreate = true
    }
}

# Member variables.

# Public static constants.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::GeoUtils::Viewer
        value = initWindowPosX, initWindowPosY, initWindowWidth, initWindowHeight, initWindowTitle, initClearColor, initOpenGLVersionMajor, initOpenGLVersionMinor, initOpenGLProfile
    }
    param[] = {
        type = int
        name = initWindowPosX
        desc = Window position (X)
    }
    param[] = {
        type = int
        name = initWindowPosY
        desc = Window position (Y)
    }
    param[] = {
        type = int
        name = initWindowWidth
        desc = Window width
    }
    param[] = {
        type = int
        name = initWindowHeight
        desc = Window height
    }
    param[] = {
        type = const std::string&
        name = initWindowTitle
        desc = Window title
        default = Ionflux::GeoUtils::Viewer::DEFAULT_WINDOW_TITLE
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initClearColor
        desc = Clear color
        default = Ionflux::GeoUtils::Viewer::DEFAULT_CLEAR_COLOR
    }
    param[] = {
        type = int
        name = initOpenGLVersionMajor
        desc = OpenGL version (major)
        default = Ionflux::GeoUtils::Viewer::DEFAULT_OPENGL_VERSION_MAJOR
    }
    param[] = {
        type = int
        name = initOpenGLVersionMinor
        desc = OpenGL version (minor)
        default = Ionflux::GeoUtils::Viewer::DEFAULT_OPENGL_VERSION_MINOR
    }
    param[] = {
        type = Ionflux::GeoUtils::OpenGLProfileID
        name = initOpenGLProfile
        desc = OpenGL profile
        default = Ionflux::GeoUtils::Viewer::DEFAULT_OPENGL_PROFILE
    }
    impl = 
}

# Destructor.
destructor.impl = 

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
>>>

# public member functions

# public member functions overridden from IFObject

# Static member functions.

# Static GLFW interface member functions

# Pure virtual member functions.

# operations

# Global functions.

