# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2024 Jörn Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# MatrixSource.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 3 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
#using = {
#	'namespace Ionflux::ObjectBase'
#}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"ifmapping/Matrix.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/AltjiraError.hpp"'
        '"altjira/Color.hpp"'
    }
}

# forward declarations

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = MatrixSource
	shortDesc = Matrix pixel source
	title = Matrix pixel source
	longDesc = A source for pixels that takes pixel values from a set of matrices, with one matrix per channel. Default values can be configured for all channels. A color space can be set, which is used for interpreting the channel values.
	group.name = altjira
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::PixelSource
            include = altjira/PixelSource.hpp
            hasClassInfo = true
        }
	}
    features = {
		'classinfo'
	    'create'
	    'upcast'
	    'copy'
    }
    create = {
        allocationError = AltjiraError("Could not allocate object.")
        extendedCreate = true
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Altjira::FloatColor
	setFromType = const Ionflux::Altjira::FloatColor&
	name = defaultColor
	desc = Default color
}
property.protected[] = {
	type = Ionflux::Altjira::ColorSpace
	setFromType = Ionflux::Altjira::ColorSpace
    proxy = true
	name = colorSpace
	desc = Color space
    impl = {
        set = <<<
if (newColorSpace == defaultColor.space)
    return;
toColorSpace(defaultColor, newColorSpace);
>>>
        get = return defaultColor.space;
    }
}
property.protected[] = {
	type = Ionflux::Mapping::Matrix*
	setFromType = Ionflux::Mapping::Matrix*
	name = matrixC0
	desc = Matrix (component 0)
    managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Matrix*
	setFromType = Ionflux::Mapping::Matrix*
	name = matrixC1
	desc = Matrix (component 1)
    managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Matrix*
	setFromType = Ionflux::Mapping::Matrix*
	name = matrixC2
	desc = Matrix (component 2)
    managed = true
}
property.protected[] = {
	type = Ionflux::Mapping::Matrix*
	setFromType = Ionflux::Mapping::Matrix*
	name = matrixAlpha
	desc = Matrix (alpha)
    managed = true
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = width
	desc = Width
}
property.protected[] = {
	type = unsigned int
	setFromType = unsigned int
	name = height
	desc = Height
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = matrixC0
        value = nullptr
    }
    initializer[] = {
        name = matrixC1
        value = nullptr
    }
    initializer[] = {
        name = matrixC2
        value = nullptr
    }
    initializer[] = {
        name = matrixAlpha
        value = nullptr
    }
    initializer[] = {
        name = width
        value = Ionflux::Altjira::EXTENT_INFINITE
    }
    initializer[] = {
        name = height
        value = Ionflux::Altjira::EXTENT_INFINITE
    }
    impl = <<<
defaultColor.space = Color::SPACE_HSV;
defaultColor.c0 = 0.;
defaultColor.c1 = 0.;
defaultColor.c2 = 0.;
defaultColor.alpha = 1.;
>>>
}
constructor.public[] = {
    initializer[] = {
        name = matrixC0
        value = nullptr
    }
    initializer[] = {
        name = matrixC1
        value = nullptr
    }
    initializer[] = {
        name = matrixC2
        value = nullptr
    }
    initializer[] = {
        name = matrixAlpha
        value = nullptr
    }
    initializer[] = {
        name = width
        value = initWidth
    }
    initializer[] = {
        name = height
        value = initHeight
    }
	param[] = {
		type = unsigned int
		name = initWidth
		desc = Width
	}
	param[] = {
		type = unsigned int
		name = initHeight
		desc = Height
	}
	param[] = {
		type = Ionflux::Mapping::Matrix*
		name = initMatrixC0
		desc = Matrix (component 0)
        default = nullptr
	}
	param[] = {
		type = Ionflux::Mapping::Matrix*
		name = initMatrixC1
		desc = Matrix (component 1)
        default = nullptr
	}
	param[] = {
		type = Ionflux::Mapping::Matrix*
		name = initMatrixC2
		desc = Matrix (component 2)
        default = nullptr
	}
	param[] = {
		type = Ionflux::Mapping::Matrix*
		name = initMatrixAlpha
		desc = Matrix (alpha)
        default = nullptr
	}
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = initDefaultColor
		desc = Default color
        default = Ionflux::Altjira::Color::BLACK
	}
	param[] = {
		type = Ionflux::Altjira::ColorSpace
		name = initColorSpace
		desc = Color space
        default = Ionflux::Altjira::Color::SPACE_HSV
	}
    impl = <<<
setMatrixC0(initMatrixC0);
setMatrixC1(initMatrixC1);
setMatrixC2(initMatrixC2);
setMatrixAlpha(initMatrixAlpha);
setDefaultColor(initDefaultColor, initColorSpace);
>>>
}
# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
defaultColor = other.defaultColor;
width = other.width;
height = other.height;
setMatrixC0(other.getMatrixC0());
setMatrixC1(other.getMatrixC1());
setMatrixC2(other.getMatrixC2());
setMatrixAlpha(other.getMatrixAlpha());
>>>
function.public[] = {
	spec = virtual
	type = void
	name = setDefaultColor
	shortDesc = Set default color
	longDesc = Set the default color and color space.
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = color
		desc = Color
	}
	param[] = {
		type = Ionflux::Altjira::ColorSpace
		name = newColorSpace
		desc = Color space
        default = Ionflux::Altjira::Color::SPACE_UNDEFINED
	}
    impl = <<<
FloatColor fc;
if (newColorSpace != Color::SPACE_UNDEFINED)
    fc.space = newColorSpace;
else
    fc.space = defaultColor.space;
color.getFloatColor(fc);
defaultColor = fc;
>>>
}
function.public[] = {
	spec = virtual
	type = bool
	const = true
	name = getPixel
	shortDesc = Get pixel color
	longDesc = Get pixel color.
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = color
		desc = Color
	}
    impl = <<<
FloatColor fc;
fc.space = color.space;
getPixel(x, y, fc);
floatToByte(fc, color);
>>>
    return = {
        value = true
        desc = \c true on success, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
    const = true
	name = getPixel
	shortDesc = Get pixel color
	longDesc = <<<
Get pixel color for the specified indices.

A default color component is used if a matrix for a component is undefined or any of the indices is out of bounds for that matrix.

If any of the indices are out of bounds for the pixel source and the extent for that index is not infinite, an out of bounds exception will be thrown.
>>>
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = color
		desc = Color
	}
    impl = <<<
if ((width != EXTENT_INFINITE) && (x >= width))
    throw AltjiraError("Index (x) out of bounds.");
if ((height != EXTENT_INFINITE) && (y >= height))
    throw AltjiraError("Index (y) out of bounds.");
FloatColor result;
result = defaultColor;
if (matrixC0 != 0)
{
    if (matrixC0->isWithinBounds(y, x))
        result.c0 = matrixC0->v(y, x);
}
if (matrixC1 != 0)
{
    if (matrixC1->isWithinBounds(y, x))
        result.c1 = matrixC1->v(y, x);
}
if (matrixC2 != 0)
{
    if (matrixC2->isWithinBounds(y, x))
        result.c2 = matrixC2->v(y, x);
}
if (matrixAlpha != 0)
{
    if (matrixAlpha->isWithinBounds(y, x))
        result.alpha = matrixAlpha->v(y, x);
}
toColorSpace(result, color.space);
color = result;
>>>
    return = {
        value = true
        desc = \c true on success, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = getPixel
    const = true
	shortDesc = Get pixel color
	longDesc = Get pixel color.
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::Color&
		name = color
		desc = Color
	}
    impl = <<<
FloatColor fc;
fc.space = Color::SPACE_RGB;
getPixel(x, y, fc);
color.setFromFloatColor(fc);
>>>
    return = {
        value = true
        desc = \c true on success, \c false otherwise
    }
}

# Pure virtual member functions.

# operations

