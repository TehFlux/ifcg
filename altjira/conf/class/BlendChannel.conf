# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BlendChannel.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifmapping/Mapping.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/lut_mult.hpp"'
        '"altjira/lut_add.hpp"'
        '"altjira/lut_sub.hpp"'
    }
}

# forward declarations

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BlendChannel
	shortDesc = Color blender (Channel)
	title = Color blender (Channel)
	longDesc = A color blender that replaces a single channel of the destination color with a combination of the channel itself and a single channel of the source color. Source and target opacities can be used to determine how much the destination channel is affected by either channel. It is possible to specify mappings that are applied to the source and destination channels before the operation takes place.
	group.name = altjira
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::ColorBlender
            include = altjira/ColorBlender.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'create'
        'classinfo'
        'logmessage'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = srcFunc
    desc = Source mapping
    managed = true
}
property.protected[] = {
    type = Ionflux::Mapping::Mapping*
    setFromType = Ionflux::Mapping::Mapping*
    name = destFunc
    desc = Destination mapping
    managed = true
}
property.protected[] = {
    type = Ionflux::Altjira::ChannelID
    setFromType = Ionflux::Altjira::ChannelID
    name = srcChannel
    desc = Source Channel
}
property.protected[] = {
    type = Ionflux::Altjira::ChannelID
    setFromType = Ionflux::Altjira::ChannelID
    name = destChannel
    desc = Destinantion Channel
}
property.protected[] = {
    type = Ionflux::Altjira::ColorSpace
    setFromType = Ionflux::Altjira::ColorSpace
    name = srcSpace
    desc = Source color space
}
property.protected[] = {
    type = Ionflux::Altjira::ColorSpace
    setFromType = Ionflux::Altjira::ColorSpace
    name = destSpace
    desc = Destination color space
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = Ionflux::Altjira::ColorBlender
        value = Ionflux::Altjira::Color::BLACK, Ionflux::Altjira::Color::WHITE, 1., 0.
    }
    initializer[] = {
        name = srcFunc
        value = 0
    }
    initializer[] = {
        name = destFunc
        value = 0
    }
    initializer[] = {
        name = srcChannel
        value = Ionflux::Altjira::CH_VALUE
    }
    initializer[] = {
        name = destChannel
        value = Ionflux::Altjira::CH_VALUE
    }
    initializer[] = {
        name = srcSpace
        value = Ionflux::Altjira::Color::SPACE_UNDEFINED
    }
    initializer[] = {
        name = destSpace
        value = Ionflux::Altjira::Color::SPACE_UNDEFINED
    }
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::ColorBlender
        value = initColor0, initColor1, initSourceOpacity, initTargetOpacity
    }
    initializer[] = {
        name = srcFunc
        value = initSrcFunc
    }
    initializer[] = {
        name = destFunc
        value = initDestFunc
    }
    initializer[] = {
        name = srcChannel
        value = initSrcChannel
    }
    initializer[] = {
        name = destChannel
        value = initDestChannel
    }
    initializer[] = {
        name = srcSpace
        value = initSrcSpace
    }
    initializer[] = {
        name = destSpace
        value = initDestSpace
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor0
        desc = Initial Color 0
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor1
        desc = Initial Color 1
        default = Ionflux::Altjira::Color::WHITE
    }
    param[] = {
        type = double
        name = initSourceOpacity
        desc = Initial source opacity
        default = 1.
    }
    param[] = {
        type = double
        name = initTargetOpacity
        desc = Initial target opacity
        default = 0.
    }
    param[] = {
        type = Ionflux::Altjira::ChannelID
        name = initSrcChannel
        desc = Initial source channel
        default = Ionflux::Altjira::CH_VALUE
    }
    param[] = {
        type = Ionflux::Altjira::ChannelID
        name = initDestChannel
        desc = Initial destination channel
        default = Ionflux::Altjira::CH_VALUE
    }
    param[] = {
        type = Ionflux::Altjira::ColorSpace
        name = initSrcSpace
        desc = Initial source color space
        default = Ionflux::Altjira::Color::SPACE_UNDEFINED
    }
    param[] = {
        type = Ionflux::Altjira::ColorSpace
        name = initDestSpace
        desc = Initial destination color space
        default = Ionflux::Altjira::Color::SPACE_UNDEFINED
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initSrcFunc
        desc = Initial source mapping
        default = 0
    }
    param[] = {
        type = Ionflux::Mapping::Mapping*
        name = initDestFunc
        desc = Initial destination mapping
        default = 0
    }
    impl = if (initSrcFunc != 0)\
    setSrcFunc(initSrcFunc);\
if (initDestFunc != 0)\
    setDestFunc(initDestFunc);
}

# Protected member functions.

# Public member functions.
function.copy.impl = if (this == &other)\
    return *this;
color0 = other.color0;\
color1 = other.color1;\
targetOpacity = other.targetOpacity;\
sourceOpacity = other.sourceOpacity;\
srcChannel = other.srcChannel;\
destChannel = other.destChannel;\
srcSpace = other.srcSpace;\
destSpace = other.destSpace;\
setSrcFunc(other.srcFunc);\
setDestFunc(other.destFunc);
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = double
		name = newSourceOpacity
		desc = Source opacity
        default = 1.
	}
	param[] = {
		type = double
		name = newTargetOpacity
		desc = Target opacity
        default = 0.
	}
    impl = /* <---- DEBUG ----- //\
ostringstream message;\
// ----- DEBUG ----> */\
// Determine color spaces.\
ColorSpace ssp = getColorSpaceForChannel(srcChannel, srcSpace);\
ColorSpace dsp = getColorSpaceForChannel(destChannel, destSpace);\
// Determine source and destination values.\
FloatColor sc;\
FloatColor dc;\
Ionflux::Altjira::copy(newColor0, sc);\
Ionflux::Altjira::copy(newColor1, dc);\
toColorSpace(sc, ssp);\
toColorSpace(dc, dsp);\
FloatColorValue sv = getComponent(sc, srcChannel);\
FloatColorValue dv = getComponent(dc, destChannel);\
if (srcFunc != 0)\
    sv = (*srcFunc)(sv);\
if (destFunc != 0)\
    dv = (*destFunc)(dv);\
// Perform the blending.\
setComponent(dc, destChannel, \
    newSourceOpacity * sv + newTargetOpacity * dv);\
clamp(dc);\
ColorSpace tsp = target.space;\
Ionflux::Altjira::copy(dc, target);\
toColorSpace(target, tsp);
}
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newSourceOpacity
		desc = Source opacity
        default = 255
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newTargetOpacity
		desc = Target opacity
        default = 0
	}
    impl = // Unoptimized version uses the float implementation.\
FloatColor sc;\
FloatColor dc;\
FloatColor tc;\
tc.space = target.space;\
byteToFloat(newColor0, sc);\
byteToFloat(newColor1, dc);\
blend(tc, sc, dc, byteToFloat(newSourceOpacity), \
    byteToFloat(newTargetOpacity));\
floatToByte(tc, target);
}
# Pure virtual member functions.

# operations

