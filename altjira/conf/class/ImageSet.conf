# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ImageSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Ionflux Star Database; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"altjira/types.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/Image.hpp"'
    }
}

# forward declarations
forward = {
    'class Image'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ImageSet
	shortDesc = ImageSet
	title = Image set
	longDesc = A collection of images.
	group.name = ifmapping
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
        	name = IFObject
		}
        ## other base classes
        #other[] = {
        #    include = ifmapping/Mapping.hpp
        #    name = Ionflux::Mapping::Mapping
        #}
	}
    features = {
        'classinfo'
        'create'
        'upcast'
        'copy'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = images
    desc = Images
    element = {
        type = Ionflux::Altjira::Image*
        name = Image
        managed = true
    }
}

# Public static constants.

# Protected static constants

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        type = const Ionflux::Altjira::ImageVector&
        name = initImages
        desc = Images
    }
    impl = addImages(initImages);
}

# Protected member functions.

# Public member functions.
function.copy.impl = ImageVector v0;\
for (ImageVector::const_iterator i = other.images.begin(); \
    i != other.images.end(); i++)\
\{\
    addLocalRef(*i);\
    v0.push_back(*i);\
\}\
clearImages();\
for (ImageVector::const_iterator i = v0.begin(); \
    i != v0.end(); i++)\
\{\
    addImage(*i);\
    removeLocalRef(*i);\
\}
function.public[] = {
	spec = virtual
	type = void
	name = addImages
	shortDesc = Add images
	longDesc = Add mappings from a vector of images.
	param[] = {
		type = const Ionflux::Altjira::ImageVector&
		name = newImages
		desc = Images
	}
    impl = for (ImageVector::const_iterator i = newImages.begin(); \
    i != newImages.end(); i++)\
    addImage(*i);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

