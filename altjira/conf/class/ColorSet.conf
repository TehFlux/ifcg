# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2014 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ColorSet.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/types.hpp"'
        '"altjira/constants.hpp"'
        '"altjira/utils.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/Color.hpp"'
    }
}

# forward declarations
forward = {
    'class Color'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ColorSet
	shortDesc = Color set
	title = Color set
	longDesc = A set of colors.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
	}
    features = {
        'copy'
        'upcast'
        'classinfo'
        'create'
        #'xmlio'
    }
    create = {
        allocationError = AltjiraError("Could not allocate object.")
        extendedCreate = true
    }
    xml = {
        elementName = colorset
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    param[] = {
        name = initColors
        type = Ionflux::Altjira::ColorVector&
        desc = Colors
    }
    impl = addColors(initColors);
}

# Destructor.
#destructor.impl = 

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = colors
    desc = Vector of colors
    element = {
        type = Ionflux::Altjira::Color*
        name = Color
        #plural = Colors
        managed = true
        valueType = object
        createExpr = Color::create()
    }
    xml.child = {
        name = colors
        elementName = colorvec
    }
    extendedAddFuncs = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
if (this == &other)
    return *this;
ColorVector v0;
for (ColorVector::const_iterator i = other.colors.begin(); 
    i != other.colors.end(); i++)
    v0.push_back((*i)->copy());
clearColors();
addColors(v0);
>>>
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::Altjira::ColorSet&
		name = other
		desc = Color set
	}
    impl = <<<
if (colors.size() != other.colors.size())
    return false;
for (unsigned int i = 0; i < colors.size(); i++)
{
    Color* v0 = colors[i];
    Color* v1 = other.colors[i];
    if ((v0 != 0) && (v1 != 0))
    {
        if (*v0 != *v1)
            return false;
    } else
        return false;
}
>>>
	return = {
        value = true
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::Altjira::ColorSet&
		name = other
		desc = Color set
	}
	return = {
	    value = !(*this == other);
	    desc = Result of the comparison
	}
}

# member functions overridden from IFObject
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
ostringstream status;
bool e0 = true;
for (ColorVector::const_iterator i = colors.begin(); 
    i != colors.end(); i++)
{
    if (!e0)
        status << ", ";
    else
        e0 = false;
    status << "(" << (*i)->getValueString() << ")";
}
if (colors.size() == 0)
    status << "<none>";
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

