# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Color.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	    '"ifmapping/types.hpp"'
        '"altjira/types.hpp"'
        '"altjira/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"ifmapping/utils.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
    }
}

# forward declarations
forward = {
    'struct ColorPair'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Color
	shortDesc = Color
	title = Color
	longDesc = An RGBA color. This color has the following components: red, green, blue, alpha.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = double
	setFromType = double
	name = red
	desc = Red component
#    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = green
	desc = Green component
#    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = blue
	desc = Blue component
#    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = alpha
	desc = Alpha component
#    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = hue
	desc = Hue component
	proxy = true
	impl.set = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
fc.c0 = newHue;\
setFromFloatColor(fc);
	impl.get = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
return fc.c0;
}
property.protected[] = {
	type = double
	setFromType = double
	name = saturation
	desc = Saturation component
	proxy = true
	impl.set = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
fc.c1 = newSaturation;\
setFromFloatColor(fc);
	impl.get = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
return fc.c1;
}
property.protected[] = {
	type = double
	setFromType = double
	name = luminance
	desc = Luminance component
	proxy = true
	impl.set = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
fc.c2 = newLuminance;\
setFromFloatColor(fc);
	impl.get = FloatColor fc;\
fc.space = SPACE_HSL;\
getFloatColor(fc);\
return fc.c2;
}

# Public static constants.
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = TRANSPARENT
	desc = Color: transparent
    value = Ionflux::Altjira::Color(0., 0., 0., 0.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = BLACK
	desc = Color: black
    value = Ionflux::Altjira::Color(0., 0., 0., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = WHITE
	desc = Color: white
    value = Ionflux::Altjira::Color(1., 1., 1., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_10
	desc = Color: gray (10%)
    value = Ionflux::Altjira::Color(.9, .9, .9, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_20
	desc = Color: gray (20%)
    value = Ionflux::Altjira::Color(.8, .8, .8, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_30
	desc = Color: gray (30%)
    value = Ionflux::Altjira::Color(.7, .7, .7, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_40
	desc = Color: gray (40%)
    value = Ionflux::Altjira::Color(.6, .6, .6, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_50
	desc = Color: gray (50%)
    value = Ionflux::Altjira::Color(.5, .5, .5, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_60
	desc = Color: gray (60%)
    value = Ionflux::Altjira::Color(.4, .4, .4, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_70
	desc = Color: gray (70%)
    value = Ionflux::Altjira::Color(.3, .3, .3, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_80
	desc = Color: gray (80%)
    value = Ionflux::Altjira::Color(.2, .2, .2, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GRAY_90
	desc = Color: gray (90%)
    value = Ionflux::Altjira::Color(.1, .1, .1, 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = RED
	desc = Color: red
    value = Ionflux::Altjira::Color(1., 0., 0., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = GREEN
	desc = Color: green
    value = Ionflux::Altjira::Color(0., 1., 0., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = BLUE
	desc = Color: blue
    value = Ionflux::Altjira::Color(0., 0., 1., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = CYAN
	desc = Color: cyan
    value = Ionflux::Altjira::Color(0., 1., 1., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = MAGENTA
	desc = Color: magenta
    value = Ionflux::Altjira::Color(1., 0., 1., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = YELLOW
	desc = Color: yellow
    value = Ionflux::Altjira::Color(1., 1., 0., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = VIOLET
	desc = Color: violet
    value = Ionflux::Altjira::Color(0.56, 0., 1., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::Color
	name = ORANGE
	desc = Color: orange
    value = Ionflux::Altjira::Color(1., 0.5, 0., 1.)
}
constant.public[] = {
	type = Ionflux::Altjira::ColorSpace
	name = SPACE_UNDEFINED
	desc = Color space: undefined
    value = 0
}
constant.public[] = {
	type = Ionflux::Altjira::ColorSpace
	name = SPACE_RGB
	desc = Color space: RGB
    value = 1
}
constant.public[] = {
	type = Ionflux::Altjira::ColorSpace
	name = SPACE_HSV
	desc = Color space: HSV
    value = 2
}
constant.public[] = {
	type = Ionflux::Altjira::ColorSpace
	name = SPACE_HSL
	desc = Color space: HSL
    value = 3
}

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = red
        value = 0.0
    }
    initializer[] = {
        name = green
        value = 0.0
    }
    initializer[] = {
        name = blue
        value = 0.0
    }
    initializer[] = {
        name = alpha
        value = 0.0
    }
}
constructor.public[] = {
	param[] = {
		type = const ByteColor&
		name = initColor
		desc = Initial color
	}
    impl = *this = initColor;
}
constructor.public[] = {
	param[] = {
		type = const FloatColor&
		name = initColor
		desc = Initial color
	}
    impl = *this = initColor;
}
constructor.public[] = {
	param[] = {
		type = FloatColorValue
		name = initRed
		desc = Initial red component
	}
	param[] = {
		type = FloatColorValue
		name = initGreen
		desc = Initial green component
	}
	param[] = {
		type = FloatColorValue
		name = initBlue
		desc = Initial blue component
	}
	param[] = {
		type = FloatColorValue
		name = initAlpha
		desc = Initial alpha component
	}
    impl = red = initRed;\
green = initGreen;\
blue = initBlue;\
alpha = initAlpha;
}
constructor.public[] = {
	param[] = {
		type = ByteColorValue
		name = initRed
		desc = Initial red component
	}
	param[] = {
		type = ByteColorValue
		name = initGreen
		desc = Initial green component
	}
	param[] = {
		type = ByteColorValue
		name = initBlue
		desc = Initial blue component
	}
	param[] = {
		type = ByteColorValue
		name = initAlpha
		desc = Initial alpha component
	}
    impl = red = byteToFloat(initRed);\
green = byteToFloat(initGreen);\
blue = byteToFloat(initBlue);\
alpha = byteToFloat(initAlpha);
}
constructor.public[] = {
	param[] = {
		type = const std::string&
		name = hexColor
		desc = Hex color
	}
    impl = setFromHex(hexColor);
}

# Protected member functions.

# Public member functions.
function.copy.impl = red = other.red;\
green = other.green;\
blue = other.blue;\
alpha = other.alpha;
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = setFromHex
	shortDesc = Set from hexadecimal representation
	longDesc = Set the color from a hexadecimal representation starting with a hash. The representation uses one byte (two hexadecimal digits) per component, in the order RGBA.
	param[] = {
		type = const std::string&
		name = hexColor
		desc = Hexadecimal color
	}
    impl = red = 0.0;\
green = 0.0;\
blue = 0.0;\
alpha = 1.0;\
if ((hexColor.size() < 1)\
    || (hexColor[0] != '#'))\
    return *this;\
if (hexColor.size() >= 3)\
    red = static_cast<double>(\
        strtol(hexColor.substr(1, 2).c_str(), 0, 16)) / 255.;\
if (hexColor.size() >= 5)\
    green = static_cast<double>(\
        strtol(hexColor.substr(3, 2).c_str(), 0, 16)) / 255.;\
if (hexColor.size() >= 7)\
    blue = static_cast<double>(\
        strtol(hexColor.substr(5, 2).c_str(), 0, 16)) / 255.;\
if (hexColor.size() >= 9)\
    alpha = static_cast<double>(\
        strtol(hexColor.substr(7, 2).c_str(), 0, 16)) / 255.;
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getHex
	const = true
	shortDesc = Get hexadecimal representation
	longDesc = Get a hexadecimal representation of the color.
    impl = Color target(*this);\
target.clamp();\
std::ostringstream result;\
result << "#";\
result << right << setfill('0') << hex \
    << setw(2) << static_cast<int>(::round(target.getRed() * 255.))\
    << setw(2) << static_cast<int>(::round(target.getGreen() * 255.))\
    << setw(2) << static_cast<int>(::round(target.getBlue() * 255.))\
    << setw(2) << static_cast<int>(::round(target.getAlpha() * 255.));
    return = {
        value = result.str()
        desc = Hexadecimal representation
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = clampRed
	shortDesc = Clamp red component
	longDesc = Clamp the red component to the specified range of values.
	param[] = {
		type = const Ionflux::Mapping::Range&
		name = range
		desc = Range
        default = DEFAULT_CLAMP_RANGE
	}
    impl = red = Ionflux::Mapping::clamp(red, range);
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = clampGreen
	shortDesc = Clamp green component
	longDesc = Clamp the green component to the specified range of values.
	param[] = {
		type = const Ionflux::Mapping::Range&
		name = range
		desc = Range
        default = DEFAULT_CLAMP_RANGE
	}
    impl = green = Ionflux::Mapping::clamp(green, range);
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = clampBlue
	shortDesc = Clamp blue component
	longDesc = Clamp the blue component to the specified range of values.
	param[] = {
		type = const Ionflux::Mapping::Range&
		name = range
		desc = Range
        default = DEFAULT_CLAMP_RANGE
	}
    impl = blue = Ionflux::Mapping::clamp(blue, range);
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = clampAlpha
	shortDesc = Clamp alpha component
	longDesc = Clamp the alpha component to the specified range of values.
	param[] = {
		type = const Ionflux::Mapping::Range&
		name = range
		desc = Range
        default = DEFAULT_CLAMP_RANGE
	}
    impl = alpha = Ionflux::Mapping::clamp(alpha, range);
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = clamp
	shortDesc = Clamp components
	longDesc = Clamp the components to the specified range of values.
	param[] = {
		type = const Ionflux::Mapping::Range&
		name = range
		desc = Range
        default = DEFAULT_CLAMP_RANGE
	}
    impl = clampRed(range);\
clampGreen(range);\
clampBlue(range);\
clampAlpha(range);
    return = {
        desc = The color itself
        value = *this
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::Color
	name = interpolate
	shortDesc = Interpolate colors
	longDesc = Interpolate between two colors. The interpolation used is linear and component-wise.
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = first
		desc = First color
	}
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = second
		desc = Second color
	}
	param[] = {
		type = double
		name = factor
		desc = Interpolation factor
	}
	return = {
        value = Color(first.getRed() + factor * (second.getRed() - first.getRed()), \
        first.getGreen() + factor * (second.getGreen() - first.getGreen()), \
        first.getBlue() + factor * (second.getBlue() - first.getBlue()), \
        first.getAlpha() + factor * (second.getAlpha() - first.getAlpha()))
        desc = Interpolated color
    }
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = setFromFloatColor
	shortDesc = Set color components from float color
	longDesc = Set the color component values from a float color.
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = other
		desc = Color
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = *this = other;
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = setComponents
	shortDesc = Set color components
	longDesc = Set the color component values.
	param[] = {
		type = Ionflux::Altjira::FloatColorValue
		name = newRed
		desc = Color component (red)
	}
	param[] = {
		type = Ionflux::Altjira::FloatColorValue
		name = newGreen
		desc = Color component (green)
	}
	param[] = {
		type = Ionflux::Altjira::FloatColorValue
		name = newBlue
		desc = Color component (blue)
	}
	param[] = {
		type = Ionflux::Altjira::FloatColorValue
		name = newAlpha
		desc = Color component (alpha)
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = red = newRed;\
green = newGreen;\
blue = newBlue;\
alpha = newAlpha;
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = setComponents
	shortDesc = Set color components
	longDesc = Set the color component values.
	param[] = {
		type = Ionflux::Altjira::ByteColorValue
		name = newRed
		desc = Color component (red)
	}
	param[] = {
		type = Ionflux::Altjira::ByteColorValue
		name = newGreen
		desc = Color component (green)
	}
	param[] = {
		type = Ionflux::Altjira::ByteColorValue
		name = newBlue
		desc = Color component (blue)
	}
	param[] = {
		type = Ionflux::Altjira::ByteColorValue
		name = newAlpha
		desc = Color component (alpha)
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = red = byteToFloat(newRed);\
green = byteToFloat(newGreen);\
blue = byteToFloat(newBlue);\
alpha = byteToFloat(newAlpha);
}
function.public[] = {
	spec = virtual
	type = void
	const = true
	name = getFloatColor
	shortDesc = Get float color
	longDesc = Get color components in a float color structure.
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = color
		desc = Color
	}
    impl = ColorSpace ts = color.space;\
color.c0 = red;\
color.c1 = green;\
color.c2 = blue;\
color.alpha = alpha;\
color.space = SPACE_RGB;\
toColorSpace(color, ts);
}
function.public[] = {
	spec = virtual
	type = void
	const = true
	name = getByteColor
	shortDesc = Get byte color
	longDesc = Get color components in a byte color structure.
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = color
		desc = Color
	}
    impl = FloatColor fc;\
fc.space = color.space;\
getFloatColor(fc);\
floatToByte(fc, color);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = setFromByteColor
	shortDesc = Set color components from byte color
	longDesc = Set the color component values from a byte color.
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = other
		desc = Color
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = *this = other;
}
function.public[] = {
	spec = virtual
	type = void
	name = multiply
	shortDesc = Multiply color components
	longDesc = Multiply the color components (except alpha) by a scalar value.
	param[] = {
		type = Ionflux::Altjira::Color&
		name = target
		desc = Target color
	}
	param[] = {
		type = double
		name = value
		desc = Value
	}
    impl = target.red = red * value;\
target.green = green * value;\
target.blue = blue * value;\
target.alpha = alpha;
}
function.public[] = {
	spec = virtual
	type = void
	name = preMultiply
	shortDesc = Pre-multiply alpha
	longDesc = Pre-multiply alpha value.
	param[] = {
		type = Ionflux::Altjira::Color&
		name = target
		desc = Target color
	}
    impl = multiply(target, alpha);
}
function.public[] = {
	spec = virtual
	type = void
	name = divideAlpha
	shortDesc = Divide by alpha
	longDesc = Divide color components by alpha value. This can be used to undo a premultiply operation.
	param[] = {
		type = Ionflux::Altjira::Color&
		name = target
		desc = Target color
	}
    impl = multiply(target, 1. / alpha);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a color.
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = other
		desc = Color
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = FloatColor fc = other;\
toRGB(fc);\
red = fc.c0;\
green = fc.c1;\
blue = fc.c2;\
alpha = fc.alpha;
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color&
	name = operator=
	shortDesc = Assignment operator
	longDesc = Assign a color.
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = other
		desc = Color
	}
	return = {
        value = *this
	    desc = The object itself
    }
    impl = FloatColor fc;\
byteToFloat(other, fc);\
toRGB(fc);\
red = fc.c0;\
green = fc.c1;\
blue = fc.c2;\
alpha = fc.alpha;
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator==
	const = true
	shortDesc = Comparison operator: equality
	longDesc = Compare equality.
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = other
		desc = Color
	}
	return = {
        value = (red == other.getRed())\
    && (green == other.getGreen())\
    && (blue == other.getBlue())\
    && (alpha == other.getAlpha())
	    desc = Result of the comparison
    }
}
function.public[] = {
	spec = virtual
	type = bool
	name = operator!=
	const = true
	shortDesc = Comparison operator: inequality
	longDesc = Compare inequality.
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = other
		desc = Color
	}
	return.value = !(*this == other);
	return.desc = Result of the comparison
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getValueString
	const = true
	shortDesc = Get string representation of value
	longDesc = Get a string representation of the value of the object.
	impl = <<<
std::ostringstream status;
status << red << ", " << green << ", " << blue << ", " << alpha;
>>>
    return = {
        value = status.str()
        desc = String representation
    }
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::Color
	name = interpolate
	shortDesc = Interpolate colors
	longDesc = Interpolate between two colors. The interpolation used is linear and component-wise.
	param[] = {
		type = const Ionflux::Altjira::ColorPair&
		name = colors
		desc = Colors
	}
	param[] = {
		type = double
		name = factor
		desc = Interpolation factor
        default = 0.5
	}
	return = {
        value = Color(colors.first.getRed() \
            + factor * (colors.second.getRed() - colors.first.getRed()), \
        colors.first.getGreen() \
            + factor * (colors.second.getGreen() - colors.first.getGreen()), \
        colors.first.getBlue() \
            + factor * (colors.second.getBlue() - colors.first.getBlue()), \
        colors.first.getAlpha() \
            + factor * (colors.second.getAlpha() - colors.first.getAlpha()))
        desc = Interpolated color
    }
}

# Pure virtual member functions.

# operations

