# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# BlendLighten.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	## these includes will be added in the header file
	#header = {
	#}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/lut_mult.hpp"'
        '"altjira/lut_add.hpp"'
        '"altjira/lut_sub.hpp"'
        '"altjira/AltjiraError.hpp"'
    }
}

# forward declarations

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = BlendLighten
	shortDesc = Color blender (Lighten)
	title = Color blender (Lighten)
	longDesc = A color blender that implements the Lighten method. This method selects the brighter of the source and destination color components (see http://www.w3.org/TR/2004/WD-SVG12-20041027/rendering.html for details).
	group.name = altjira
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::ColorBlender
            include = altjira/ColorBlender.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'create'
        'classinfo'
        'logmessage'
        'upcast'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::ColorBlender
        value = initColor0, initColor1, initSourceOpacity, initTargetOpacity
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor0
        desc = Initial Color 0
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor1
        desc = Initial Color 1
        default = Ionflux::Altjira::Color::WHITE
    }
    param[] = {
        type = double
        name = initSourceOpacity
        desc = Initial source opacity
        default = 1.
    }
    param[] = {
        type = double
        name = initTargetOpacity
        desc = Initial target opacity
        default = 1.
    }
    impl = 
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = color0 = other.color0;\
color1 = other.color1;\
targetOpacity = other.targetOpacity;\
sourceOpacity = other.sourceOpacity;
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = double
		name = newSourceOpacity
		desc = Source opacity
        default = 1.
	}
	param[] = {
		type = double
		name = newTargetOpacity
		desc = Target opacity
        default = 1.
	}
    impl = /* <---- DEBUG ----- //\
ostringstream message;\
// ----- DEBUG ----> */\
// Multiply alpha values by layer opacity.\
FloatColor sc;\
FloatColor dc;\
Ionflux::Altjira::copy(newColor0, sc);\
Ionflux::Altjira::copy(newColor1, dc);\
sc.alpha *= newSourceOpacity;\
dc.alpha *= newTargetOpacity;\
/* <---- DEBUG ----- //\
message.str("");\
message << "s0 = " << s0.getString() << ", d0 = " << d0.getString();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
// Pre-multiply alpha on source and target colors.\
preMultiply(sc);\
preMultiply(dc);\
/* <---- DEBUG ----- //\
message.str("");\
message << "sc0 = " << sc0.getString() << ", dc0 = " << dc0.getString();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
// Perform the blending.\
if (sc.c0 * dc.alpha > dc.c0 * sc.alpha)\
    target.c0 = sc.c0 + dc.c0 * (1. - sc.alpha);\
else\
    target.c0 = dc.c0 + sc.c0 * (1. - dc.alpha);\
if (sc.c1 * dc.alpha > dc.c1 * sc.alpha)\
    target.c1 = sc.c1 + dc.c1 * (1. - sc.alpha);\
else\
    target.c1 = dc.c1 + sc.c1 * (1. - dc.alpha);\
if (sc.c2 * dc.alpha > dc.c2 * sc.alpha)\
    target.c2 = sc.c2 + dc.c2 * (1. - sc.alpha);\
else\
    target.c2 = dc.c2 + sc.c2 * (1. - dc.alpha);\
target.alpha = sc.alpha + dc.alpha - sc.alpha * dc.alpha;\
target.space = Color::SPACE_RGB;\
/* <---- DEBUG ----- //\
message.str("");\
message << "r0 = " << r0.getString();\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
divideAlpha(target);
}
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newSourceOpacity
		desc = Source opacity
        default = 255
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newTargetOpacity
		desc = Target opacity
        default = 255
	}
    impl = /* <---- DEBUG ----- //\
ostringstream message;\
// ----- DEBUG ----> */\
// Multiply alpha values by layer opacity.\
ByteColor sc;\
ByteColor dc;\
Ionflux::Altjira::copy(newColor0, sc);\
Ionflux::Altjira::copy(newColor1, dc);\
sc.alpha = LUT_MULT[256 * sc.alpha + newSourceOpacity];\
dc.alpha = LUT_MULT[256 * dc.alpha + newTargetOpacity];\
/* <---- DEBUG ----- //\
message.str("");\
message << "sc = " << Ionflux::Altjira::getString(sc) << ", dc = " \
<< Ionflux::Altjira::getString(dc);\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
// Pre-multiply alpha on source and target colors.\
preMultiply(sc);\
preMultiply(dc);\
/* <---- DEBUG ----- //\
message.str("");\
message << "sc(p) = " << Ionflux::Altjira::getString(sc) << ", dc(p) = " \
<< Ionflux::Altjira::getString(dc);\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
/* Perform the blending.\
   256 * 255 (alpha = 1.) = 65280. */\
if (lutMult(sc.c0, dc.alpha) > lutMult(dc.c0, sc.alpha))\
    target.c0 = LUT_ADD[256 * sc.c0 + LUT_MULT[ \
        256 * dc.c0 + LUT_SUB[65280 + sc.alpha]]];\
else\
    target.c0 = LUT_ADD[256 * dc.c0 + LUT_MULT[ \
        256 * sc.c0 + LUT_SUB[65280 + dc.alpha]]];\
if (lutMult(sc.c1, dc.alpha) > lutMult(dc.c1, sc.alpha))\
    target.c1 = LUT_ADD[256 * sc.c1 + LUT_MULT[ \
        256 * dc.c1 + LUT_SUB[65280 + sc.alpha]]];\
else\
    target.c1 = LUT_ADD[256 * dc.c1 + LUT_MULT[ \
        256 * sc.c1 + LUT_SUB[65280 + dc.alpha]]];\
if (lutMult(sc.c2, dc.alpha) > lutMult(dc.c2, sc.alpha))\
    target.c2 = LUT_ADD[256 * sc.c2 + LUT_MULT[ \
        256 * dc.c2 + LUT_SUB[65280 + sc.alpha]]];\
else\
    target.c2 = LUT_ADD[256 * dc.c2 + LUT_MULT[ \
        256 * sc.c2 + LUT_SUB[65280 + dc.alpha]]];\
target.alpha = sc.alpha + dc.alpha \
    - LUT_MULT[256 * sc.alpha + dc.alpha];\
target.space = Color::SPACE_RGB;\
/* <---- DEBUG ----- //\
message.str("");\
message << "target = " << Ionflux::Altjira::getString(target);\
log(IFLogMessage(message.str(), VL_DEBUG, this, "blend"));\
// ----- DEBUG ----> */\
divideAlpha(target);
}
# Pure virtual member functions.

# operations

