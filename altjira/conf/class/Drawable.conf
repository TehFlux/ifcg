# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Drawable.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write 
# to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '<cairo.h>'
        '<cmath>'
        '"altjira/ColorBlender.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '<pango/pangocairo.h>'
        '<librsvg/rsvg.h>'
        #'<librsvg/rsvg-cairo.h>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/BlendSrcOver.hpp"'
        '"altjira/ImagePattern.hpp"'
    }
}

# forward declarations
forward = {
    'class Pattern'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Drawable
	shortDesc = Drawable
	title = Drawable
	longDesc = An image with support for drawing operations.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::Image
            include = altjira/Image.hpp
            hasClassInfo = true
        }
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}


# Member variables.
variable.protected[] = {
	type = cairo_t*
	name = context
	desc = Cairo context
}
variable.protected[] = {
	type = cairo_surface_t*
	name = surface
	desc = Cairo surface
}
variable.protected[] = {
	type = bool
	name = inProgress
	desc = Drawing in progress flag
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Public constructors.
constructor.copy.impl = Ionflux::Altjira::init();\
*this = other;
constructor.default = {
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = surface
        value = 0
    }
    initializer[] = {
        name = inProgress
        value = false
    }
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Image
        value = fileName
    }
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = surface
        value = 0
    }
    initializer[] = {
        name = inProgress
        value = false
    }
	param[] = {
		type = const std::string&
		name = fileName
		desc = File name of an image to be loaded
	}
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Image
        value = initImage
    }
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = surface
        value = 0
    }
    initializer[] = {
        name = inProgress
        value = false
    }
	param[] = {
		type = const Ionflux::Altjira::Image&
		name = initImage
		desc = Image
	}
    impl = 
}
constructor.public[] = {
    initializer[] = {
        name = Ionflux::Altjira::Image
        value = initWidth, initHeight, initAlpha, initBitsPerSample, initColorSpace
    }
    initializer[] = {
        name = context
        value = 0
    }
    initializer[] = {
        name = surface
        value = 0
    }
    initializer[] = {
        name = inProgress
        value = false
    }
	param[] = {
		type = unsigned int
		name = initWidth
		desc = Width
	}
	param[] = {
		type = unsigned int
		name = initHeight
		desc = Height
	}
	param[] = {
		type = bool
		name = initAlpha
		desc = Create alpha channel
        default = true
	}
	param[] = {
		type = unsigned int
		name = initBitsPerSample
		desc = Bits pers sample
        default = 8
	}
	param[] = {
		type = Ionflux::Altjira::ColorSpace
		name = initColorSpace
		desc = Color space
        default = Ionflux::Altjira::Color::SPACE_RGB
	}
    impl = 
}

# Destructor.
destructor.impl = discard();

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = transformPattern
	shortDesc = Transform pattern
	longDesc = Transform the pattern coordinate system using the specified matrix.\
\
\\note This is an ugly hack to make pattern transformations available to classes derived from drawable. This should be solved instead by adding a public transform function to Pattern.
	param[] = {
        type = Ionflux::Altjira::Pattern&
        name = pattern
        desc = Pattern
	}
	param[] = {
        type = cairo_matrix_t&
        name = m
        desc = Matrix
	}
	impl = pattern.transform(m);
}

# Public member functions.
function.copy.impl = Ionflux::Altjira::Image::operator=(other);
function.public[] = {
    spec = virtual
    type = void
    name = begin
    shortDesc = Begin drawing
    longDesc = Begin a sequence of drawing options.
    param[] = {
        type = double
        name = originX
        desc = Coordinate origin (X)
        default = 0.
    }
    param[] = {
        type = double
        name = originY
        desc = Coordinate origin (Y)
        default = 0.
    }
    impl = if (drawingInProgress())\
    throw AltjiraError("[Drawable::begin] " \
        "Drawing operation in progress!");\
// Just to be sure surface and context are properly cleaned up.\
discard();\
surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, \
    width, height);\
if (cairo_surface_status(surface) != CAIRO_STATUS_SUCCESS)\
\{\
    cairo_surface_destroy(surface);\
    surface = 0;\
    throw AltjiraError("[Drawable::begin] "\
        "Could not allocate image surface!");\
\}\
context = cairo_create(surface);\
if (cairo_status(context) != CAIRO_STATUS_SUCCESS)\
\{\
    cairo_destroy(context);\
    context = 0;\
    throw AltjiraError("[Drawable::begin] "\
        "Could not allocate drawing context!");\
\}\
inProgress = true;
}
function.public[] = {
    spec = virtual
    type = void
    name = discard
    shortDesc = Discard drawing
    longDesc = Discard the current drawing without compositing it onto the image.
    impl = if (surface != 0)\
\{\
    cairo_surface_destroy(surface);\
    surface = 0;\
\}\
if (context != 0)\
\{\
    cairo_destroy(context);\
    context = 0;\
\}\
inProgress = false;
}
function.public[] = {
    spec = virtual
    type = void
    name = finish
    shortDesc = Finish drawing
    longDesc = Finish a sequence of drawing options. The drawing will be composited onto the image using the specified color blender. If no color blender is specified, the default SrcOver blender will be used.
	param[] = {
		type = const Ionflux::Altjira::ColorBlender*
		name = blender
		desc = Color blender
        default = 0
	}
    impl = if (!drawingInProgress())\
    return;\
bool ownBlender = false;\
if (blender == 0)\
\{\
    blender = Ionflux::Altjira::BlendSrcOver::create();\
    ownBlender = true;\
\}\
unsigned int srcRowStride = cairo_image_surface_get_stride(surface);\
Ionflux::Altjira::PixelData sp = cairo_image_surface_get_data(surface);\
if (sp == 0)\
    throw AltjiraError("[Drawable::finish] "\
        "Could not obtain surface data.");\
PixelData tp = pixels;\
ByteColor sc;\
ByteColor tc;\
ByteColor rc;\
sc.space = Color::SPACE_RGB;\
tc.space = Color::SPACE_RGB;\
rc.space = Color::SPACE_RGB;\
ByteColorValue so = floatToByte(blender->getSourceOpacity());\
ByteColorValue to = floatToByte(blender->getTargetOpacity());\
cairo_surface_flush(surface);\
for (unsigned int i = 0; i < width; i++)\
    for (unsigned int j = 0; j < height; j++)\
    \{\
        PixelData ps = sp + j * srcRowStride + i * 4;\
        PixelData pt = tp + j * rowStride + i * numChannels;\
        Ionflux::ObjectBase::UInt32* p0 = \
            reinterpret_cast<Ionflux::ObjectBase::UInt32*>(ps);\
        fromUInt(*p0, sc, true);\
        tc.c0 = pt[0];\
        tc.c1 = pt[1];\
        tc.c2 = pt[2];\
        if (numChannels >= 4)\
            tc.alpha = pt[3];\
        else\
            tc.alpha = 255;\
        blender->blend(rc, sc, tc, so, to);\
        pt[0] = rc.c0;\
        pt[1] = rc.c1;\
        pt[2] = rc.c2;\
        if (numChannels >= 4)\
            pt[3] = rc.alpha;\
    \}\
// cairo_surface_write_to_png(surface, "temp/cairotest01.png");\
if (ownBlender)\
    delete blender;\
discard();
}
function.public[] = {
	spec = virtual
	type = void
	name = save
	shortDesc = Save drawing state
	longDesc = Save the drawing state.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::save] " \
        "No drawing operation in progress!");\
cairo_save(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = restore
	shortDesc = Restore drawing state
	longDesc = Restore the drawing state that was previously saved using a save() operation.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::restore] " \
        "No drawing operation in progress!");\
cairo_restore(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = translate
	shortDesc = Translate
	longDesc = Translate the coordinate origin.
	param[] = {
        type = double
        name = tx
        desc = Translation (X)
	}
	param[] = {
        type = double
        name = ty
        desc = Translation (Y)
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::translate] " \
        "No drawing operation in progress!");\
cairo_translate(context, tx, ty);
}
function.public[] = {
	spec = virtual
	type = void
	name = scale
	shortDesc = Scale
	longDesc = Scale the coordinate system.
	param[] = {
        type = double
        name = sx
        desc = Scale factor (X)
	}
	param[] = {
        type = double
        name = sy
        desc = Scale factor (Y)
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::scale] " \
        "No drawing operation in progress!");\
cairo_scale(context, sx, sy);
}
function.public[] = {
	spec = virtual
	type = void
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the coordinate system.
	param[] = {
        type = double
        name = phi
        desc = Rotation angle
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::rotate] " \
        "No drawing operation in progress!");\
cairo_rotate(context, phi);
}
function.public[] = {
	spec = virtual
	type = void
	name = newPath
	shortDesc = Start new path
	longDesc = Start a new path.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::newPath] " \
        "No drawing operation in progress!");\
cairo_new_path(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = newSubPath
	shortDesc = Start new sub-path
	longDesc = Start a new sub-path.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::newSubPath] " \
        "No drawing operation in progress!");\
cairo_new_sub_path(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = closePath
	shortDesc = Close path
	longDesc = Close the current path.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::closePath] " \
        "No drawing operation in progress!");\
cairo_close_path(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = moveTo
	shortDesc = Move to
	longDesc = Change the current drawing position.
	param[] = {
        type = double
        name = x
        desc = X coordinate
	}
	param[] = {
        type = double
        name = y
        desc = Y coordinate
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::moveTo] " \
        "No drawing operation in progress!");\
cairo_move_to(context, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = lineTo
	shortDesc = Line to
	longDesc = Draw a line segment.
	param[] = {
        type = double
        name = x
        desc = X coordinate
	}
	param[] = {
        type = double
        name = y
        desc = Y coordinate
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::lineTo] " \
        "No drawing operation in progress!");\
cairo_line_to(context, x, y);
}
function.public[] = {
	spec = virtual
	type = void
	name = curveTo
	shortDesc = Curve to
	longDesc = Draw a cubic Bézier spline segment.
	param[] = {
        type = double
        name = x0
        desc = X coordinate (first control point)
	}
	param[] = {
        type = double
        name = y0
        desc = Y coordinate (first control point)
	}
	param[] = {
        type = double
        name = x1
        desc = X coordinate (second control point)
	}
	param[] = {
        type = double
        name = y1
        desc = Y coordinate (second control point)
	}
	param[] = {
        type = double
        name = x2
        desc = X coordinate (third control point)
	}
	param[] = {
        type = double
        name = y2
        desc = Y coordinate (third control point)
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::curveTo] " \
        "No drawing operation in progress!");\
cairo_curve_to(context, x0, y0, x1, y1, x2, y2);
}
function.public[] = {
	spec = virtual
	type = void
	name = rectangle
	shortDesc = Rectangle
	longDesc = Add a rectangle to the current path.
	param[] = {
        type = double
        name = x
        desc = X coordinate of upper left corner
	}
	param[] = {
        type = double
        name = y
        desc = Y coordinate of upper left corner
	}
	param[] = {
        type = double
        name = width
        desc = Width
	}
	param[] = {
        type = double
        name = height
        desc = height
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::rectangle] " \
        "No drawing operation in progress!");\
cairo_rectangle(context, x, y, width, height);
}
function.public[] = {
	spec = virtual
	type = void
	name = arc
	shortDesc = Arc
	longDesc = Add an arc to the current path.
	param[] = {
        type = double
        name = x
        desc = X coordinate of center
	}
	param[] = {
        type = double
        name = y
        desc = Y coordinate of center
	}
	param[] = {
        type = double
        name = radius
        desc = Radius
	}
	param[] = {
        type = double
        name = phi0
        desc = From angle
        default = 0.
	}
	param[] = {
        type = double
        name = phi1
        desc = To angle
        default = 2. * M_PI
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::arc] " \
        "No drawing operation in progress!");\
cairo_arc(context, x, y, radius, phi0, phi1);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceColor
	shortDesc = Set source color
	longDesc = Set a source color for drawing.
	param[] = {
        type = const Ionflux::Altjira::Color&
        name = color
        desc = Color
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::setSourceColor] " \
        "No drawing operation in progress!");\
cairo_set_source_rgba(context, color.getRed(), color.getGreen(), \
    color.getBlue(), color.getAlpha());
}
function.public[] = {
	spec = virtual
	type = void
	name = setSource
	shortDesc = Set source pattern
	longDesc = Set a source pattern for drawing.
	param[] = {
        type = Ionflux::Altjira::Pattern&
        name = pattern
        desc = Pattern
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::setSource] " \
        "No drawing operation in progress!");\
cairo_set_source(context, pattern.pattern);
}
function.public[] = {
	spec = virtual
	type = void
	name = setSourceImage
	shortDesc = Set source image
	longDesc = Set a source image for drawing. The image will be placed at the position specified by the offset parameters. The source image will be referenced.
	param[] = {
        type = Ionflux::Altjira::Image*
        name = image
        desc = Image
	}
    param[] = {
        type = double
        name = x
        desc = Offset (X)
        default = 0.
    }
    param[] = {
        type = double
        name = y
        desc = Offset (Y)
        default = 0.
    }
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::setSourceImage] " \
        "No drawing operation in progress!");\
if (image == 0)\
    throw AltjiraError("[Drawable::setSourceImage] " \
        "Image is null!");\
ImagePattern p0(image, x, y);\
setSource(p0);
}
function.public[] = {
	spec = virtual
	type = void
	name = setFillRule
	shortDesc = Set fill rule
	longDesc = Set the fill rule for drawing.
	param[] = {
        type = Ionflux::Altjira::FillRule
        name = fillRule
        desc = Fill rule
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::setFillRule] " \
        "No drawing operation in progress!");\
cairo_fill_rule_t fr0;\
if (fillRule == FILL_RULE_EVEN_ODD)\
    fr0 = CAIRO_FILL_RULE_EVEN_ODD;\
else\
    fr0 = CAIRO_FILL_RULE_WINDING;\
cairo_set_fill_rule(context, fr0);
}
function.public[] = {
	spec = virtual
	type = void
	name = stroke
	shortDesc = Stroke path
	longDesc = Stroke the current path.
	param[] = {
        type = double
        name = lineWidth
        desc = Line width
        default = 1.
	}
	param[] = {
        type = bool
        name = preserve
        desc = Preserve path
        default = false
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::restore] " \
        "No drawing operation in progress!");\
cairo_set_line_width(context, lineWidth);\
if (!preserve)\
    cairo_stroke(context);\
else\
    cairo_stroke_preserve(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = fillPath
	shortDesc = Fill path
	longDesc = Fill the current path.
	param[] = {
        type = bool
        name = preserve
        desc = Preserve path
        default = false
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::restore] " \
        "No drawing operation in progress!");\
if (!preserve)\
    cairo_fill(context);\
else\
    cairo_fill_preserve(context);
}
function.public[] = {
	spec = virtual
	type = void
	name = paint
	shortDesc = Paint
	longDesc = Paint the current path.
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::restore] " \
        "No drawing operation in progress!");\
cairo_paint(context);
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::ImageRect
	name = getTextSize
	const = true
	shortDesc = Get text size
	longDesc = Get the size of the specified text as it would be rendered to the Drawable.
	param[] = {
	    type = const std::string&
	    name = text
	    desc = Text
	}
	param[] = {
	    type = const std::string&
	    name = fontDesc
	    desc = Font description
	    default = DEFAULT_FONT_DESCRIPTION
	}
	param[] = {
	    type = double
	    name = fontSize
	    desc = Font size
	    default = DEFAULT_FONT_SIZE
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::getTextSize] " \
        "No drawing operation in progress!");\
ImageRect result;\
PangoLayout* l0 = pango_cairo_create_layout(context);\
pango_layout_set_text(l0, text.c_str(), text.size());\
PangoFontDescription* fd0 = pango_font_description_from_string(\
    fontDesc.c_str());\
pango_font_description_set_absolute_size(fd0, fontSize * PANGO_SCALE);\
pango_layout_set_font_description(l0, fd0);\
pango_cairo_update_layout(context, l0);\
int w = 0;\
int h = 0;\
pango_layout_get_size(l0, &w, &h);\
initRectangle(result, 0., 0., \
    static_cast<double>(w) / PANGO_SCALE, \
    static_cast<double>(h) / PANGO_SCALE);\
pango_font_description_free(fd0);\
g_object_unref(l0);
    return = {
        value = result
        desc = A rectangle corresponding to the size of the text
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = drawText
	shortDesc = Draw text
	longDesc = Draw text on the drawable.
	param[] = {
	    type = double
	    name = x
	    desc = X coordinate
	}
	param[] = {
	    type = double
	    name = y
	    desc = Y coordinate
	}
	param[] = {
	    type = const std::string&
	    name = text
	    desc = Text
	}
	param[] = {
	    type = const std::string&
	    name = fontDesc
	    desc = Font description
	    default = DEFAULT_FONT_DESCRIPTION
	}
	param[] = {
	    type = double
	    name = fontSize
	    desc = Font size
	    default = DEFAULT_FONT_SIZE
	}
	param[] = {
	    type = const Ionflux::Altjira::Color&
	    name = color
	    desc = Text color
	    default = Ionflux::Altjira::Color::BLACK
	}
	impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::getTextSize] " \
        "No drawing operation in progress!");\
save();\
PangoLayout* l0 = pango_cairo_create_layout(context);\
pango_layout_set_text(l0, text.c_str(), text.size());\
PangoFontDescription* fd0 = pango_font_description_from_string(\
    fontDesc.c_str());\
pango_font_description_set_absolute_size(fd0, fontSize * PANGO_SCALE);\
pango_layout_set_font_description(l0, fd0);\
pango_cairo_update_layout(context, l0);\
moveTo(x, y);\
setSourceColor(color);\
pango_cairo_show_layout(context, l0);\
pango_font_description_free(fd0);\
g_object_unref(l0);\
restore();
}
function.public[] = {
    spec = virtual
    type = void
    name = drawSVG
    shortDesc = Draw SVG data
    longDesc = Draw SVG data to the image. The origin is by default translated to the center of the image.
    param[] = {
        type = const std::string&
        name = svgData
        desc = SVG data
    }
    param[] = {
        type = int
        name = originX
        desc = Coordinate origin (X)
        default = 0
    }
    param[] = {
        type = int
        name = originY
        desc = Coordinate origin (Y)
        default = 0
    }
    impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::drawSVG] " \
        "No drawing operation in progress!");\
cairo_save(context);\
cairo_translate(context, 0.5 * width + originX, \
    0.5 * height + originY);\
// Render the SVG.\
//rsvg_init();\
RsvgHandle* rsvg0 = rsvg_handle_new_from_data(\
    reinterpret_cast<const guint8*>(svgData.c_str()), \
    svgData.size(), 0);\
if (rsvg0 == 0)\
\{\
    throw AltjiraError("[Drawable::drawSVG] "\
        "Could not create RSVG handle!");\
\}\
if (!rsvg_handle_render_cairo(rsvg0, context))\
\{\
    g_object_unref(rsvg0);\
    throw AltjiraError("[Drawable::drawSVG] "\
        "Could not render SVG to cairo context!");\
\}\
g_object_unref(rsvg0);\
cairo_restore(context);
}
function.public[] = {
    spec = virtual
    type = void
    name = drawSVGFile
    shortDesc = Draw SVG file
    longDesc = Draw an SVG file to the image. The origin is by default translated to the center of the image.
    param[] = {
        type = const std::string&
        name = svgFileName
        desc = SVG file name
    }
    param[] = {
        type = int
        name = originX
        desc = Coordinate origin (X)
        default = 0
    }
    param[] = {
        type = int
        name = originY
        desc = Coordinate origin (Y)
        default = 0
    }
    impl = if (!drawingInProgress())\
    throw AltjiraError("[Drawable::drawSVGFile] " \
        "No drawing operation in progress!");\
cairo_save(context);\
cairo_translate(context, 0.5 * width + originX, \
    0.5 * height + originY);\
// Render the SVG.\
//rsvg_init();\
RsvgHandle* rsvg0 = rsvg_handle_new_from_file(\
    reinterpret_cast<const gchar*>(svgFileName.c_str()), 0);\
if (rsvg0 == 0)\
\{\
    throw AltjiraError("[Drawable::drawSVGFile] "\
        "Could not create RSVG handle!");\
\}\
if (!rsvg_handle_render_cairo(rsvg0, context))\
\{\
    g_object_unref(rsvg0);\
    throw AltjiraError("[Drawable::drawSVGFile] "\
        "Could not render SVG to cairo context!");\
\}\
g_object_unref(rsvg0);\
cairo_restore(context);
}
function.public[] = {
	spec = virtual
	type = bool
	name = drawingInProgress
	const = true
	shortDesc = Drawing in progress check
	longDesc = Check whether a drawing operation is in progress.
	impl = 
    return = {
        value = inProgress
        desc = \c true if a drawing operation is in progress, \c false otherwise
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = 
    return = {
        value = Image::getString()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

