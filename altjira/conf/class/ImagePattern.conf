# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ImagePattern.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write 
# to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/types.hpp"'
        '"altjira/constants.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"altjira/Image.hpp"'
        '"altjira/BlendSrcOver.hpp"'
    }
}

# forward declarations
forward = {
    'class Image'
    'class ColorBlender'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ImagePattern
	shortDesc = Image pattern
	title = Image pattern
	longDesc = A pattern that represents an image.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::Pattern
            include = altjira/Pattern.hpp
            hasClassInfo = true
        }
	}
	#friendClasses = {
	#}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    name = image
    type = Ionflux::Altjira::Image*
    setFromType = Ionflux::Altjira::Image*
    desc = Image
    managed = true
    impl.set = if (image == newImage)\
    return;\
if (newImage != 0)\
    addLocalRef(newImage);\
if (image != 0)\
    removeLocalRef(image);\
image = newImage;\
if (image != 0)\
    update();\
else\
    Pattern::clear();
}
property.protected[] = {
    name = offsetX
    type = double
    setFromType = double
    desc = Offset (X)
}
property.protected[] = {
    name = offsetY
    type = double
    setFromType = double
    desc = Offset (Y)
}

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = image
        value = 0
    }
    initializer[] = {
        name = offsetX
        value = 0
    }
    initializer[] = {
        name = offsetY
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = image
        value = 0
    }
    initializer[] = {
        name = offsetX
        value = initOffsetX
    }
    initializer[] = {
        name = offsetY
        value = initOffsetY
    }
    param[] = {
        type = Ionflux::Altjira::Image*
        name = initImage
        desc = Image
    }
    param[] = {
        type = double
        name = initOffsetX
        desc = Offset (X)
        default = 0.
    }
    param[] = {
        type = double
        name = initOffsetY
        desc = Offset (Y)
        default = 0.
    }
    impl = setImage(initImage);
}

# Destructor.
destructor.impl = clear();

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = <<<
Ionflux::Altjira::Pattern::operator=(other);
if (image != other.image)
    setImage(other.image);
>>>
function.public[] = {
    spec = virtual
    type = void
    name = clear
    shortDesc = Clear
    longDesc = Free resources associated with the pattern.
    impl = Pattern::clear();\
setImage(0);
}
function.public[] = {
    spec = virtual
    type = void
    name = update
    shortDesc = Update
    longDesc = Update the pattern to reflect changes to the image.
    impl = if (image == 0)\
    throw AltjiraError("[ImagePattern::update] " \
        "Image is null!");\
Pattern::clear();\
cairo_surface_t* target = cairo_image_surface_create(\
    CAIRO_FORMAT_ARGB32, image->getWidth(), image->getHeight());\
if (cairo_surface_status(target) != CAIRO_STATUS_SUCCESS)\
\{\
    cairo_surface_destroy(target);\
    throw AltjiraError("[ImagePattern::update] "\
        "Could not allocate image surface!");\
\}\
compositeToSurface(*image, target);\
pattern = cairo_pattern_create_for_surface(target);\
cairo_surface_destroy(target);\
if (cairo_pattern_status(pattern) != CAIRO_STATUS_SUCCESS)\
\{\
    cairo_pattern_destroy(pattern);\
    pattern = 0;\
    throw AltjiraError("[ImagePattern::update] "\
        "Could not create pattern!");\
\}\
translate(-offsetX, -offsetY);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Static member functions.
function.public[] = {
    spec = static
    type = void
    disableBindings = true
    name = compositeToSurface
    shortDesc = Composite image to surface
    longDesc = Composite the specified image onto a drawing surface using the specified color blender. If no color blender is specified, the default SrcOver blender will be used. This function is intended to composite an Altjira::Image to a Cairo surface so it can be used as a pattern.
	param[] = {
		type = Ionflux::Altjira::Image&
		name = source
		desc = Source image
	}
	param[] = {
		type = cairo_surface_t*
		name = target
		desc = Target surface
	}
	param[] = {
		type = const Ionflux::Altjira::ColorBlender*
		name = blender
		desc = Color blender
        default = 0
	}
	param[] = {
		type = const Ionflux::Altjira::ImageRect*
		name = sourceRect
		desc = Source rectangle
        default = 0
	}
	param[] = {
		type = unsigned int
		name = offsetX
		desc = Target offset for compositing (X)
        default = 0
	}
	param[] = {
		type = unsigned int
		name = offsetY
		desc = Target offset for compositing (Y)
        default = 0
	}
    impl = if (target == 0)\
    throw AltjiraError("[ImagePattern::compositeToSurface] " \
        "Target surface is null!");\
// Set up source rectangle.\
ImageRect sr;\
if (sourceRect == 0)\
\{\
    sr.x = 0;\
    sr.y = 0;\
    sr.width = source.getWidth();\
    sr.height = source.getHeight();\
\} else\
\{\
    sr = *sourceRect;\
    source.clamp(sr);\
\}\
// Obtain surface pixel data and do some sanity checks.\
Ionflux::Altjira::PixelData tp = cairo_image_surface_get_data(target);\
if (tp == 0)\
    throw AltjiraError("[ImagePattern::compositeToSurface] "\
        "Could not obtain surface data.");\
unsigned int targetRowStride = cairo_image_surface_get_stride(target);\
int targetWidth = cairo_image_surface_get_width(target);\
int targetHeight = cairo_image_surface_get_height(target);\
cairo_format_t targetFormat = cairo_image_surface_get_format(target);\
if (targetFormat != CAIRO_FORMAT_ARGB32)\
    throw AltjiraError("[ImagePattern::compositeToSurface] "\
        "Unknown target surface format (expected ARGB32).");\
// Set up color blender.\
bool ownBlender = false;\
if (blender == 0)\
\{\
    blender = Ionflux::Altjira::BlendSrcOver::create();\
    ownBlender = true;\
\}\
// Calculate target area;\
ImageRect tr0;\
tr0.x = 0;\
tr0.y = 0;\
tr0.width = static_cast<unsigned int>(targetWidth);\
tr0.height = static_cast<unsigned int>(targetHeight);\
ImageRect tr;\
tr.x = offsetX;\
tr.y = offsetY;\
tr.width = sr.width;\
tr.height = sr.height;\
tr = intersect(tr, tr0);\
// Composite.\
cairo_surface_flush(target);\
unsigned int srcRowStride = source.getRowStride();\
unsigned int srcNumChannels = source.getNumChannels();\
unsigned int iMax = min(sr.width, tr.width);\
unsigned int jMax = min(sr.height, tr.height);\
PixelData sp = source.getPixels();\
ByteColor sc;\
ByteColor tc;\
ByteColor rc;\
sc.space = Color::SPACE_RGB;\
tc.space = Color::SPACE_RGB;\
rc.space = Color::SPACE_RGB;\
ByteColorValue so = floatToByte(blender->getSourceOpacity());\
ByteColorValue to = floatToByte(blender->getTargetOpacity());\
for (unsigned int i = 0; i < iMax; i++)\
    for (unsigned int j = 0; j < jMax; j++)\
    \{\
        PixelData ps = sp + (sr.y + j) * srcRowStride \
            + (sr.x + i) * srcNumChannels;\
        PixelData pt = tp + (tr.y + j) * targetRowStride \
            + (tr.x + i) * 4;\
        sc.c0 = ps[0];\
        sc.c1 = ps[1];\
        sc.c2 = ps[2];\
        if (srcNumChannels >= 4)\
            sc.alpha = ps[3];\
        else\
            sc.alpha = 255;\
        Ionflux::ObjectBase::UInt32* p0 = \
            reinterpret_cast<Ionflux::ObjectBase::UInt32*>(pt);\
        fromUInt(*p0, tc, true);\
        blender->blend(rc, sc, tc, so, to);\
        *p0 = toUInt(rc, true);\
    \}\
cairo_surface_mark_dirty(target);\
//cairo_surface_write_to_png(target, "temp/cairotest01.png");\
if (ownBlender)\
    delete blender;
}

# Pure virtual member functions.

# operations

# Global functions.

