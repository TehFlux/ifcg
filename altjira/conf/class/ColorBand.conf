# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2010 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ColorBand.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with IFMapping - Ionflux Mapping Library; if not, write to the 
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
# 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
        '"ifmapping/Piecewise.hpp"'
        '"ifmapping/Constant.hpp"'
        '"ifmapping/Linear.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<sstream>'
        '"ifmapping/utils.hpp"'
        '"ifmapping/Piece.hpp"'
        '"altjira/AltjiraError.hpp"'
        '"altjira/ColorSet.hpp"'
    }
}

# forward declarations
forward = {
    'class ColorSet'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ColorBand
	shortDesc = Color band
	title = Color band
	longDesc = A collection of colors and positions which can be used to interpolate between any number of colors over the range 0...1. At this time,  only linear interpolation is supported.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
        	name = IFObject
		}
        ## other base classes
        #other[] = {
        #    include = altjira/Mapping.hpp
        #    name = Ionflux::Mapping::Mapping
        #}
	}
	features = {
	    'copy'
	    'upcast'
	    'create'
	    'classinfo'
	}
	create = {
	    extendedCreate = true
	    allocationError = AltjiraError("Could not allocate object.")
	}
}

# Member variables.
variable.protected[] = {
    type = Ionflux::Mapping::Piecewise*
    name = red
    desc = Mapping for the red component
}
variable.protected[] = {
    type = Ionflux::Mapping::Piecewise*
    name = green
    desc = Mapping for the green component
}
variable.protected[] = {
    type = Ionflux::Mapping::Piecewise*
    name = blue
    desc = Mapping for the blue component
}
variable.protected[] = {
    type = Ionflux::Mapping::Piecewise*
    name = alpha
    desc = Mapping for the alpha component
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
    style = vector
    name = colorStops
    desc = Color stops
    element = {
        type = Ionflux::Altjira::ColorStop
        name = ColorStop
        defaultValue = ColorStop()
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = red
        value = 0
    }
    initializer[] = {
        name = green
        value = 0
    }
    initializer[] = {
        name = blue
        value = 0
    }
    initializer[] = {
        name = alpha
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = red
        value = 0
    }
    initializer[] = {
        name = green
        value = 0
    }
    initializer[] = {
        name = blue
        value = 0
    }
    initializer[] = {
        name = alpha
        value = 0
    }
    param[] = {
        type = Ionflux::Altjira::ColorStopVector
        name = initColorStops
        desc = Color stops
    }
    impl = colorStops = initColorStops;
}

# Destructor.
destructor.impl = clearColorStops();\
if (red != 0)\
    removeLocalRef(red);\
red = 0;\
if (green != 0)\
    removeLocalRef(green);\
green = 0;\
if (blue != 0)\
    removeLocalRef(blue);\
blue = 0;\
if (alpha != 0)\
    removeLocalRef(alpha);\
alpha = 0;

# Public static constants.

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = initMappings
	shortDesc = Initialize mappings
	longDesc = Initialize the mappings for the color band.
    impl = if (red == 0)\
\{\
    red = new Ionflux::Mapping::Piecewise();\
    addLocalRef(red);\
\} else\
    red->clearPieces();\
if (green == 0)\
\{\
    green = new Ionflux::Mapping::Piecewise();\
    addLocalRef(green);\
\} else\
    green->clearPieces();\
if (blue == 0)\
\{\
    blue = new Ionflux::Mapping::Piecewise();\
    addLocalRef(blue);\
\} else\
    blue->clearPieces();\
if (alpha == 0)\
\{\
    alpha = new Ionflux::Mapping::Piecewise();\
    addLocalRef(alpha);\
\} else\
    alpha->clearPieces();
}

# Public member functions.
function.copy.impl = ColorStopVector v0 = other.colorStops;\
for (ColorStopVector::const_iterator i = other.colorStops.begin(); \
    i != other.colorStops.end(); i++)\
    v0.push_back(*i);\
clearColorStops();\
colorStops = v0;
function.public[] = {
	spec = virtual
	type = void
	name = clear
	shortDesc = Clear the color band
	longDesc = Clears all data in the color band.
    impl = colorStops.clear();\
initMappings();
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = update
	shortDesc = Update the color band
	longDesc = Updates the color band according to the currently set color stops.
    impl = initMappings();\
if (colorStops.size() < 2)\
    return;\
for (unsigned int i = 0; i < (colorStops.size() - 1); i++)\
\{\
    ColorStop c0 = colorStops[i];\
    ColorStop c1 = colorStops[i + 1];\
    double t = c0.param;\
    Ionflux::Mapping::Linear* ipr = \
        new Ionflux::Mapping::Linear(\
            c0.color.getRed(), c1.color.getRed());\
    Ionflux::Mapping::Linear* ipg = \
        new Ionflux::Mapping::Linear(\
            c0.color.getGreen(), c1.color.getGreen());\
    Ionflux::Mapping::Linear* ipb = \
        new Ionflux::Mapping::Linear(\
            c0.color.getBlue(), c1.color.getBlue());\
    Ionflux::Mapping::Linear* ipa = \
        new Ionflux::Mapping::Linear(\
            c0.color.getAlpha(), c1.color.getAlpha());\
    red->addPiece(new Ionflux::Mapping::Piece(ipr, t));\
    green->addPiece(new Ionflux::Mapping::Piece(ipg, t));\
    blue->addPiece(new Ionflux::Mapping::Piece(ipb, t));\
    alpha->addPiece(new Ionflux::Mapping::Piece(ipa, t));\
\}\
ColorStop c = colorStops[colorStops.size() - 1];\
Ionflux::Mapping::Constant* cpr = \
    new Ionflux::Mapping::Constant(c.color.getRed());\
Ionflux::Mapping::Constant* cpg = \
    new Ionflux::Mapping::Constant(c.color.getGreen());\
Ionflux::Mapping::Constant* cpb = \
    new Ionflux::Mapping::Constant(c.color.getBlue());\
Ionflux::Mapping::Constant* cpa = \
    new Ionflux::Mapping::Constant(c.color.getAlpha());\
red->addPiece(new Ionflux::Mapping::Piece(cpr, 1.));\
green->addPiece(new Ionflux::Mapping::Piece(cpg, 1.));\
blue->addPiece(new Ionflux::Mapping::Piece(cpb, 1.));\
alpha->addPiece(new Ionflux::Mapping::Piece(cpa, 1.));
}
function.public[] = {
	spec = virtual
	type = void
	name = eval
	shortDesc = Evaluate the color band
	longDesc = Evaluate the color band at the specified value and store the result in the target color.
	param[] = {
	    type = double
	    name = value
	    desc = Value
	}
	param[] = {
	    type = Ionflux::Altjira::FloatColor&
	    name = target
	    desc = Target color
	}
	impl = if (target.space != Ionflux::Altjira::Color::SPACE_RGB)\
\{\
    FloatColor fc = createFloatColor(\
        (*red)(value), (*green)(value), (*blue)(value), \
        (*alpha)(value), Ionflux::Altjira::Color::SPACE_RGB);\
    toColorSpace(fc, target.space);\
    target = fc;\
\} else\
\{\
    target.c0 = (*red)(value);\
    target.c1 = (*green)(value);\
    target.c2 = (*blue)(value);\
    target.alpha = (*alpha)(value);\
\}
}
function.public[] = {
	spec = virtual
	type = void
	name = eval
	shortDesc = Evaluate the color band
	longDesc = Evaluate the color band at the specified value and store the result in the target color.
	param[] = {
	    type = double
	    name = value
	    desc = Value
	}
	param[] = {
	    type = Ionflux::Altjira::ByteColor&
	    name = target
	    desc = Target color
	}
	impl = FloatColor fc;\
fc.space = target.space;\
eval(value, fc);\
floatToByte(fc, target);
}
function.public[] = {
	spec = virtual
	type = void
	name = eval
	shortDesc = Evaluate the color band
	longDesc = Evaluate the color band at the specified value and store the result in the target color.
	param[] = {
	    type = double
	    name = value
	    desc = Value
	}
	param[] = {
	    type = Ionflux::Altjira::Color&
	    name = target
	    desc = Target color
	}
	impl = target.setRed((*red)(value));\
target.setGreen((*green)(value));\
target.setBlue((*blue)(value));\
target.setAlpha((*alpha)(value));
}
function.public[] = {
	spec = virtual
	type = Ionflux::Altjira::Color
	name = operator()
	shortDesc = Evaluate the color band
	longDesc = Evaluate the color band at the specified value.
	param[] = {
	    type = double
	    name = value
	    desc = Value
	}
	impl = Ionflux::Altjira::Color result;\
eval(value, result);
	return = {
	    value = result
	    desc = Resulting color
	}
}
function.public[] = {
	spec = virtual
	type = void
	name = sample
	shortDesc = Sample colors
	longDesc = Sample colors from the color band at regular intervals and store them in a color set.
	param[] = {
	    type = unsigned int
	    name = numSamples
	    desc = number of samples
	}
	param[] = {
	    type = Ionflux::Altjira::ColorSet&
	    name = target
	    desc = Where to store the colors
	}
	impl = <<<
if (numSamples == 0)
    return;
double step = 1. / (numSamples - 1.);
double v = 0.;
for (unsigned int i = 0; i < numSamples; i++)
{
    Color* c0 = target.addColor();
    eval(v, *c0);
    v += step;
}
>>>
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = rainbow
	shortDesc = Create color band: Rainbow
	longDesc = Create a color band using evenly spaced rainbow colors. The caller is responsible for managing the new color band.
	impl = ColorBand* result = create();\
ColorStop cs;\
cs.color = Ionflux::Altjira::Color::VIOLET;\
cs.param = 0.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::BLUE;\
cs.param = 1. / 6.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::CYAN;\
cs.param = 2. / 6.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::GREEN;\
cs.param = 3. / 6.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::YELLOW;\
cs.param = 4. / 6.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::ORANGE;\
cs.param = 5. / 6.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::RED;\
cs.param = 1.;\
result->addColorStop(cs);\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = flame
	shortDesc = Create color band: Flame
	longDesc = Create a color band using evenly spaced flame colors. The caller is responsible for managing the new color band.
	impl = ColorBand* result = create();\
ColorStop cs;\
cs.color = Ionflux::Altjira::Color::BLACK;\
cs.param = 0.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::RED;\
cs.param = 1. / 4.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::ORANGE;\
cs.param = 1. / 2.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::YELLOW;\
cs.param = 3. / 4.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::WHITE;\
cs.param = 1.;\
result->addColorStop(cs);\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = ice
	shortDesc = Create color band: Ice
	longDesc = Create a color band using evenly spaced ice colors. The caller is responsible for managing the new color band.
	impl = ColorBand* result = create();\
ColorStop cs;\
cs.color = Ionflux::Altjira::Color::BLUE;\
cs.param = 0.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::CYAN;\
cs.param = 1. / 2.;\
result->addColorStop(cs);\
cs.color = Ionflux::Altjira::Color::WHITE;\
cs.param = 1.;\
result->addColorStop(cs);\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = terrain
	shortDesc = Create color band: Terrain
	longDesc = Create a color band using terrain colors. The caller is responsible for managing the new color band.
	impl = ColorBand* result = create();\
ColorStop cs;\
// Dark blue (deep water).\
cs.color.setFromHex("#00048dff");\
cs.param = 0.;\
result->addColorStop(cs);\
// Light blue (water).\
cs.color.setFromHex("#015afbff");\
cs.param = 0.30;\
result->addColorStop(cs);\
// Cyan (coastal water).\
cs.color.setFromHex("#23c2fcff");\
cs.param = 0.34;\
result->addColorStop(cs);\
// Light green (shore).\
cs.color.setFromHex("#bae086ff");\
cs.param = 0.35;\
result->addColorStop(cs);\
// Grass green (coastal land).\
cs.color.setFromHex("#299e3bff");\
cs.param = 0.39;\
result->addColorStop(cs);\
// Forest green (inner land).\
cs.color.setFromHex("#0d751fff");\
cs.param = 0.56;\
result->addColorStop(cs);\
// Dark green (inner land, high).\
cs.color.setFromHex("#024500ff");\
cs.param = 0.70;\
result->addColorStop(cs);\
// Grey brown (hills).\
cs.color.setFromHex("#585144ff");\
cs.param = 0.87;\
result->addColorStop(cs);\
// Dark grey (mountains).\
cs.color.setFromHex("#544f46ff");\
cs.param = 0.95;\
result->addColorStop(cs);\
// Middle grey (high mountains).\
cs.color.setFromHex("#827f78ff");\
cs.param = 0.98;\
result->addColorStop(cs);\
// White (Snow).\
cs.color.setFromHex("#ffffffff");\
cs.param = 1.;\
result->addColorStop(cs);\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = heat
	shortDesc = Create color band: Heat
	longDesc = Create a color band using heat colors. The caller is responsible for managing the new color band.
	impl = ColorBand* result = create();\
ColorStop cs;\
// Blue.\
cs.color.setFromHex("#0000ffff");\
cs.param = 0.;\
result->addColorStop(cs);\
// Cyan.\
cs.color.setFromHex("#0cb6ffff");\
cs.param = 0.2;\
result->addColorStop(cs);\
// Violet.\
cs.color.setFromHex("#8f68ffff");\
cs.param = 0.4;\
result->addColorStop(cs);\
// Red.\
cs.color.setFromHex("#ff0000ff");\
cs.param = 0.6;\
result->addColorStop(cs);\
// Yellow.\
cs.color.setFromHex("#ffec00ff");\
cs.param = 0.8;\
result->addColorStop(cs);\
// White.\
cs.color.setFromHex("#ffffffff");\
cs.param = 1.;\
result->addColorStop(cs);\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}
function.public[] = {
	spec = static
	type = Ionflux::Altjira::ColorBand*
	name = glow
	shortDesc = Create color band: Glow
	longDesc = Create a color band that suggests a 'glowing' base color with a luminance transition from dark to light.
	param[] = {
	    type = const Ionflux::Altjira::Color&
	    name = color
	    desc = Base color
	}
	param[] = {
	    type = double
	    name = maxL
	    desc = Maximum luminance
	    default = 1.
	}
	impl = ColorBand* result = create();\
FloatColor c0;\
c0.space = Color::SPACE_HSL;\
color.getFloatColor(c0);\
FloatColor c1 = c0;\
c1.alpha = 0.;\
FloatColor c2 = c0;\
c2.c2 = maxL;\
c2.alpha = color.getAlpha();\
ColorStop cs;\
cs.color = c1;\
cs.param = 0.;\
result->addColorStop(cs);\
cs.color = c2;\
cs.param = 1.;\
result->addColorStop(cs);\
/* <---- DEBUG ----- //\
std::cout << "[ColorBand::glow] DEBUG: c0 = " \
    << Ionflux::Altjira::getString(c0) \
    << ", c1 = " << Ionflux::Altjira::getString(c1) \
    << ", c2 = " << Ionflux::Altjira::getString(c2) << std::endl;\
// ----- DEBUG ----> */\
result->update();
	return = {
	    value = result
	    desc = New color band
	}
}

# Pure virtual member functions.

# operations

