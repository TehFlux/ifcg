# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# RadialGradient.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write 
# to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = RadialGradient
	shortDesc = Radial gradient
	title = Radial gradient
	longDesc = A radial gradient pattern to be used in drawing operations.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::Gradient
            include = altjira/Gradient.hpp
            hasClassInfo = true
        }
	}
	#friendClasses = {
	#}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}
constructor.public[] = {
	param[] = {
        type = double
        name = cx0
        desc = Center of the start circle (X)
	}
	param[] = {
        type = double
        name = cy0
        desc = Center of the start circle (Y)
	}
	param[] = {
        type = double
        name = r0
        desc = Radius of the start circle
	}
	param[] = {
        type = double
        name = cx1
        desc = Center of the end circle (X)
	}
	param[] = {
        type = double
        name = cy1
        desc = Center of the end circle (Y)
	}
	param[] = {
        type = double
        name = r1
        desc = Radius of the start circle
	}
	impl = init(cx0, cy0, r0, cx1, cy1, r1);
}

# Destructor.
destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = Ionflux::Altjira::Pattern::operator=(other);
function.public[] = {
	spec = virtual
	type = void
	name = init
	shortDesc = Initialize radial gradient
	longDesc = Initialize the radial gradient with the specified parameters.
	param[] = {
        type = double
        name = cx0
        desc = Center of the start circle (X)
	}
	param[] = {
        type = double
        name = cy0
        desc = Center of the start circle (Y)
	}
	param[] = {
        type = double
        name = r0
        desc = Radius of the start circle
	}
	param[] = {
        type = double
        name = cx1
        desc = Center of the end circle (X)
	}
	param[] = {
        type = double
        name = cy1
        desc = Center of the end circle (Y)
	}
	param[] = {
        type = double
        name = r1
        desc = Radius of the start circle
	}
	impl = Pattern::clear();\
pattern = cairo_pattern_create_radial(cx0, cy0, r0, cx1, cy1, r1);\
if (cairo_pattern_status(pattern) != CAIRO_STATUS_SUCCESS)\
\{\
    cairo_pattern_destroy(pattern);\
    pattern = 0;\
    throw AltjiraError("[RadialGradient::init] " \
        "Could not create pattern!");\
\}
}

# Static member functions.
function.public[] = {
	spec = static
	type = Ionflux::Altjira::RadialGradient*
	name = create
	shortDesc = Create radial gradient
	longDesc = Create a new radial gradient with the specified parameters.
	param[] = {
        type = double
        name = cx0
        desc = Center of the start circle (X)
	}
	param[] = {
        type = double
        name = cy0
        desc = Center of the start circle (Y)
	}
	param[] = {
        type = double
        name = r0
        desc = Radius of the start circle
	}
	param[] = {
        type = double
        name = cx1
        desc = Center of the end circle (X)
	}
	param[] = {
        type = double
        name = cy1
        desc = Center of the end circle (Y)
	}
	param[] = {
        type = double
        name = r1
        desc = Radius of the start circle
	}
	impl = RadialGradient* result = create();\
result->init(cx0, cy0, r0, cx1, cy1, r1);
    return = {
        value = result
        desc = Radial gradient
    }
}

# Pure virtual member functions.

# operations

# Global functions.

