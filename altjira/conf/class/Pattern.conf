# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Pattern.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write 
# to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '<cairo.h>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
    }
}

# forward declarations
forward = {
    'class Drawable'
}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Pattern
	shortDesc = Pattern
	title = Pattern
	longDesc = A pattern to be used in drawing operations.
	group.name = geoutils
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
            inheritanceType = virtual public
		}
        ## other base classes
        #other[] = {
        #    name = Ionflux::Altjira::Image
        #    include = altjira/Image.hpp
        #    hasClassInfo = true
        #}
	}
	friendClasses = {
	    'Drawable'
	}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}


# Member variables.
variable.protected[] = {
	type = cairo_pattern_t*
	name = pattern
	desc = Cairo pattern
}

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = pattern
        value = 0
    }
}

# Destructor.
destructor.impl = clear();

# Protected static constants.

# Protected member functions.
function.protected[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform
	longDesc = Transform the pattern coordinate system using the specified matrix.
	param[] = {
        type = cairo_matrix_t&
        name = m
        desc = Matrix
	}
	impl = if (pattern == 0)\
    throw AltjiraError("[Pattern::transform] "\
        "Pattern not set!");\
cairo_matrix_t m0;\
cairo_pattern_get_matrix(pattern, &m0);\
cairo_matrix_multiply(&m0, &m0, &m);\
cairo_pattern_set_matrix(pattern, &m0);
}

# Public member functions.
function.copy.impl = if (pattern != other.pattern)\
\{\
    cairo_pattern_reference(other.pattern);\
    clear();\
    pattern = other.pattern;\
\}
function.public[] = {
    spec = virtual
    type = void
    name = clear
    shortDesc = Clear
    longDesc = Free resources associated with the pattern.
    impl = if (pattern != 0)\
    cairo_pattern_destroy(pattern);\
pattern = 0;
}
function.public[] = {
	spec = virtual
	type = void
	name = translate
	shortDesc = Translate
	longDesc = Translate the pattern coordinate origin.
	param[] = {
        type = double
        name = tx
        desc = Translation (X)
	}
	param[] = {
        type = double
        name = ty
        desc = Translation (Y)
	}
	impl = cairo_matrix_t m1;\
cairo_matrix_init_translate(&m1, tx, ty);\
transform(m1);
}
function.public[] = {
	spec = virtual
	type = void
	name = scale
	shortDesc = Scale
	longDesc = Scale the pattern coordinate system.
	param[] = {
        type = double
        name = sx
        desc = Scale factor (X)
	}
	param[] = {
        type = double
        name = sy
        desc = Scale factor (Y)
	}
	impl = cairo_matrix_t m1;\
cairo_matrix_init_scale(&m1, sx, sy);\
transform(m1);
}
function.public[] = {
	spec = virtual
	type = void
	name = rotate
	shortDesc = Rotate
	longDesc = Rotate the pattern coordinate system.
	param[] = {
        type = double
        name = phi
        desc = Rotation angle
	}
	impl = cairo_matrix_t m1;\
cairo_matrix_init_rotate(&m1, phi);\
transform(m1);
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

