# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2024 Jörn Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# PixelSource.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 3 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
#using = {
#	'namespace Ionflux::ObjectBase'
#}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/constants.hpp"'
        '"altjira/Color.hpp"'
        '<limits>'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/utils.hpp"'
    }
}

# forward declarations

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = PixelSource
	shortDesc = Pixel source
	title = Pixel source
	longDesc = A source for pixels. Pixels are indexed by two-dimensional coordinates (x, y). A pixel source has a width and a height, either of which can be infinite.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
        ## other base classes
        #other[] = {
        #    name = Ionflux::Altjira::ColorBlender
        #    include = altjira/ColorBlender.hpp
        #    hasClassInfo = true
        #}
	}
    features = {
        'copy'
        'classinfo'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = 
constructor.default = {
    impl = 
}

# Protected member functions.

## Public member functions.
# function.copy.impl = 

# Pure virtual member functions.
function.public[] = {
	spec = virtual
    pureVirtual = true
	type = unsigned int
	name = getWidth
    const = true
	shortDesc = Get width
	longDesc = Get width.
}
function.public[] = {
	spec = virtual
    pureVirtual = true
	type = unsigned int
	name = getHeight
    const = true
	shortDesc = Get height
	longDesc = Get height.
}
function.public[] = {
	spec = virtual
    pureVirtual = true
	type = bool
	const = true
	name = getPixel
	shortDesc = Get pixel color
	longDesc = Get pixel color.
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = color
		desc = Color
	}
}
function.public[] = {
	spec = virtual
    pureVirtual = true
	type = bool
    const = true
	name = getPixel
	shortDesc = Get pixel color
	longDesc = Get pixel color.
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = color
		desc = Color
	}
}
function.public[] = {
	spec = virtual
    pureVirtual = true
	type = bool
	name = getPixel
    const = true
	shortDesc = Get pixel color
	longDesc = Get pixel color.
	param[] = {
		type = unsigned int
		name = x
		desc = Pixel coordinate (X)
	}
	param[] = {
		type = unsigned int
		name = y
		desc = Pixel coordinate (Y)
	}
	param[] = {
		type = Ionflux::Altjira::Color&
		name = color
		desc = Color
	}
}

# operations

