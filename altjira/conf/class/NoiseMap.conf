# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# NoiseMap.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# Additional namespaces.
namespace[].name = Ionflux
namespace[].name = Altjira
namespace[].name = Noise

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"noise/noiseutils.h"'
        '"ifmapping/types.hpp"'
        '"ifmapping/constants.hpp"'
        '"ifmapping/Mapping.hpp"'
        '"altjira/types.hpp"'
        '"altjira/constants.hpp"'
        '"altjira/Image.hpp"'
        '"altjira/ColorBand.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"ifmapping/NoiseMapTransform.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = NoiseMap
	shortDesc = Noise map
	title = Noise map
	longDesc = Wrapper around a noise::utils::NoiseMap that integrates the object with Altjira.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
        'create'
        'upcast'
    }
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = noise::utils::NoiseMap*
	setFromType = noise::utils::NoiseMap*
	name = noiseMap
	desc = libnoise noise map
}

# Public static constants.

# Protected static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = noiseMap
        value = 0
    }
}
constructor.public[] = {
    initializer[] = {
        name = noiseMap
        value = initNoiseMap
    }
	param[] = {
	    type = noise::utils::NoiseMap*
		name = initNoiseMap
		desc = libnoise noise map
	}
    impl = 
}
destructor.impl = noiseMap = 0;

# Protected member functions.

# Public member functions.
function.copy.impl = noiseMap = other.noiseMap;
function.public[] = {
	spec = virtual
	type = Ionflux::Mapping::Range
	name = getRange
	shortDesc = Get range of values
	longDesc = Get the range of values in the noise map.
    impl = if (noiseMap == 0)\
    throw AltjiraError("[NoiseMap::getRange] "\
    "Noise map not set!");\
Ionflux::Mapping::Range result;\
result.lower = 0.;\
result.upper = 0.;\
int width = noiseMap->GetWidth();\
int height = noiseMap->GetHeight();\
int stride = noiseMap->GetStride();\
float* data = noiseMap->GetSlabPtr();\
for (int y = 0; y < height; y++)\
    for (int x = 0; x < width; x++)\
    \{\
        float* cur = data + y * stride + x;\
        if ((x == 0) && (y == 0))\
        \{\
            result.lower = *cur;\
            result.upper = *cur;\
        \} else\
        \{\
            if (*cur < result.lower)\
                result.lower = *cur;\
            if (*cur > result.upper)\
                result.upper = *cur;\
        \}\
    \}
    return = {
        value = result
        desc = Range of values
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = rescale
	shortDesc = Rescale
	longDesc = Rescale the noise map so its values fall within the specified range.
	param[] = {
	    type = const Ionflux::Mapping::Range&
	    name = range
	    desc = Range
	    default = Ionflux::Mapping::DEFAULT_CLAMP_RANGE
	}
    impl = if (noiseMap == 0)\
    throw AltjiraError("[NoiseMap::getRange] "\
    "Noise map not set!");\
Ionflux::Mapping::Range r0 = getRange();\
double scale = (range.upper - range.lower) / (r0.upper - r0.lower);\
transform(-r0.lower, 1., range.lower, scale);
}
function.public[] = {
	spec = virtual
	type = void
	name = transform
	shortDesc = Transform
	longDesc = Transform the noise map using the specified input offset and scale, mapping, and output offset and scale.
	param[] = {
	    type = double
	    name = offsetIn
	    desc = Offset (input)
	    default = 0.
	}
	param[] = {
	    type = double
	    name = scaleIn
	    desc = Scale (input)
	    default = 1.
	}
	param[] = {
	    type = double
	    name = offsetOut
	    desc = Offset (output)
	    default = 0.
	}
	param[] = {
	    type = double
	    name = scaleOut
	    desc = Scale (output)
	    default = 1.
	}
	param[] = {
	    type = Ionflux::Mapping::Mapping*
	    name = func
	    desc = Mapping
	    default = 0
	}
    impl = if (noiseMap == 0)\
    throw AltjiraError("[NoiseMap::getRange] "\
    "Noise map not set!");\
Ionflux::Mapping::Noise::NoiseMapTransform nt(func, \
    scaleIn, offsetIn, scaleOut, offsetOut);\
nt.transform(*noiseMap);
}
function.public[] = {
	spec = virtual
	type = void
	name = render
	shortDesc = Render
	longDesc = Render the noise map to an image using the specified color band to map noise values to colors. If no color band is specified, a grayscale range from black to white will be used.
	param[] = {
	    type = Ionflux::Altjira::Image&
	    name = image
	    desc = Image
	}
	param[] = {
	    type = Ionflux::Altjira::ColorBand*
	    name = colors
	    desc = Color band
	    default = 0
	}
    impl = if (noiseMap == 0)\
    throw AltjiraError("[NoiseMap::render] "\
        "Noise map not set!");\
int width = noiseMap->GetWidth();\
int height = noiseMap->GetHeight();\
if ((image.getWidth() != static_cast<unsigned int>(width)) \
    || (image.getHeight() != static_cast<unsigned int>(height)))\
\{\
    ostringstream status;\
    status << "[NoiseMap::render] Image size differs from "\
        "noise map size (should be " << width << "x" << height \
        << ")!";\
    throw AltjiraError(status.str());\
\}\
int stride = noiseMap->GetStride();\
float* data = noiseMap->GetSlabPtr();\
FloatColor tc;\
tc.space = Color::SPACE_RGB;\
for (int y = 0; y < height; y++)\
    for (int x = 0; x < width; x++)\
    \{\
        float* cur = data + y * stride + x;\
        if (colors == 0)\
        \{\
            tc.c0 = *cur;\
            tc.c1 = *cur;\
            tc.c2 = *cur;\
            tc.alpha = 1.;\
        \} else\
            colors->eval(*cur, tc);\
        clamp(tc);\
        image.setPixel(x, y, tc);\
    \}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName();
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

