# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008-2011 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# Gradient.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write 
# to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# enclosing namespaces

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
	'namespace Ionflux::Altjira'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/types.hpp"'
        '"altjira/constants.hpp"'
        '"altjira/Color.hpp"'
        '"altjira/ColorBand.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/AltjiraError.hpp"'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
    }
}

## forward declarations
#forward = {
#}

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = Gradient
	shortDesc = Gradient
	title = Gradient
	longDesc = A gradient pattern to be used in drawing operations.
	group.name = geoutils
	base = {
		## base classes from the IFObject hierarchy
		#ifobject[] = {
		#	name = IFObject
        #    inheritanceType = virtual public
		#}
        # other base classes
        other[] = {
            name = Ionflux::Altjira::Pattern
            include = altjira/Pattern.hpp
            hasClassInfo = true
        }
	}
	#friendClasses = {
	#}
    features = {
        'copy'
        'logmessage'
        'upcast'
        'classinfo'
        'create'
    }
    create.allocationError = AltjiraError("Could not allocate object.")
}


# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.

# Public static constants.

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
}

# Destructor.
destructor.impl = 

# Protected static constants.

# Protected member functions.

# Public member functions.
function.copy.impl = Ionflux::Altjira::Pattern::operator=(other);
function.public[] = {
	spec = virtual
	type = void
	name = addColorStop
	shortDesc = Add color stop
	longDesc = Add a color stop to the gradient.
	param[] = {
        type = double
        name = offset
        desc = Offset
	}
	param[] = {
        type = const Ionflux::Altjira::Color&
        name = color
        desc = Color
	}
	impl = if (pattern == 0)\
    throw AltjiraError("[Gradient::addColorStop] " \
        "Pattern is null!");\
cairo_pattern_add_color_stop_rgba(pattern, offset, color.getRed(), \
    color.getGreen(), color.getBlue(), color.getAlpha());
}
function.public[] = {
	spec = virtual
	type = unsigned int
	const = true
	name = getNumColorStops
	shortDesc = Get number of color stops
	longDesc = Get the number of color stops in the gradient.
	impl = if (pattern == 0)\
    throw AltjiraError("[Gradient::getNumColorStops] " \
        "Pattern is null!");\
int numColorStops = 0;\
cairo_pattern_get_color_stop_count(pattern, &numColorStops);\
if (cairo_pattern_get_color_stop_count(pattern, &numColorStops) \
    != CAIRO_STATUS_SUCCESS)\
    throw AltjiraError("[Gradient::getNumColorStops] " \
        "Pattern is not a gradient!");
    return = {
        value = static_cast<unsigned int>(numColorStops)
        desc = Number of color stops
    }
}
function.public[] = {
	spec = virtual
	type = void
	name = setFromColorBand
	shortDesc = Set color stops from color band
	longDesc = Set color stops from a color band. If \c sampleFunc is not set, the color stops will be taken from \c colorBand as is. Otherwise, \c colorBand will be sampled using the specified number of uniformly spaced sampling points from the range [0..1], transformed by \c sampleFunc.
	param[] = {
        type = Ionflux::Altjira::ColorBand&
        name = colorBand
        desc = Color band
	}
	param[] = {
        type = Ionflux::Mapping::Mapping*
        name = sampleFunc
        desc = Sampling function
        default = 0
	}
	param[] = {
        type = unsigned int
        name = numSamples
        desc = Number of samples
        default = 20
	}
	impl = if (pattern == 0)\
    throw AltjiraError("[Gradient::setFromColorBand] " \
        "Pattern is null!");\
/* <---- DEBUG ----- //\
std::ostringstream status;\
// ----- DEBUG ----> */\
if (sampleFunc == 0)\
\{\
    // Use color stops from the color band.\
    for (unsigned int i = 0; i < colorBand.getNumColorStops(); i++)\
    \{\
        ColorStop cs0 = colorBand.getColorStop(i);\
        cairo_pattern_add_color_stop_rgba(pattern, cs0.param, \
            cs0.color.getRed(), cs0.color.getGreen(), cs0.color.getBlue(), \
            cs0.color.getAlpha());\
    \}\
\} else\
\{\
    // Sample the color band.\
    if (numSamples < 2)\
        throw AltjiraError("[Gradient::setFromColorBand] "\
            "Number of samples must be at least 2.");\
    double x = 0;\
    double dx = 1. / (numSamples - 1);\
    for (unsigned int i = 0; i < numSamples; i++)\
    \{\
        Ionflux::Mapping::MappingValue t0 = (*sampleFunc)(x);\
        Color c0 = colorBand(t0);\
        /* <---- DEBUG ----- //\
        status.str("");\
        status << "x = " << x << ", t0 = " << t0 << ", c0 = " << c0;\
        log(IFLogMessage(status.str(), VL_DEBUG, this, \
            "setFromColorBand"));\
        // ----- DEBUG ----> */\
        cairo_pattern_add_color_stop_rgba(pattern, x, \
            c0.getRed(), c0.getGreen(), c0.getBlue(), c0.getAlpha());\
        x += dx;\
    \}\
\}
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[";\
if (pattern != 0)\
\{\
    unsigned int numCs = getNumColorStops();\
    for (unsigned int i = 0; i < numCs; i++)\
    \{\
        if (i > 0)\
            state << ", ";\
        double offset = 0.;\
        FloatColor c0;\
        cairo_pattern_get_color_stop_rgba(pattern, i, &offset, &(c0.c0), \
            &(c0.c1), &(c0.c2), &(c0.alpha));\
        state << "[" << offset << ": (" << c0.c0 << ", "<< c0.c1 \
            << ", " << c0.c2 << ", "<< c0.alpha << ")]";\
    \}\
\}\
state << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

# Global functions.

