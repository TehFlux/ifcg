# ==========================================================================
# Altjira - Ionflux' Image Processing Library
# Copyright © 2008 Jörn P. Meier
# mail@ionflux.org
# --------------------------------------------------------------------------
# ColorBlender.conf              Class configuration.
# ==========================================================================
# 
# This file is part of Altjira - Ionflux' Image Processing Library.
# 
# Altjira - Ionflux' Image Processing Library is free software; you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public  License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# 
# Altjira - Ionflux' Image Processing Library is distributed in the hope 
# that it will be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Altjira - Ionflux' Image Processing Library; if not, write to 
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
# MA 02111-1307 USA
# 
# ==========================================================================

# Class configuration usable with the Ionflux Object Base System.

# using directives
using = {
	'namespace std'
	'namespace Ionflux::ObjectBase'
}

# include files.
include = {
	# these includes will be added in the header file
	header = {
        '"altjira/Color.hpp"'
	}
    # these includes will be added in the implementation file
    impl = {
        '<cmath>'
        '<cstdlib>'
        '<sstream>'
        '<iomanip>'
        '"altjira/utils.hpp"'
        '"altjira/imageutils.hpp"'
    }
}

# forward declarations

# undefine macros

# typedefs

# typedefs (after signals)
#
# Use this feature for typedefs that depend on signals being already declared.

# helper structs
#
# You can use this feature to declare any number of additional structs in a 
# class header.

# class definition
class = {
	name = ColorBlender
	shortDesc = ColorBlender
	title = Color blender
	longDesc = An object that can be used to blend two colors. This is used as an abstract base class for color blenders that use a specific blending method. Colors and source and target opacity are taken from the internal state of the blender if they are not specified on the invocation of the blender.
	group.name = altjira
	base = {
		# base classes from the IFObject hierarchy
		ifobject[] = {
			name = IFObject
		}
	}
    features = {
        'copy'
    }
}

# Public constructors.
constructor.copy.impl = *this = other;
constructor.default = {
    initializer[] = {
        name = color0
        value = Ionflux::Altjira::Color::BLACK
    }
    initializer[] = {
        name = color1
        value = Ionflux::Altjira::Color::WHITE
    }
    initializer[] = {
        name = sourceOpacity
        value = 1.
    }
    initializer[] = {
        name = targetOpacity
        value = 1.
    }
}
constructor.public[] = {
    initializer[] = {
        name = color0
        value = initColor0
    }
    initializer[] = {
        name = color1
        value = initColor1
    }
    initializer[] = {
        name = sourceOpacity
        value = initSourceOpacity
    }
    initializer[] = {
        name = targetOpacity
        value = initTargetOpacity
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor0
        desc = Initial Color 0
    }
    param[] = {
        type = const Ionflux::Altjira::Color&
        name = initColor1
        desc = Initial Color 1
        default = Ionflux::Altjira::Color::WHITE
    }
    param[] = {
        type = double
        name = initSourceOpacity
        desc = Initial source opacity
        default = 1.
    }
    param[] = {
        type = double
        name = initTargetOpacity
        desc = Initial target opacity
        default = 1.
    }
    impl = 
}

# Member variables.

# Class properties.
#
# Properties are like member variables, but accessor functions (getters and 
# setters) will be added and implemented automatically for you. Use this for 
# safe access to public properties of a class.
#
# If the 'managed' option is set to 'true', references to IFObject based 
# types will be handled automatically by the default implementation for 
# property accessor functions.
property.protected[] = {
	type = Ionflux::Altjira::Color
	setFromType = const Ionflux::Altjira::Color&
	name = color0
	desc = Color 0
    copy = true
}
property.protected[] = {
	type = Ionflux::Altjira::Color
	setFromType = const Ionflux::Altjira::Color&
	name = color1
	desc = Color 1
    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = sourceOpacity
	desc = Source opacity
    copy = true
}
property.protected[] = {
	type = double
	setFromType = double
	name = targetOpacity
	desc = Target opacity
    copy = true
}

# Public static constants.

# Protected static constants.

# Protected member functions.

# Public member functions.
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::Color&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::Color&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = double
		name = newSourceOpacity
		desc = Source opacity
        default = 1.
	}
	param[] = {
		type = double
		name = newTargetOpacity
		desc = Target opacity
        default = 1.
	}
    impl = FloatColor s;\
FloatColor d;\
FloatColor t;\
s.space = Color::SPACE_RGB;\
d.space = Color::SPACE_RGB;\
newColor0.getFloatColor(s);\
newColor1.getFloatColor(d);\
blend(t, s, d, newSourceOpacity, newTargetOpacity);\
target.setFromFloatColor(t);
}
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
    pureVirtual = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::FloatColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::FloatColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = double
		name = newSourceOpacity
		desc = Source opacity
        default = 1.
	}
	param[] = {
		type = double
		name = newTargetOpacity
		desc = Target opacity
        default = 1.
	}
    impl = 
}
function.public[] = {
	spec = virtual
	type = void
	name = blend
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::ByteColor&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor0
		desc = Color 0
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColor&
		name = newColor1
		desc = Color 1
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newSourceOpacity
		desc = Source opacity
        default = 255
	}
	param[] = {
		type = const Ionflux::Altjira::ByteColorValue&
		name = newTargetOpacity
		desc = Target opacity
        default = 255
	}
    impl = FloatColor s;\
FloatColor d;\
FloatColor t;\
s.space = newColor0.space;\
d.space = newColor1.space;\
byteToFloat(newColor0, s);\
byteToFloat(newColor1, d);\
blend(t, s, d, byteToFloat(newSourceOpacity), \
    byteToFloat(newTargetOpacity));\
floatToByte(t, target);
}
function.public[] = {
	spec = virtual
	type = void
	name = operator()
    const = true
	shortDesc = Blend colors
	longDesc = Blend the colors.
	param[] = {
		type = Ionflux::Altjira::Color&
		name = target
		desc = Target color
	}
	param[] = {
		type = const Ionflux::Altjira::Color*
		name = newColor0
		desc = Color 0
        default = 0
	}
	param[] = {
		type = const Ionflux::Altjira::Color*
		name = newColor1
		desc = Color 1
        default = 0
	}
	param[] = {
		type = const double*
		name = newSourceOpacity
		desc = Source opacity
        default = 0
	}
	param[] = {
		type = const double*
		name = newTargetOpacity
		desc = Target opacity
        default = 0
	}
    impl = if (newColor0 == 0)\
    newColor0 = &color0;\
if (newColor1 == 0)\
    newColor1 = &color1;\
if (newSourceOpacity == 0)\
    newSourceOpacity = &sourceOpacity;\
if (newTargetOpacity == 0)\
    newTargetOpacity = &targetOpacity;
return = {
        value = blend(target, *newColor0, *newColor1, *newSourceOpacity, *newTargetOpacity)
	    desc = Blended color
    }
}
function.public[] = {
	spec = virtual
	type = std::string
	name = getString
	const = true
	shortDesc = Get string representation
	longDesc = Get a string representation of the object
	impl = ostringstream state;\
state << getClassName() << "[" << color0.getString() << ", " \
    << color1.getString() << "; " << sourceOpacity << ", " \
    << targetOpacity << "]";
    return = {
        value = state.str()
        desc = String representation
    }
}

# Pure virtual member functions.

# operations

